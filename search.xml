<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Alist 搭建个人网盘挂载本地文件</title>
    <url>/2023/05/24/Alist%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98%E6%8C%82%E8%BD%BD%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1>windows 版本部署 ALis</h1>
<h2 id="⬇️下载：">⬇️下载：</h2>
<div class="note info no-icon modern"><p>下载地址：<a href="https://github.com/alist-org/alist/releases">https://github.com/alist-org/alist/releases</a></p>
</div>
<p><img src="http://oss.zorange.online/blog/20230525212652.png" alt=""></p>
<p>下载之后解压打开</p>
<p><img src="http://oss.zorange.online/blog/20230525212801.png" alt=""></p>
<h2 id="🏃运行">🏃运行</h2>
<ol>
<li>在解压之后的那个目录下面打开 cmd，输入：.\alist.exe server 运行程序</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.\alist.exe server</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>查看用户名和密码：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.\alist.exe admin</span><br></pre></td></tr></table></figure>
<p><img src="http://oss.zorange.online/blog/20230525213431.png" alt=""></p>
<ol start="3">
<li>再次运行 alist：在 alist 目录下打开 cmd 运行</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#再次启动alist</span></span><br><span class="line">alist start</span><br></pre></td></tr></table></figure>
<p><img src="http://oss.zorange.online/blog/20230525213842.png" alt=""></p>
<ol start="4">
<li>打开浏览器输入：127.0.0.1:5244</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:5244</span><br></pre></td></tr></table></figure>
<p><img src="http://oss.zorange.online/blog/20230525214336.png" alt=""></p>
<ol start="5">
<li>修改密码：点击页面下面的管理</li>
</ol>
<p><img src="http://oss.zorange.online/blog/20230525214426.png" alt=""></p>
<h2 id="挂载本地文件">挂载本地文件</h2>
<ol>
<li>添加存储</li>
</ol>
<p><img src="http://oss.zorange.online/blog/20230525215146.png" alt=""></p>
<ol start="2">
<li>设置你要挂载本地文件的路径：比如我要挂载 D:\IDM\ 下载</li>
</ol>
<p><img src="http://oss.zorange.online/blog/20230525215434.png" alt=""></p>
<ol start="3">
<li>提交即可，如图即挂载成功</li>
</ol>
<p><img src="http://oss.zorange.online/blog/20230525215727.png" alt=""></p>
<ol start="4">
<li>挂载成功</li>
</ol>
<p><img src="http://oss.zorange.online/blog/20230525215813.png" alt=""></p>
<h2 id="为-AList-添加快捷启动和暂停">为 AList 添加快捷启动和暂停</h2>
<p>在 alist 目录下建两个文本，后缀改为 vbs，发送快捷方式到桌面即可。</p>
<p>start.vbs</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">#快捷运行</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> ws</span><br><span class="line"><span class="keyword">Set</span> ws = Wscript.<span class="built_in">CreateObject</span>(<span class="string">&quot;Wscript.Shell&quot;</span>)</span><br><span class="line">ws.run <span class="string">&quot;alist.exe server&quot;</span>,vbhide</span><br><span class="line">Wscript.quit</span><br></pre></td></tr></table></figure>
<p>stop.vbs</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">#快捷暂停</span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> ws</span><br><span class="line"><span class="keyword">Set</span> ws = Wscript.<span class="built_in">CreateObject</span>(<span class="string">&quot;Wscript.Shell&quot;</span>)</span><br><span class="line">ws.run <span class="string">&quot;taskkill /f /im alist.exe&quot;</span>,<span class="number">0</span></span><br><span class="line">Wscript.quit</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="挂载阿里云盘">挂载阿里云盘</h2>
<p>官方文档地址：<a href="https://alist.nn.ci/zh/guide/drivers/aliyundrive_open.html">阿里云盘 Open | AList 文档 (nn.ci)</a></p>
<h2 id="外网访问">外网访问</h2>
<p>如果没有云服务器，可以通过内网穿透的方式达到外网访问</p>
<p>樱花穿透：[SakuraFrp (<a href="http://natfrp.com">natfrp.com</a>)](<a href="https://www.natfrp.com/user/">SakuraFrp (natfrp.com)</a>)</p>
]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>Alist</tag>
      </tags>
  </entry>
  <entry>
    <title>Aop</title>
    <url>/2025/09/15/Aop/</url>
    <content><![CDATA[<h2 id="Aop">Aop</h2>
<ol>
<li>切面：用于实现通知方法的类</li>
<li>横切关注点：在核心业务中分离出来的非核心业务，通知方法的方法体</li>
<li>连接点：用来运行通知方法的位置</li>
<li>切入点：用切入表达式计算出连接点。</li>
<li>通知:每一个横切关注点需要包装成一个方法，这个方法就叫做通知</li>
</ol>
<h3 id="基于注解">基于注解</h3>
<h4 id="开启自动代理">开启自动代理</h4>
<p><code> &lt;aop:aspectj-autoproxy /&gt;</code></p>
<p>@Aspect：切面标记</p>
<ol>
<li>
<p>通知：</p>
<ol>
<li>
<p>@Before	:前置</p>
<p>参数：JoinPoint joinPoint</p>
</li>
<li>
<p>@AfterReturning(returning=“result”)  ：返回</p>
<p>参数：Object result</p>
</li>
<li>
<p>@AfterThrowing(throwing=“e”) :  异常</p>
<p>参数：Exception|Throwable e</p>
</li>
<li>
<p>@After</p>
</li>
<li>
<p>@Around()</p>
<p>参数：ProceedingJoinPoint joinPoint</p>
</li>
</ol>
</li>
<li>
<p>切入点：</p>
<p>@Pointcut(“execution=(public int zornage.online.Entity.User.toString(int i))”)  =  (“* zorange.online…*(…)”)</p>
</li>
<li>
<p>优先级</p>
<p>@round(“1”)  越小优先级越高，默认为Integer最大值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 切点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public  int online.zorange.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取方法名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>+name+<span class="string">&quot;方法执行了&quot;</span>+args[<span class="number">0</span>]+<span class="string">&quot;,&quot;</span>+args[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置通知</span></span><br><span class="line">    <span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>+name+<span class="string">&quot;方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置返回值参数 returning = &quot;result&quot;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint // 连接点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result // 返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pointCut()&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">afterReturning</span><span class="params">(JoinPoint joinPoint ,Object result)</span>&#123;</span><br><span class="line">        joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;返回通知 ,结果：&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知</span></span><br><span class="line"><span class="comment">     * 设置异常参数 throwing = &quot;e&quot;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing(pointcut = &quot;pointCut()&quot;,throwing = &quot;e&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint,Throwable e)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知&quot;</span>+name+<span class="string">&quot;方法抛出异常了&quot;</span>+e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     * 必须有返回值</span></span><br><span class="line"><span class="comment">     * 有一个专门的参数 ProceedingJoinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取方法名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 前置通知</span></span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知&quot;</span>+name+<span class="string">&quot;方法执行了&quot;</span>+<span class="string">&quot;参数：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">            <span class="comment">// 执行目标方法</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            <span class="comment">// 返回通知</span></span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知&quot;</span>+name+<span class="string">&quot;方法执行了&quot;</span>+<span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            <span class="comment">// 异常通知</span></span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知&quot;</span>+name+<span class="string">&quot;方法执行了&quot;</span>+<span class="string">&quot;异常：&quot;</span>+e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 后置通知</span></span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知&quot;</span>+name+<span class="string">&quot;方法执行了&quot;</span>+<span class="string">&quot;最终执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="基于配置文件">基于配置文件</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置目标类的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;calculatorPure&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.aop.imp.CalculatorPureImpl&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置切面类的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.aop.aspect.LogAspect&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;logPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- aop:aspect标签：配置切面 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：关联切面类的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aop:before标签：配置前置通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- method属性：指定前置通知的方法名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- pointcut-ref属性：引用切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printLogBeforeCore&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after-returning标签：配置返回通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- returning属性：指定通知方法中用来接收目标方法返回值的参数名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span></span></span><br><span class="line"><span class="tag">                <span class="attr">method</span>=<span class="string">&quot;printLogAfterCoreSuccess&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">returning</span>=<span class="string">&quot;targetMethodReturnValue&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after-throwing标签：配置异常通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- throwing属性：指定通知方法中用来接收目标方法抛出异常的异常对象的参数名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span></span></span><br><span class="line"><span class="tag">                <span class="attr">method</span>=<span class="string">&quot;printLogAfterCoreException&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">throwing</span>=<span class="string">&quot;targetMethodException&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after标签：配置后置通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;printLogCoreFinallyEnd&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:around标签：配置环绕通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;aop:around method=&quot;……&quot; pointcut-ref=&quot;logPointCut&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="声明时事务">声明时事务</h2>
<blockquote>
<p><strong>编程式事务</strong>：需要手动去实现事务的功能呢</p>
</blockquote>
<blockquote>
<p><strong>声明式事务</strong>：只需要声明事务，具体的功能由框架完成。</p>
</blockquote>
<p>事务特性：</p>
<ol>
<li>
<p><strong>原子性</strong>：事务被视为一个不可分割的单位，事务中的操作要么都执行，要么都不执行</p>
</li>
<li>
<p><strong>一致性</strong>：事务将数据库从一个一致性转换到另外一个一致性状态</p>
</li>
<li>
<p><strong>隔离性</strong>：多个并发执行的事务不会干扰，</p>
<ol>
<li><strong>隔离级别</strong>：
<ol>
<li><strong>读未提交 (Read Uncommitted)</strong>：提供了最低的隔离级别，可能导致脏读、不可重复读和幻读。</li>
<li><strong>读已提交 (Read Committed)</strong>：防止脏读，但仍然可能遇到不可重复读和幻读。</li>
<li><strong>可重复读 (Repeatable Read)</strong>：防止脏读和不可重复读，但仍然可能发生幻读。==对正在操作的数据加锁。==</li>
<li><strong>序列化 (Serializable)</strong>：防止所有并发问题，但可能会引起较高的锁定开销。==对表加锁==</li>
</ol>
</li>
<li>脏读：读到了未提交的数据</li>
<li>不可重复读：只能读到已经提交的数据，读两次的数据可能不一样</li>
<li>幻读：对没有加锁的数据进行操作，当其他事务操作了之后，可能两次读到数据不一样。</li>
</ol>
</li>
<li>
<p><strong>持久性</strong>：</p>
<p>一旦事务被提交，它对数据库所做的更改就是永久性的，并且不能因为任何系统故障而丢失。</p>
<p>即使是在系统崩溃之后，一旦事务提交，它的结果也必须是可用的。</p>
</li>
</ol>
<h3 id="基于注解的声明式事务">基于注解的声明式事务</h3>
<ol>
<li>
<p><strong>配置事务管理器</strong></p>
<p>配置连接对象，依赖数据源: 因为事的开启是Connection对象开启的，所以事务管理就依赖数据源管理对象。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;DataSourceTransactionManager&quot;</span> &gt;</span></span><br><span class="line"> //数据源   </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>开启事务注解驱动</strong>(连接点)</p>
<p>@Transactional   标记连接点的注解。一般是加在Service层</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>​	==标记位置==：类或方法。</p>
<h3 id="声明式事务属性">声明式事务属性</h3>
<ol>
<li>
<p><strong>事务只读</strong>：readOnly=“false”</p>
<p>功能：对于==全部都是查询的操作==，可以设置事务只读，此时会通知数据库当前操作为只读操作，会从==数据库层面==优化当前操作。提高效率. 若操作中存在增删改操作时，会报错 Connection is read only</p>
<blockquote>
<p>数据库默认的隔离级别为可重复读，会对表加锁。</p>
</blockquote>
</li>
<li>
<p><strong>超时时间</strong>：超时回滚，释放资源</p>
<p>timeout=“-1”</p>
<p>-1:一直等 ，默认单位秒。</p>
<p>场景：事务超过指定时间未执行完毕。强制回滚，并抛出异常TransactionTimeOutException</p>
</li>
<li>
<p><strong>回滚策略</strong>：</p>
<p>rollBackFor = 字节码对象</p>
<p>rollBackForClassName  = 全类名</p>
<p>noRollBackFor</p>
<p>noRollBackForClassName</p>
<p>默认所有运行时异常回滚。</p>
<p>设置触发或不触发回滚的异常类型：</p>
</li>
<li>
<p><strong>隔离级别</strong>:</p>
<p>isoLation=“DEFAULT”</p>
<ol>
<li>DEFAULT:默认隔离级别，数据库决定</li>
<li>READ_UNCOMMITTED  不可重复读</li>
<li>READ_COMMITTED</li>
<li>Repeatable Read  可重复读</li>
<li>SERVILAZIABLE 序列化</li>
</ol>
</li>
<li>
<p><strong>传播行为</strong>：</p>
<p>propagation =&quot;REQUIRED &quot;</p>
<ol>
<li>
<p>REQUIRED   调用者的事务</p>
</li>
<li>
<p>REQUIRES_NEW   被调用者的事务</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>REQUIRED 
默认值</td>
<td>当前方法必须工作在事务中 
如果当前线程上有已经开启的事务可用，那么就在这个事务中运行 
如果当前线程上没有已经开启的事务，那么就自己开启新事务，在新事务中运行 
所以当前方法有可能和其他方法共用事务 
在共用事务的情况下：当前方法会因为其他方法回滚而受连累</td>
</tr>
<tr>
<td>REQUIRES_NEW</td>
<td>当前方法必须工作在事务中 
不管当前线程上是否有已经开启的事务，都要开启新事务 
在新事务中运行 
不会和其他方法共用事务，避免被其他方法连累</td>
</tr>
</tbody>
</table>
</li>
</ol>
<p>被传播的事务，默认使用的是事务是其调用者的事务。</p>
<p>A-&gt;B,A和B都有事务，默认B使用的A的事务。==针对B事务设置==，且必须为不同类中的方法。</p>
</li>
</ol>
<h3 id="基于XMl的声明式事务">基于XMl的声明式事务</h3>
<ol>
<li>
<p><strong>配置事务管理器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;DataSourceTransactionManager&quot;</span> &gt;</span></span><br><span class="line"> //数据源   </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>设置事务通知</strong> (连接点)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;tx&quot;</span> <span class="attr">tranaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    //事务属性,必须指定。</span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;menthod()&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;aop:advisor&gt; 标签：用于将一个已经定义好的Advice和一个Pointcut绑定在一起。</span></span><br><span class="line"><span class="comment">Advisor是一个简单的切面实现，它只需要一个Advice和一个Pointcut就可以工作。</span></span><br><span class="line"><span class="comment">在配置文件中，你可以通过advice-ref属性引用一个已经定义好的Advice，通过pointcut-expression或pointcut-ref属性来指定Pointcut。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    //</span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;tx&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">pointcut</span>=<span class="string">&quot;excution(* online.zorange.service..*(..) )&quot;</span>&gt;</span>				<span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Docker安装</title>
    <url>/2025/09/15/Docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="更新yum源">更新yum源</h2>
<h3 id="步骤-1：备份现有的-YUM-源配置">步骤 1：备份现有的 YUM 源配置</h3>
<p>首先，备份当前的 YUM 源配置文件，以防需要恢复：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<h3 id="步骤-2：下载阿里云的-YUM-源配置文件">步骤 2：下载阿里云的 YUM 源配置文件</h3>
<p>使用 wget 下载阿里云的 CentOS 7 YUM 源配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>
<h3 id="步骤-3：清除缓存并生成新的缓存">步骤 3：清除缓存并生成新的缓存</h3>
<p>清除旧的 YUM 缓存并生成新的缓存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  sudo yum clean all</span><br><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure>
<h3 id="步骤-4：验证-YUM-源是否配置成功">步骤 4：验证 YUM 源是否配置成功</h3>
<p>运行以下命令查看可用的更新包，确保新源配置正确：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum repolist</span><br></pre></td></tr></table></figure>
<p>完成后的效果</p>
<p>你现在已经成功将 CentOS 7 的 YUM 源切换为阿里云镜像源。这将提高下载速度和软件包更新的效率，因为阿里云的镜像服务器通常比官方源更快，特别是在国内。</p>
<h3 id="wegt不存在">wegt不存在</h3>
<h4 id="下载阿里云-YUM-仓库配置文件">下载阿里云 YUM 仓库配置文件</h4>
<p>由于你无法使用 yum 安装 wget，我们可以手动添加阿里云的 YUM 仓库配置文件。</p>
<p>进入 /etc/yum.repos.d/ 目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span><br></pre></td></tr></table></figure>
<h4 id="使用-curl（通常是默认安装的）来下载阿里云的-YUM-配置文件：">使用 curl（通常是默认安装的）来下载阿里云的 YUM 配置文件：</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo curl -o CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>
<h4 id="清除-YUM-缓存并生成新缓存">清除 YUM 缓存并生成新缓存</h4>
<p>配置完 YUM 仓库后，运行以下命令清除旧缓存并生成新缓存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  sudo yum clean all</span><br><span class="line">sudo yum makecache</span><br></pre></td></tr></table></figure>
<h2 id="下载Docker">下载Docker</h2>
<h3 id="步骤-1：更新系统软件包">步骤 1：更新系统软件包</h3>
<p>首先，确保你的系统软件包是最新的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum update -y</span><br></pre></td></tr></table></figure>
<h3 id="步骤-2：安装依赖包">步骤 2：安装依赖包</h3>
<p>安装一些必要的依赖包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
<h3 id="步骤-3：添加-Docker-仓库">步骤 3：添加 Docker 仓库</h3>
<p>使用以下命令添加 Docker 阿里云仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h3 id="步骤-4：安装-Docker">步骤 4：安装 Docker</h3>
<p>安装最新版本的 Docker：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install  docker-ce docker-ce-cli containerd.io  -y</span><br></pre></td></tr></table></figure>
<h3 id="步骤-5：启动-Docker-服务">步骤 5：启动 Docker 服务</h3>
<p>安装完成后，启动 Docker 服务并设置为开机自启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>
<h3 id="步骤-6：验证-Docker-安装">步骤 6：验证 Docker 安装</h3>
<p>你可以使用以下命令来验证 Docker 是否已正确安装并正在运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure>
<p>还可以运行一个测试容器来确认 Docker 正常工作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<h3 id="其他注意事项">其他注意事项</h3>
<p>防火墙配置：如果你的防火墙启用了，确保 Docker 的网络通信端口是开放的，特别是如果你计划在这台机器上运行 Docker 服务并对外提供服务。</p>
<p>用户权限：如果你希望当前用户无需 sudo 权限就可以运行 Docker 命令，可以将该用户添加到 docker 用户组：<br>
sudo usermod -aG docker $USER<br>
然后退出并重新登录以应用更改。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Echarts</title>
    <url>/2023/11/01/Echarts/</url>
    <content><![CDATA[<p><a href="https://echarts.apache.org/zh/index.html">Echarts 官网</a>																																							⭐</p>
<h2 id="📖安装">📖安装</h2>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i echarts -S</span><br></pre></td></tr></table></figure>
<h2 id="🔗引入">🔗引入</h2>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&quot;echarts&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="例子：">例子：</h2>
<h3 id="后端接口">后端接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.Quarter;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.common.Result;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/echarts&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EchartsController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;x&quot;</span>, CollUtil.newArrayList(<span class="string">&quot;Mon&quot;</span>, <span class="string">&quot;Tue&quot;</span>, <span class="string">&quot;Wed&quot;</span>, <span class="string">&quot;Thu&quot;</span>, <span class="string">&quot;Fri&quot;</span>, <span class="string">&quot;Sat&quot;</span>, <span class="string">&quot;Sun&quot;</span>));</span><br><span class="line">        map.put(<span class="string">&quot;y&quot;</span>, CollUtil.newArrayList(<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>));</span><br><span class="line">        <span class="keyword">return</span> Result.success(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取各季度新增用户数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;members&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">members</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; users=userService.list();</span><br><span class="line">        <span class="type">int</span> q1=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> q2=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> q3=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> q4=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            Date creatTime=user.getCreatTime();</span><br><span class="line">            <span class="comment">//获取季度</span></span><br><span class="line">            Quarter quarter= DateUtil.quarterEnum(creatTime);</span><br><span class="line">            <span class="keyword">switch</span> (quarter)&#123;</span><br><span class="line">                <span class="keyword">case</span> Q1: q1++;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Q2: q2++;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Q3: q3++;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Q4: q4++;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success(CollUtil.newArrayList(q1,q2,q3,q4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="前端">前端</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;!--      el-col：--&gt;</span><br><span class="line">  &lt;!--      el-col是element-ui中的栅格布局组件，用于将页面分割成24列，通过控制el-col的span属性来控制元素占据的列数--&gt;</span><br><span class="line">  &lt;!--      例如：el-col :span=&quot;12&quot;表示元素占据12列，占据一半的宽度--&gt;</span><br><span class="line">  &lt;el-row&gt;</span><br><span class="line">      &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;main&quot; style=&quot;width: 600px;height:600px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">      &lt;el-col :span=&quot;12&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;pie&quot; style=&quot;width: 600px;height:600px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/el-col&gt;</span><br><span class="line">  &lt;/el-row&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import  * as  echarts from &#x27;echarts&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123; //页面元素渲染之后再触发</span><br><span class="line">    //折线图</span><br><span class="line">    const chartDom = document.getElementById(&#x27;main&#x27;);</span><br><span class="line">    const myChart = echarts.init(chartDom);</span><br><span class="line">    let option;</span><br><span class="line">    option = &#123;</span><br><span class="line">      title:&#123;</span><br><span class="line">        text:&#x27;会员统计&#x27;,</span><br><span class="line">        subtext:&#x27;各季度会员统计&#x27;,</span><br><span class="line">        left:&#x27;center&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">      xAxis: &#123;</span><br><span class="line">        type: &#x27;category&#x27;,</span><br><span class="line">        data: [&#x27;第一季度&#x27;, &#x27;第二季度&#x27;, &#x27;第三季度&#x27;, &#x27;第四季度&#x27;]</span><br><span class="line">      &#125;,</span><br><span class="line">      yAxis: &#123;</span><br><span class="line">        type: &#x27;value&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      series: [</span><br><span class="line">        &#123;</span><br><span class="line">          data: [],</span><br><span class="line">          type: &#x27;line&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          data: [],</span><br><span class="line">          type: &#x27;bar&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //饼图</span><br><span class="line">    const pieDom = document.getElementById(&#x27;pie&#x27;);</span><br><span class="line">    const pieChar = echarts.init(pieDom);</span><br><span class="line">    let peiOption = &#123;</span><br><span class="line">      title:&#123;</span><br><span class="line">        text:&#x27;会员统计&#x27;,</span><br><span class="line">        subtext:&#x27;比例图&#x27;,</span><br><span class="line">        left:&#x27;center&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">      legend: &#123;</span><br><span class="line">        top: &#x27;bottom&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      toolbox: &#123;</span><br><span class="line">        show: true,</span><br><span class="line">        feature: &#123;</span><br><span class="line">          mark: &#123; show: true &#125;,</span><br><span class="line">          dataView: &#123; show: true, readOnly: false &#125;,</span><br><span class="line">          restore: &#123; show: true &#125;,</span><br><span class="line">          saveAsImage: &#123; show: true &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      series: [</span><br><span class="line">        &#123;</span><br><span class="line">          type: &#x27;pie&#x27;,</span><br><span class="line">          radius: [50, 250],</span><br><span class="line">          center: [&#x27;50%&#x27;, &#x27;50%&#x27;],</span><br><span class="line">          roseType: &#x27;area&#x27;,</span><br><span class="line">          itemStyle: &#123;</span><br><span class="line">            borderRadius: 8</span><br><span class="line">          &#125;,</span><br><span class="line">          data: []</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //异步请求数据</span><br><span class="line">    this.request.get(&quot;/echarts/members&quot;).then(res=&gt;&#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">      option.series[0].data = res.data</span><br><span class="line">      option.series[1].data = res.data</span><br><span class="line">      // 数据更新后，需要刷新图表</span><br><span class="line">      myChart.setOption(option);</span><br><span class="line"></span><br><span class="line">      peiOption.series[0].data = [</span><br><span class="line">        &#123;name:&#x27;第一季度&#x27; ,value:res.data[0]&#125;,</span><br><span class="line">        &#123;name:&#x27;第二季度&#x27; ,value:res.data[1]&#125;,</span><br><span class="line">        &#123;name:&#x27;第三季度&#x27; ,value:res.data[2]&#125;,</span><br><span class="line">        &#123;name:&#x27;第四季度&#x27; ,value:res.data[3]&#125;,</span><br><span class="line">      ]</span><br><span class="line">      pieChar.setOption(peiOption);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/2025/09/15/Elasticsearch/</url>
    <content><![CDATA[<h1>Elasticsearch概述</h1>
<h2 id="Elasticsearch的特性">Elasticsearch的特性</h2>
<p><strong>实时</strong><br>
理论上数据从写入Elasticsearch到数据可以被搜索只需要1秒左右的时间，实现准实时的数据索引和查询。</p>
<p><strong>分布式、可扩展</strong><br>
天生的分布式的设计，数据分片对于应用层透明，扩展性良好，可以轻易的进行节点扩容，支持上百甚至上千的服务器节点，支持PB级别的数据存储和搜索。</p>
<p><strong>稳定可靠</strong><br>
Elasticsearch的分布式、数据冗余特性提供更加可靠的运行机制，且经过大型互联网公司众多项目使用，可靠性得到验证。</p>
<p><strong>高可用</strong><br>
数据多副本、多节点存储，单节点的故障不影响<strong>集群</strong>的使用。</p>
<p><strong>Rest API</strong><br>
Elasticsearch提供标准的Rest API，这使得所有支持Rest API的语言都能够轻易的使用Elasticsearch，具备多语言通用的支持特性，易于使用。Elasticsearch Version 8以后，去除了以前Transport API、High-Level API、Low-Level API，统一标准的Rest API，这将使得Elasticsearch更加容易使用，原来被诟病的API混乱问题终于得到完美解决。</p>
<p><strong>高性能</strong><br>
Elasticsearch底层构建基于Lucene，具备强大的搜索能力，即便是PB级别的数据依然能够实现秒级的搜索。</p>
<p><strong>多客户端支持</strong><br>
支持Java、Python、Go、PHP、Ruby等多语言客户端，还支持JDBC、ODBC等客户端。</p>
<p><strong>安全支持</strong><br>
提供单点登录SSO、加密通信、集群角色、属性的访问控制，支持审计等功能，在安全层面上还支持集成第三方的安全组件，在Version 8以后，默认开启了HTTPS，大大简化了安全上的配置。</p>
<h2 id="倒排索引">倒排索引</h2>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/a827adfd570edf4a44881068818238c4.png" alt=""></p>
<p><strong>倒排索引步骤</strong>:</p>
<ul>
<li>数据根据词条进行分词，同时记录文档索引位置</li>
<li>将词条相同的数据化进行合并</li>
<li>对词条进行排序</li>
</ul>
<p><strong>搜索的过程</strong>:</p>
<ul>
<li>先将搜索词语进行分词，分词后再倒排索引列表查询文档位置(docId)。根据docId查询文档数据。</li>
</ul>
<h3 id="到排索引相对正排索引的区别">到排索引相对正排索引的区别:</h3>
<ol>
<li>正排索引:  通过正排索引表的id(索引)找到对应的字段(文章)  	 		  <code>key --- to ---&gt;word</code></li>
<li>倒排索引: 通过倒排索引表的 字段(单词) 找到对应的文章的id   	  <code> word--- to ---&gt;key</code></li>
</ol>
<h1>elasticsearch核心概念</h1>
<h2 id="es对照数据库">es对照数据库</h2>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/0a25b0b01fa60636252e231e7b9e3e81.png" alt=""></p>
<h2 id="索引">索引</h2>
<ul>
<li>与’‘库’'类似</li>
<li>一个索引就是拥有几分相识特征的<strong>文档集合</strong></li>
<li>我们对文档进行增删改查都要用到这个索引</li>
<li>在一个集群中,可以有任意多个索引</li>
</ul>
<h2 id="类型-Type">类型(Type)</h2>
<ul>
<li>与’‘表’'类似</li>
<li>在索引中存放的是文档,对于一个索引来说,可以有多个不同的文档,</li>
<li>对于文档来说,如果某写文档具有相同的结构, 则可以给他们定义相同的类型<br>
本，类型发生了不同的变化</li>
</ul>
<table>
<thead>
<tr>
<th>版本</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>5.x</td>
<td>支持多种type</td>
</tr>
<tr>
<td>6.x</td>
<td>只能有一种type</td>
</tr>
<tr>
<td>7.x</td>
<td>默认不再支持自定义索引类型（默认类型为：_doc）</td>
</tr>
<tr>
<td>8.x</td>
<td>默认类型为：_doc</td>
</tr>
</tbody>
</table>
<h2 id="文档-Document">文档(Document)</h2>
<ul>
<li>与 ‘‘行数据’’ 类似</li>
<li>也就是一条数据</li>
<li>以JSON格式存储</li>
</ul>
<h2 id="字段-Field">字段(Field)</h2>
<ul>
<li>相当于是数据表的字段</li>
<li>对文档数据根据不同属性进行的分类标识。</li>
</ul>
<h2 id="映射-Mapping">映射(Mapping)</h2>
<ul>
<li>与&quot;字段类型&quot; \  “默认值” \是否被索引相关</li>
<li>处理数据的方式和规则方面做一些限制</li>
</ul>
<h1>Elasticsearch 基础功能</h1>
<h2 id="分词器">分词器</h2>
<ul>
<li>
<p>官方提供的分词器有这么几种: Standard、Letter、Lowercase、Whitespace、UAX URL Email、Classic、Thai等</p>
</li>
<li>
<p>中文分词器可以使用第三方的比如IK分词器</p>
</li>
<li>
<p><strong>功能</strong>:通过分词器可以查看每个不同的分词器的分词粒度,来决定使用的分词器</p>
</li>
</ul>
<h3 id="分词器的使用">分词器的使用</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span>      # 分词器类型</span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我是中国人&quot;</span>        </span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">结果<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;是&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国人&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">POST _analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我是中国人&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">结果<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;是&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国人&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;国人&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="索引操作">索引操作</h2>
<ul>
<li>类型: 可以看做一个数据库,但是 它默认使用的类型为_doc,也可以看作表</li>
</ul>
<h3 id="创建索引">创建索引</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  PUT /my_index</span><br><span class="line"></span><br><span class="line">结果<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shards_acknowledged&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="查看所有索引">查看所有索引</h3>
<p><code>GET /_cat/indices?v</code></p>
<h3 id="查看单个索引">查看单个索引</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /my_index</span><br><span class="line">结果<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;my_index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;allocation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;_tier_preference&quot;</span><span class="punctuation">:</span> <span class="string">&quot;data_content&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;number_of_shards&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;provided_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;creation_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1693294063006&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;number_of_replicas&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kYMuXUZQRumMGqHoV0fDJw&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8050099&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="删除索引">删除索引</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /my_index</span><br><span class="line">结果<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="文档操作">文档操作</h2>
<ul>
<li>类似行数据</li>
</ul>
<h3 id="创建文档">创建文档</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">3999</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">返回结果<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">3999</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="查看文档">查看文档</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /my_index/_doc/<span class="number">1</span></span><br><span class="line">结果<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;小米手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;小米&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;images&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">3999</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="查询所有文档">查询所有文档</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my_index/_search</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;: 941,</span><br><span class="line">  &quot;timed_out&quot;: false,</span><br><span class="line">  &quot;_shards&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: 1,</span><br><span class="line">    &quot;successful&quot;: 1,</span><br><span class="line">    &quot;skipped&quot;: 0,</span><br><span class="line">    &quot;failed&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot;: &#123;</span><br><span class="line">    &quot;total&quot;: &#123;</span><br><span class="line">      &quot;value&quot;: 1,</span><br><span class="line">      &quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot;: 1,</span><br><span class="line">    &quot;hits&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;: &quot;my_index&quot;,</span><br><span class="line">        &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;: 1,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;title&quot;: &quot;小米手机&quot;,</span><br><span class="line">          &quot;category&quot;: &quot;小米&quot;,</span><br><span class="line">          &quot;images&quot;: &quot;http://www.gulixueyuan.com/xm.jpg&quot;,</span><br><span class="line">          &quot;price&quot;: 3999</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改文档">修改文档</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小米&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">4500</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="修改局部属性">修改局部属性</h4>
<p>语法:</p>
<p>POST /{索引名称}/_update/{docId}<br>
{<br>
“doc”: {</p>
<p>“属性”: “值”</p>
<p>}<br>
}</p>
<blockquote>
<p>只能使用POST请求方式</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">4500</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="删除文档">删除文档</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /my_index/_doc/<span class="number">1</span></span><br><span class="line">结果<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deleted&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="映射mapping">映射mapping</h2>
<ul>
<li>设置文档字段的限制
<ul>
<li>比如设置为text,则默认会进行分词和索引</li>
<li>设置为keywords则不会进行分词</li>
</ul>
</li>
</ul>
<h3 id="查看映射">查看映射</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /my_index/_mapping</span><br><span class="line">结果<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;my_index&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="动态映射">动态映射</h3>
<ul>
<li>当创建索引时,如果没设置<strong>映射</strong>,则会默认进行动态映射</li>
</ul>
<table>
<thead>
<tr>
<th>数据</th>
<th>对应的类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>null</td>
<td>字段不添加</td>
</tr>
<tr>
<td>true|flase</td>
<td>boolean</td>
</tr>
<tr>
<td>字符串</td>
<td>text</td>
</tr>
<tr>
<td>数值</td>
<td>long</td>
</tr>
<tr>
<td>小数</td>
<td>float</td>
</tr>
<tr>
<td>日期</td>
<td>date</td>
</tr>
</tbody>
</table>
<h3 id="静态映射">静态映射</h3>
<ul>
<li>手动设置映射关系</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#删除原创建的索引</span><br><span class="line">DELETE /my_index</span><br><span class="line"></span><br><span class="line">#创建索引，并同时指定映射关系和分词器等。</span><br><span class="line">PUT /my_index</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;store&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;store&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;store&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;store&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">结果<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shards_acknowledged&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="type-分类">type 分类</h3>
<ul>
<li>字符串：text(支持分词)和 keyword(不支持分词)。</li>
<li>text：该类型被用来索引长文本，在创建索引前会将这些文本进行分词，转化为词的组合，建立索引；允许es来检索这些词，text类型不能用来排序和聚合。</li>
<li>keyword：该类型不能分词，可以被用来检索过滤、排序和聚合，keyword类型不可用text进行分词模糊检索。</li>
<li>数值型：long、integer、short、byte、double、float</li>
<li>日期型：date</li>
<li>布尔型：boolean</li>
<li>特殊数据类型：nested</li>
</ul>
<h3 id="nested-介绍">nested 介绍</h3>
<ul>
<li>
<p>在es中, 如果一个数组存储多个对象, 当进行文档条件查询时, 如果根据数组内部的对象的字段进行条件查询, 默认会对数组的对象进行压缩存储.</p>
</li>
<li>
<p>即,相同字段存储在同一个属性中, 这样在根据某一个对象进行条件查询时, 实际上是根据声音对象的字段进行条件查询, 这样就会导致数组对象的条件查询失效.</p>
</li>
<li>
<p><strong>nested</strong> 则是来解决这个问题的:</p>
<ul>
<li><strong>nested</strong>：类型是一种特殊的对象object数据类型(specialised version of the object datatype )，允许对象数组彼此独立地进行索引和查询。</li>
</ul>
</li>
</ul>
<p>所以在进行数组对象的条件查询之前,应该先将该数组对象的type设置为nested.</p>
<h1>DSL高级查询</h1>
<ul>
<li>Query DSL概述: Domain Specific Language(领域专用语言)，Elasticsearch提供了基于JSON的DSL来定义查询。</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/81a1628e0ca2b2f79598e7d1146c1e44.png" alt=""></p>
<h2 id="DSL查询">DSL查询</h2>
<h3 id="查询所有文档-v2">查询所有文档</h3>
<p><code>match_all:</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="匹配查询-match">匹配查询(match)</h3>
<p><code>match:</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为智能手机&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="多字段匹配">多字段匹配</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为智能手机&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;title&quot;</span><span class="punctuation">,</span><span class="string">&quot;category&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="关键字精确查询">关键字精确查询</h3>
<p><code>term:</code>关键字不会进行分词</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="多关键字精确查询">多关键字精确查询</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;terms&quot;: &#123;</span><br><span class="line">      &quot;category&quot;: [</span><br><span class="line">        &quot;华为&quot;,</span><br><span class="line">        &quot;vivo&quot;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="范围查询">范围查询</h3>
<p>范围查询使用<code>range</code>。</p>
<ul>
<li><code>gte</code>: 大于等于</li>
<li><code>lte</code>: 小于等于</li>
<li><code>gt</code>: 大于</li>
<li><code>lt</code>: 小于</li>
</ul>
<h3 id="指定返回字段">指定返回字段</h3>
<p><code>query</code>同级增加<code>_source</code>进行过滤。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;手机&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;title&quot;</span><span class="punctuation">,</span><span class="string">&quot;price&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="组合查询-多条件查询">组合查询(多条件查询)</h3>
<p><code>bool</code> 各条件之间有and,or或not的关系</p>
<ul>
<li><code>must</code>: 各个条件都必须满足，所有条件是and的关系</li>
<li><code>should</code>: 各个条件有一个满足即可，即各条件是or的关系</li>
<li><code>must_not</code>: 不满足所有条件，即各条件是not的关系</li>
<li><code>filter</code>: 与must效果等同，但是它不计算得分，效率更高点。 得分:  查询出的文档与查询语句的关联性大小</li>
</ul>
<h4 id="must">must</h4>
<p>各个条件都必须满足，所有条件是and的关系</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">3000</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">5400</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="should">should</h4>
<p>各个条件有一个满足即可，即各条件是or的关系</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">3000</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">5000</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="如果should和must同时存在，他们之间是and关系：">如果should和must同时存在，他们之间是and关系：</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">3000</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">5000</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">3000</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">5000</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="must-not">must_not</h4>
<p>不满足所有条件，即各条件是not的关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;match&quot;: &#123;</span><br><span class="line">            &quot;title&quot;: &quot;华为&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;price&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: 3000,</span><br><span class="line">              &quot;lte&quot;: 5000</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="filter">filter</h4>
<p>与must效果等同，但是它不计算得分，效率更高点。</p>
<p>_score的分值为0 在Elasticsearch中，_score 字段代表每个文档的相关性分数（relevance score）。这个分数用于衡量一个文档与特定查询的匹配程度，它是基于搜索查询的条件和文档的内容来计算的。相关性分数越高，表示文档与查询的匹配度越高，排名也越靠前。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="聚合查询">聚合查询</h3>
<p>聚合允许使用者对es文档进行统计分析，类似与关系型数据库中的group by，当然还有很多其他的聚合，例如取最大值、平均值等等。</p>
<ul>
<li>对query查询出的文档进行统计分析: <code>max</code>   <code>min</code>    <code>avg</code>    <code>sum</code>   <code>stats</code>  <code>terms</code> 等</li>
<li><code>stats</code>: 计算出:<code>max</code>  <code>min</code> <code>avg</code> <code>sum</code></li>
<li><code>terms</code>: 类似group by</li>
</ul>
<h4 id="max">max</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;max_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;max&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;price&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="min">min</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;min_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;min&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;price&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="avg">avg</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;avg_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;price&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="sum">sum</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sum_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;sum&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;price&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="stats">stats</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;stats_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;price&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="terms">terms</h3>
<p>查询出来的是多个文档的集合,每个数组内部最多有<code>size</code>个文档</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;groupby_category&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;category&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>还可以对桶继续计算：计算每个品牌对应的平均值是多少！</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;groupby_category&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;category&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;avg_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;price&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="top-hit">top_hit</h3>
<p>查询桶中顶部的详细信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;top_hit&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;range&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;order&quot;</span><span class="punctuation">:</span><span class="string">&quot;desc&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="排序">排序</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>        # 分数</span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="分页查询">分页查询</h3>
<p>分页的两个关键属性:from、size。</p>
<ul>
<li><code>from</code>: 当前页的起始索引，默认从0开始。 from = (pageNum - 1) * size</li>
<li><code>size</code>: 每页显示多少条</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="高亮显示">高亮显示</h3>
<blockquote>
<p>无检索不高亮</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 检索数据</span><br><span class="line">GET /my_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;华为手机&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;font color:#e4393c&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;/font&gt;&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h1>Java Api操作ES</h1>
<h2 id="1-创建项目es-test">1. 创建项目es-test</h2>
<h2 id="2-导入依赖">2. 导入依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>online.zorange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>es-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span><span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-编写启动类和配置文件">3. 编写启动类和配置文件</h2>
<p>配置es的地址</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">uris:</span> <span class="string">test.zorange.online:9200</span></span><br></pre></td></tr></table></figure>
<h2 id="4-编写实体类-用于es操作">4.编写实体类,用于es操作</h2>
<h3 id="使用注解">使用注解</h3>
<ul>
<li>定义索引:<code>@Document(indexName = &quot;person&quot;)</code></li>
<li>标名id:<code>@Id</code></li>
<li>设置mapping: <code>  @Field(type = FieldType.Text,store = true,index = true)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.jfr.DataAmount;<span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/10/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text,store = true,index = true)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> Long age;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text,store = true,index=true)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="5-编写Resipositry接口">5. 编写Resipositry接口</h2>
<ul>
<li>实现<code>CrudRepository&lt;Entity,Retun&gt;</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> online.zorange.entity.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/10/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonRepository</span> <span class="keyword">extends</span> <span class="title class_">CrudRepository</span>&lt;Person,Long&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Person&gt; <span class="title function_">findByAddressContains</span><span class="params">(String address)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Person&gt; <span class="title function_">findByPasswordAndNameContains</span><span class="params">(String password,String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="简单操作-respositry">简单操作 respositry</h2>
<ul>
<li>
<ol>
<li>respositry初始提供了 三个方法: <code>findById </code>  <code>findAllByIds</code> <code>findAll</code></li>
</ol>
</li>
<li>
<ol start="2">
<li>扩展简单查询:</li>
</ol>
<ul>
<li>
<ol>
<li>查找以find开头</li>
</ol>
</li>
<li>
<ol start="2">
<li>条件前加By ,后接条件字段</li>
</ol>
</li>
<li>
<ol start="3">
<li><code>与</code> 用<code>And</code>  <code>或</code> 用 	<code>or</code>, 范围用<code>Between</code></li>
</ol>
</li>
<li>
<ol start="4">
<li>匹配查询接<code>Contains</code></li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="复杂查询">复杂查询</h2>
<ul>
<li>
<ol>
<li>注入 :</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ElasticsearchClient elasticsearchClient;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>编写查询<code>reques</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SearchRequest searchRequest=SearchRequest.of(sr-&gt;sr.index(<span class="string">&quot;my_index&quot;</span>).</span><br><span class="line">                query(q-&gt;q.match(v-&gt;v.field(<span class="string">&quot;title&quot;</span>).query(<span class="string">&quot;oppo&quot;</span>))));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SearchResponse&lt;Object&gt; search = elasticsearchClient.search(searchRequest, Object.class);</span><br><span class="line">        List&lt;Hit&lt;Object&gt;&gt; hits = search.hits().hits();</span><br><span class="line">        System.out.println(<span class="string">&quot;hits = &quot;</span> + hits);</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Gateway组件</title>
    <url>/2025/09/15/Gateway%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1>Gateway组件</h1>
<h2 id="概述">概述</h2>
<ul>
<li>Gateway是在spring生态系统之上构建的API网关服务，基于Spring5，SpringBoot2和Project Reactor等技术。Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能，例如：熔断、限流、重试等</li>
<li>SpringCloud Gateway是SpringCloud的一个全新项目，基于Spring5.X+SpringBoot2.X和Project Reactor等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的API路由管理方式。</li>
<li>为了提升网关的性能，SpringCloud Gatway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通讯框架Netty。</li>
<li>SpringCloud Gateway的目标提供统一的路由方式且基于Filter链的方式提供了网关基本的功能，例如：安全、监控/指标、和限流。</li>
</ul>
<h2 id="架构图">架构图</h2>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/500aeff97ef93d3543ef8c059bf4e0f8.png" alt=""></p>
<h2 id="三大核心概念">三大核心概念</h2>
<h3 id="Route-路由">Route(路由)</h3>
<p>路由是构建网关的基本模块，它由ID，目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由</p>
<h3 id="Predicate（断言）">Predicate（断言）</h3>
<p>参考的是java8的java.util.function.Predicate开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由</p>
<h3 id="Filter（过滤）">Filter（过滤）</h3>
<p>指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</p>
<h2 id="工作流程">工作流程</h2>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/b6febb88e53ca66217d7b95833168f37.png" alt=""></p>
<ul>
<li>客户端向Spring Cloud Gateway发出请求。然后在Gateway Handler Mapping中找到与请求匹配的路由，将其发送到Gateway Web Handler.</li>
<li>Handler再通过指定的过滤器链来将请求发送给我们实际的服务执行业务逻辑，然后返回。</li>
<li>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后(“post”)执行业务逻辑。</li>
<li>Filter在&quot;pre&quot;类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在&quot;post&quot;类型的过滤器中可以做响应内容、响应头的修改，日志的输出等有着非常重要的作用</li>
</ul>
<h2 id="Gateway入门">Gateway入门</h2>
<ol>
<li>创建模块</li>
<li>引入如下依赖：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 负载均衡组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写启动类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在application.yml配置文件中编写基础配置和路由规则</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8222</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spzx-cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">spzx-cloud-user</span>  <span class="comment"># 路由id，可以自定义，只要唯一即可</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://spzx-cloud-user</span>  <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/*/user/**</span> <span class="comment"># 路径匹配</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">spzx-cloud-order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://spzx-cloud-order</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/*/order/**</span> <span class="comment"># 路径匹配</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure>
<h2 id="Predicate的使用">Predicate的使用</h2>
<ul>
<li>断言：网关的入口，访问路径的规则</li>
<li>框架底层提供了很多规则</li>
<li>官网：<a href="https://docs.spring.io/spring-cloud-gateway/docs/4.0.6/reference/html/#gateway-request-predicates-factories">https://docs.spring.io/spring-cloud-gateway/docs/4.0.6/reference/html/#gateway-request-predicates-factories</a></li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/214a26d647add7520610640d7f93baba.png" alt=""></p>
<h3 id="predicate">predicate</h3>
<ul>
<li>
<p>时间</p>
<ul>
<li>After: 之后</li>
<li>before：之前</li>
<li>Between：之间</li>
</ul>
</li>
<li>
<p>Cookie</p>
</li>
<li>
<p>Header</p>
</li>
<li>
<p>Host</p>
</li>
<li>
<p>Method</p>
</li>
<li>
<p>Path</p>
</li>
<li>
<p>Query</p>
</li>
<li>
<p>RemoteAddr</p>
</li>
<li>
<p>Weight：权重</p>
</li>
<li>
<p>XForworded：网段</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">xforwarded_remoteaddr_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">   	     <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">XForwardedRemoteAddr=192.168.1.1/24</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="总结">总结</h3>
<p>Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapper基础框架的一部分。<br>
Spring Cloud Gateway包括许多内置的Route Predicate工厂。所有这些Predicate都与HTTP请求的不同属性匹配。多个Route Predicate工厂可以进行组合<br>
Spring Cloud Gateway创建Route对象时，使用RoutePredicateFactory创建Predicate对象，Predicate对象可以赋值给 Route。Spring Cloud Gateway包含许多内置的Route Predicate Factories。所有这些谓词都匹配HTTP请求的不同属性。多种谓词工厂可以组合，并通过逻辑and 。</p>
<h2 id="过滤器">过滤器</h2>
<p>GatewayFilter: 局部过滤器</p>
<p>​    路由过滤器：</p>
<p>​    默认过滤器:</p>
<p>GlobalFilter: 全局过滤器</p>
<h3 id="内置过滤器">内置过滤器</h3>
<p>spring gateway提供了31种不同的过滤器。</p>
<p>官网地址：<a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories">https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/#gatewayfilter-factories</a></p>
<p>例如：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>AddRequestHeader</td>
<td>给当前请求添加一个请求头</td>
</tr>
<tr>
<td>RemoveRequestHeader</td>
<td>移除请求中的一个请求头</td>
</tr>
<tr>
<td>AddResponseHeader</td>
<td>给响应结果中添加一个响应头</td>
</tr>
<tr>
<td>RemoveResponseHeader</td>
<td>从响应结果中移除有一个响应头</td>
</tr>
<tr>
<td>RequestRateLimiter</td>
<td>限制请求的流量</td>
</tr>
</tbody>
</table>
<p>在Gateway中提供了三种级别的类型的过滤器：</p>
<p>1、路由过滤器：只针对当前路由有效</p>
<p>2、默认过滤器：针对所有的路由都有效</p>
<p>3、全局过滤器：针对所有的路由都有效，需要进行自定义</p>
<h3 id="路由过滤器">路由过滤器</h3>
<ul>
<li>
<p>位置，写在路由下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">spzx-cloud-user</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://spzx-cloud-user</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/user/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">atguigu</span>		<span class="comment"># 配置路由基本的过滤器，给访问user微服务的所有接口添加Truth请求头</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="默认过滤器">默认过滤器</h3>
<ul>
<li>
<p>对所有路由都生效</p>
</li>
<li>
<p>格式：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">spzx-cloud-user</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://spzx-cloud-user</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/user/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">atguigu</span> <span class="string">is</span> <span class="string">good</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="全局过滤器">全局过滤器</h3>
<ul>
<li>自定义过滤器：需要自己实现</li>
</ul>
<h4 id="步骤">步骤</h4>
<p>1、定义一个类实现GlobalFilter接口</p>
<p>2、重写filter方法</p>
<p>3、将该类纳入到spring容器中</p>
<p>4、实现Ordered接口定义该过滤器的顺序</p>
<p>​		当有多个全局过滤器时，Orderd返回的值越小，优先级越高</p>
<h4 id="实现代码">实现代码</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.http.HttpStatus.SC_BAD_REQUEST;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/9/13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomGlobalFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">ServerHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">        MultiValueMap&lt;String, String&gt; queryParams = request.getQueryParams();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> queryParams.getFirst(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(username!=<span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span>    chain.filter(exchange);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            response.setStatusCode(HttpStatus.BAD_REQUEST);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response.setComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//优先级 越小越高</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="过滤器执行的顺序">过滤器执行的顺序</h3>
<ul>
<li>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</li>
<li>执行规则</li>
</ul>
<p>​		1、按照order的值进行排序，order的值越小，优先级越高，执行顺序越靠前。</p>
<p>​		2、路由过滤器和默认过滤器会按照order的值进行排序，这个值由spring进行指定，默认是按照声		明顺序从1递增</p>
<p>​		3、当过滤器的order值一样时，会按照 globalFilter &gt; defaultFilter &gt; 路由过滤器的顺序执行</p>
<h3 id="RequestRateLimiter">RequestRateLimiter</h3>
<ul>
<li>默认的限流器</li>
<li>基于redis实现</li>
</ul>
<h4 id="实现步骤">实现步骤</h4>
<ol>
<li>
<p>准备可用的redis</p>
</li>
<li>
<p>maven中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>确定按照什么维度限流，例如按照请求中的username参数限流，这是通过编写KeyResolver接口的实现来完成的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomizeConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    KeyResolver <span class="title function_">userKeyResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getAddress().getHostAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置application.yml文件，添加过滤器</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">spzx-cloud-order</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://spzx-cloud-order</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/*/order/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Response-Red,</span> <span class="string">Blue</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@userKeyResolver&#125;&quot;</span></span><br><span class="line">                <span class="comment"># 令牌入桶的速度为每秒1个，相当于QPS</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span></span><br><span class="line">              <span class="comment"># 桶内能装5个令牌，相当于峰值，要注意的是：第一秒从桶内能去5个，但是第二秒只能取到1个了，因为入桶速度是每秒1个</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">5</span></span><br><span class="line">              <span class="comment"># 每个请求需要的令牌数</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.requestedTokens:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http://localhost:80/api/order/findOrderByOrderId/101</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spzx-cloud-gateway</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>最后使用Jemeter测试即可。</li>
</ul>
<h2 id="跨域处理">跨域处理</h2>
<h3 id="Global-CORS-Configuration-全局跨域">Global CORS Configuration 全局跨域</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;https://docs.spring.io&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">GET</span></span><br></pre></td></tr></table></figure>
<h3 id="Route-CORS-Configuration-路由跨域">Route CORS Configuration 路由跨域</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cors_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/service/**</span></span><br><span class="line">        <span class="attr">metadata:</span></span><br><span class="line">          <span class="attr">cors:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>GitHub Pages + 后端 API 的完整实现指南</title>
    <url>/2025/09/23/GitHub%20Pages%20+%20%E5%90%8E%E7%AB%AF%20API%20%E7%9A%84%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1>使用方案二：GitHub Pages + 后端 API 的完整实现指南</h1>
<h2 id="第一步：创建-GitHub-Personal-Access-Token">第一步：创建 GitHub Personal Access Token</h2>
<ol>
<li>访问 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></li>
<li>点击 “Generate new token”</li>
<li>选择权限：
<ul>
<li><code>repo</code> (完全控制仓库)</li>
<li><code>workflow</code> (如果需要使用 Actions)</li>
</ul>
</li>
<li>生成并复制 token（重要：只显示一次）</li>
</ol>
<h2 id="第二步：准备项目结构">第二步：准备项目结构</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">markdown-editor/</span><br><span class="line">├── backend/</span><br><span class="line">│   ├── server.js</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   └── .env</span><br><span class="line">├── frontend/</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── style.css</span><br><span class="line">│   └── app.js</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure>
<h2 id="第三步：后端设置">第三步：后端设置</h2>
<h3 id="创建后端目录和文件">创建后端目录和文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p markdown-editor/backend</span><br><span class="line"><span class="built_in">cd</span> markdown-editor/backend</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>
<h3 id="安装后端依赖">安装后端依赖</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express cors @octokit/rest dotenv</span><br></pre></td></tr></table></figure>
<h3 id="创建-server-js">创建 server.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Octokit</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@octokit/rest&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;dotenv&#x27;</span>).<span class="title function_">config</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>(&#123; <span class="attr">limit</span>: <span class="string">&#x27;10mb&#x27;</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;../frontend&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 Octokit</span></span><br><span class="line"><span class="keyword">const</span> octokit = <span class="keyword">new</span> <span class="title class_">Octokit</span>(&#123;</span><br><span class="line">  <span class="attr">auth</span>: process.<span class="property">env</span>.<span class="property">GITHUB_TOKEN</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 健康检查端点</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/health&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="string">&#x27;OK&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;Markdown Editor API is running&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存 Markdown 文件</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/save-markdown&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; content, filename, message, folder = <span class="string">&#x27;&#x27;</span> &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证输入</span></span><br><span class="line">    <span class="keyword">if</span> (!content || !filename) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">error</span>: <span class="string">&#x27;内容和文件名是必需的&#x27;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建文件路径</span></span><br><span class="line">    <span class="keyword">const</span> filePath = folder ? <span class="string">`<span class="subst">$&#123;folder&#125;</span>/<span class="subst">$&#123;filename&#125;</span>`</span> : filename;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查文件是否已存在（获取 SHA）</span></span><br><span class="line">    <span class="keyword">let</span> sha = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> existingFile = <span class="keyword">await</span> octokit.<span class="property">repos</span>.<span class="title function_">getContent</span>(&#123;</span><br><span class="line">        <span class="attr">owner</span>: process.<span class="property">env</span>.<span class="property">GITHUB_OWNER</span>,</span><br><span class="line">        <span class="attr">repo</span>: process.<span class="property">env</span>.<span class="property">GITHUB_REPO</span>,</span><br><span class="line">        <span class="attr">branch</span>: process.<span class="property">env</span>.<span class="property">GITHUB_BRANCH</span>,</span><br><span class="line">        <span class="attr">path</span>: filePath</span><br><span class="line">      &#125;);</span><br><span class="line">      sha = existingFile.<span class="property">data</span>.<span class="property">sha</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 文件不存在是正常的，继续创建新文件</span></span><br><span class="line">      <span class="keyword">if</span> (error.<span class="property">status</span> !== <span class="number">404</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建或更新文件</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> octokit.<span class="property">repos</span>.<span class="title function_">createOrUpdateFileContents</span>(&#123;</span><br><span class="line">      <span class="attr">owner</span>: process.<span class="property">env</span>.<span class="property">GITHUB_OWNER</span>,</span><br><span class="line">      <span class="attr">repo</span>: process.<span class="property">env</span>.<span class="property">GITHUB_REPO</span>,</span><br><span class="line">      <span class="attr">branch</span>: process.<span class="property">env</span>.<span class="property">GITHUB_BRANCH</span>,</span><br><span class="line">      <span class="attr">path</span>: filePath,</span><br><span class="line">      <span class="attr">message</span>: message || <span class="string">`Update <span class="subst">$&#123;filename&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="title class_">Buffer</span>.<span class="title function_">from</span>(content).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>),</span><br><span class="line">      <span class="attr">sha</span>: sha, <span class="comment">// 如果文件存在，需要提供 SHA</span></span><br><span class="line">      <span class="attr">committer</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: process.<span class="property">env</span>.<span class="property">COMMITTER_NAME</span> || <span class="string">&#x27;Markdown Editor&#x27;</span>,</span><br><span class="line">        <span class="attr">email</span>: process.<span class="property">env</span>.<span class="property">COMMITTER_EMAIL</span> || <span class="string">&#x27;editor@example.com&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;文件上传成功&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: response.<span class="property">data</span>.<span class="property">content</span>.<span class="property">html_url</span>,</span><br><span class="line">      <span class="attr">download_url</span>: response.<span class="property">data</span>.<span class="property">content</span>.<span class="property">download_url</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error saving markdown:&#x27;</span>, error);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">error</span>: error.<span class="property">message</span> || <span class="string">&#x27;保存文件时发生错误&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件列表</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/files&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; folder = <span class="string">&#x27;&#x27;</span> &#125; = req.<span class="property">query</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> octokit.<span class="property">repos</span>.<span class="title function_">getContent</span>(&#123;</span><br><span class="line">      <span class="attr">owner</span>: process.<span class="property">env</span>.<span class="property">GITHUB_OWNER</span>,</span><br><span class="line">      <span class="attr">repo</span>: process.<span class="property">env</span>.<span class="property">GITHUB_REPO</span>,</span><br><span class="line">      <span class="attr">branch</span>: process.<span class="property">env</span>.<span class="property">GITHUB_BRANCH</span>,</span><br><span class="line">      <span class="attr">path</span>: folder</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> files = response.<span class="property">data</span></span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;.md&#x27;</span>))</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">        <span class="attr">path</span>: item.<span class="property">path</span>,</span><br><span class="line">        <span class="attr">url</span>: item.<span class="property">html_url</span>,</span><br><span class="line">        <span class="attr">download_url</span>: item.<span class="property">download_url</span></span><br><span class="line">      &#125;));</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">success</span>: <span class="literal">true</span>, files &#125;);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching files:&#x27;</span>, error);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">error</span>: error.<span class="property">message</span> || <span class="string">&#x27;获取文件列表时发生错误&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">error, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Unhandled error:&#x27;</span>, error);</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">    <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">error</span>: <span class="string">&#x27;服务器内部错误&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`🚀 Server running on http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`📝 Markdown Editor API ready`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="创建-env-文件">创建 .env 文件</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># GitHub 配置</span><br><span class="line">GITHUB_TOKEN=你的个人访问令牌</span><br><span class="line">GITHUB_OWNER=你的GitHub用户名</span><br><span class="line">GITHUB_REPO=你的仓库名</span><br><span class="line">GITHUB_BRANCH=你的分支名</span><br><span class="line"></span><br><span class="line"># 提交者信息</span><br><span class="line">COMMITTER_NAME=Markdown Editor</span><br><span class="line">COMMITTER_EMAIL=editor@example.com</span><br><span class="line"></span><br><span class="line"># 服务器配置</span><br><span class="line">PORT=3001</span><br><span class="line">NODE_ENV=development</span><br></pre></td></tr></table></figure>
<h3 id="创建-package-json-脚本">创建 package.json 脚本</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon server.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;setup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm install express cors @octokit/rest dotenv&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="第四步：前端实现">第四步：前端实现</h2>
<h3 id="创建前端目录和文件">创建前端目录和文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ../frontend</span><br></pre></td></tr></table></figure>
<h3 id="创建-index-html">创建 index.html</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Markdown 编辑器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-markdown&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Markdown 编辑器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>在线编辑并保存到 GitHub 仓库<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;editor-container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;editor-section&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section-header&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-edit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 编辑区<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toolbar&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;insertText(&#x27;**粗体**&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>B<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;insertText(&#x27;*斜体*&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>I<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;insertText(&#x27;# 标题&#x27;)&quot;</span>&gt;</span>H1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;insertText(&#x27;```\n代码块\n```&#x27;)&quot;</span>&gt;</span>代码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;markdown-input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;开始编写你的 Markdown 内容...&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview-section&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section-header&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-eye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 预览区<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;markdown-preview&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;filename&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-file&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;filename&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;example.md&quot;</span> <span class="attr">value</span>=<span class="string">&quot;document.md&quot;</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;folder&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-folder&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 文件夹：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;folder&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;docs&quot;</span> <span class="attr">value</span>=<span class="string">&quot;markdown-docs&quot;</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-comment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 提交信息：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;添加新文档&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveToGitHub()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-primary&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-cloud-upload-alt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 保存到 GitHub</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;loadFileList()&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-secondary&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-sync&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 刷新文件列表</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file-list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-files&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 仓库中的 Markdown 文件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;file-list-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;status-message&quot;</span> <span class="attr">class</span>=<span class="string">&quot;status-hidden&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/marked/marked.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建-style-css">创建 style.css</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">&#x27;Segoe UI&#x27;</span>, Roboto, sans-serif;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="number">#667eea</span> <span class="number">0%</span>, <span class="number">#764ba2</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="number">#2c3e50</span> <span class="number">0%</span>, <span class="number">#34495e</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2.5em</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.editor-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.editor-section</span>, <span class="selector-class">.preview-section</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f8f9fa</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.section-header</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e9ecef</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#dee2e6</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.section-header</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#495057</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toolbar</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toolbar</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.toolbar</span> <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#007bff</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#markdown-input</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">resize</span>: none;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Monaco&#x27;</span>, <span class="string">&#x27;Menlo&#x27;</span>, <span class="string">&#x27;Ubuntu Mono&#x27;</span>, monospace;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#markdown-preview</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#markdown-preview</span> <span class="selector-tag">h1</span>, <span class="selector-id">#markdown-preview</span> <span class="selector-tag">h2</span>, <span class="selector-id">#markdown-preview</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#markdown-preview</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#markdown-preview</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: monospace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#markdown-preview</span> pre &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f8f9fa</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.controls</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f8f9fa</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#dee2e6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.control-group</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: auto <span class="number">1</span>fr auto <span class="number">1</span>fr auto <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.control-group</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#495057</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.control-group</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ced4da</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-group</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-primary</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="number">#007bff</span> <span class="number">0%</span>, <span class="number">#0056b3</span> <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-primary</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2px</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">123</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-secondary</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#6c757d</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-secondary</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#545b62</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-list</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#dee2e6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-list</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#495057</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#file-list-container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="built_in">minmax</span>(<span class="number">250px</span>, <span class="number">1</span>fr));</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-item</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f8f9fa</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dee2e6</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2px</span>);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-item</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#007bff</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-item</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#6c757d</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-actions</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">gap</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.file-actions</span> <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.status-hidden</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.status-show</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">    <span class="attribute">animation</span>: slideIn <span class="number">0.3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.status-success</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#28a745</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.status-error</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#dc3545</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> slideIn &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100%</span>);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.editor-container</span> &#123;</span><br><span class="line">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">        <span class="attribute">height</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-class">.control-group</span> &#123;</span><br><span class="line">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建-app-js">创建 app.js</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化 Marked.js</span></span><br><span class="line">marked.<span class="title function_">setOptions</span>(&#123;</span><br><span class="line">    <span class="attr">highlight</span>: <span class="keyword">function</span>(<span class="params">code, lang</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lang &amp;&amp; hljs) &#123;</span><br><span class="line">            <span class="keyword">return</span> hljs.<span class="title function_">highlight</span>(lang, code).<span class="property">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">breaks</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">gfm</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="keyword">const</span> markdownInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;markdown-input&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> markdownPreview = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;markdown-preview&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> filenameInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;filename&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> folderInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;folder&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> messageInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;message&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fileListContainer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file-list-container&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> statusMessage = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;status-message&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例内容</span></span><br><span class="line"><span class="keyword">const</span> defaultContent = <span class="string">`# 欢迎使用 Markdown 编辑器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这是一个在线 Markdown 编辑器，可以将内容保存到 GitHub 仓库。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 功能特点</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 📝 实时预览</span></span><br><span class="line"><span class="string">- 💾 保存到 GitHub</span></span><br><span class="line"><span class="string">- 📁 文件管理</span></span><br><span class="line"><span class="string">- 🎨 语法高亮</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 代码示例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">\`\`\`javascript</span></span><br><span class="line"><span class="string">function helloWorld() &#123;</span></span><br><span class="line"><span class="string">    console.log(&#x27;Hello, World!&#x27;);</span></span><br><span class="line"><span class="string">    return &#x27;This is Markdown!&#x27;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">\`\`\`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 项目 1</span></span><br><span class="line"><span class="string">- 项目 2</span></span><br><span class="line"><span class="string">- 项目 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 链接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[GitHub](https://github.com) | [Markdown 指南](https://www.markdownguide.org/)</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置默认内容</span></span><br><span class="line">markdownInput.<span class="property">value</span> = defaultContent;</span><br><span class="line"><span class="title function_">updatePreview</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实时预览</span></span><br><span class="line">markdownInput.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, updatePreview);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updatePreview</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> content = markdownInput.<span class="property">value</span>;</span><br><span class="line">    markdownPreview.<span class="property">innerHTML</span> = marked.<span class="title function_">parse</span>(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入文本工具函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertText</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> start = markdownInput.<span class="property">selectionStart</span>;</span><br><span class="line">    <span class="keyword">const</span> end = markdownInput.<span class="property">selectionEnd</span>;</span><br><span class="line">    <span class="keyword">const</span> selectedText = markdownInput.<span class="property">value</span>.<span class="title function_">substring</span>(start, end);</span><br><span class="line">    </span><br><span class="line">    markdownInput.<span class="property">value</span> = markdownInput.<span class="property">value</span>.<span class="title function_">substring</span>(<span class="number">0</span>, start) + </span><br><span class="line">                         text + </span><br><span class="line">                         markdownInput.<span class="property">value</span>.<span class="title function_">substring</span>(end);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重新聚焦并设置光标位置</span></span><br><span class="line">    markdownInput.<span class="title function_">focus</span>();</span><br><span class="line">    markdownInput.<span class="property">selectionStart</span> = start + text.<span class="property">length</span>;</span><br><span class="line">    markdownInput.<span class="property">selectionEnd</span> = start + text.<span class="property">length</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">updatePreview</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示状态消息</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showStatus</span>(<span class="params">message, isSuccess = <span class="literal">true</span></span>) &#123;</span><br><span class="line">    statusMessage.<span class="property">textContent</span> = message;</span><br><span class="line">    statusMessage.<span class="property">className</span> = isSuccess ? <span class="string">&#x27;status-show status-success&#x27;</span> : <span class="string">&#x27;status-show status-error&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        statusMessage.<span class="property">className</span> = <span class="string">&#x27;status-hidden&#x27;</span>;</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存到 GitHub</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">saveToGitHub</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> content = markdownInput.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">const</span> filename = filenameInput.<span class="property">value</span> || <span class="string">&#x27;untitled.md&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> folder = folderInput.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">const</span> message = messageInput.<span class="property">value</span> || <span class="string">`Update <span class="subst">$&#123;filename&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!content.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">        <span class="title function_">showStatus</span>(<span class="string">&#x27;错误：内容不能为空&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!filename.<span class="title function_">endsWith</span>(<span class="string">&#x27;.md&#x27;</span>)) &#123;</span><br><span class="line">        <span class="title function_">showStatus</span>(<span class="string">&#x27;错误：文件名必须以 .md 结尾&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">showStatus</span>(<span class="string">&#x27;正在保存...&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/save-markdown&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">                content,</span><br><span class="line">                filename,</span><br><span class="line">                message,</span><br><span class="line">                folder</span><br><span class="line">            &#125;),</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">            <span class="title function_">showStatus</span>(<span class="string">&#x27;✅ 文件保存成功！&#x27;</span>);</span><br><span class="line">            <span class="title function_">loadFileList</span>(); <span class="comment">// 刷新文件列表</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">showStatus</span>(<span class="string">&#x27;❌ 保存失败: &#x27;</span> + result.<span class="property">error</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">        <span class="title function_">showStatus</span>(<span class="string">&#x27;❌ 网络错误，请检查后端服务&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载文件列表</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadFileList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> folder = folderInput.<span class="property">value</span>;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/files?folder=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(folder)&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">success</span>) &#123;</span><br><span class="line">            <span class="title function_">displayFiles</span>(result.<span class="property">files</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error loading files:&#x27;</span>, result.<span class="property">error</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error loading files:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示文件列表</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">displayFiles</span>(<span class="params">files</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (files.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        fileListContainer.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;p&gt;暂无文件&lt;/p&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fileListContainer.<span class="property">innerHTML</span> = files.<span class="title function_">map</span>(<span class="function"><span class="params">file</span> =&gt;</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;file-item&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h4&gt;<span class="subst">$&#123;file.name&#125;</span>&lt;/h4&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;路径: <span class="subst">$&#123;file.path&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;file-actions&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;button onclick=&quot;window.open(&#x27;<span class="subst">$&#123;file.url&#125;</span>&#x27;, &#x27;_blank&#x27;)&quot;&gt;查看&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;button onclick=&quot;window.open(&#x27;<span class="subst">$&#123;file.download_url&#125;</span>&#x27;, &#x27;_blank&#x27;)&quot;&gt;下载&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面加载时获取文件列表</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">loadFileList</span>();</span><br><span class="line">    <span class="comment">// 设置定时刷新文件列表</span></span><br><span class="line">    <span class="built_in">setInterval</span>(loadFileList, <span class="number">30000</span>); <span class="comment">// 每30秒刷新一次</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="第五步：运行项目">第五步：运行项目</h2>
<h3 id="启动后端服务">启动后端服务</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> backend</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<h3 id="访问前端页面">访问前端页面</h3>
<p>打开浏览器访问：<code>http://localhost:3001</code></p>
<h2 id="第六步：环境变量配置">第六步：环境变量配置</h2>
<ol>
<li>在 <code>backend/.env</code> 文件中填写你的配置：
<ul>
<li><code>GITHUB_TOKEN</code>: 你的 GitHub Personal Access Token</li>
<li><code>GITHUB_OWNER</code>: 你的 GitHub 用户名</li>
<li><code>GITHUB_REPO</code>: 你的仓库名称</li>
<li><code>GITHUB_BRANCH</code>: 目标分支名称（默认为 main）</li>
</ul>
</li>
</ol>
<h2 id="安全注意事项">安全注意事项</h2>
<ol>
<li><strong>不要将 .env 文件提交到版本控制</strong></li>
<li><strong>使用 .gitignore 忽略敏感文件</strong></li>
<li><strong>在生产环境中使用环境变量而不是文件</strong></li>
<li><strong>限制 GitHub Token 的权限范围</strong></li>
</ol>
<h2 id="故障排除">故障排除</h2>
<ol>
<li><strong>CORS 错误</strong>: 确保后端服务正在运行</li>
<li><strong>401 错误</strong>: 检查 GitHub Token 是否正确</li>
<li><strong>404 错误</strong>: 确认仓库、分支和路径存在</li>
</ol>
<p>这个方案提供了一个完整的、可扩展的 Markdown 编辑器，可以直接将内容保存到你的 GitHub 仓库。</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo博客备份</title>
    <url>/2023/10/13/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<h2 id="准备">准备</h2>
<div class="note danger no-icon modern"><p>先备份！！！</p>
</div>
<p>将 github 发布 pages 的页面主分支改名为 Hexo，再创建一个分支 main。</p>
<p>然后在将 Hexo 博客发布在 main 分支下，改_config.yml 下的配置，然后将发布 pages 的分支改为 main。</p>
<p><img src="http://oss.zorange.online/blog/image-20231013093125128.png" alt=""></p>
<h2 id="开始">开始</h2>
<ol>
<li>使用 vscode 将 <a href="http://youname.github.io">youname.github.io</a> 克隆下来,然后将里面的文件全删除，提交。</li>
<li>将先备份的 hexo 文件夹中的<code>_config.yml</code>、<code>themes/</code>、<code>source</code>、<code>scaffolds</code>、<code>package.json</code>、<code>.gitignore</code>复制进去。</li>
<li>将 theme 中你的主题的.git/删除,不然不能上传。</li>
<li>执行：<code>npm install</code>和<code>npm install hexo-deployer-git</code></li>
<li>提交。</li>
</ol>
<h2 id="最后">最后</h2>
<p>每次改变 hexo 源文件的时候，就可以上传到 hexo 分支下。生成的静态文件不会。gitignoer 里面写了。</p>
<p>部署的静态文件就会在 main 分支下。</p>
]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBCUtil</title>
    <url>/2025/09/15/JDBCUtil/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zorange.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入Druid数据源工厂类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类，用于简化数据库连接和关闭资源的操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 静态数据源成员变量，用于整个应用共享一个数据源实例</span></span><br><span class="line">    <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态初始化块，用于在类加载时初始化数据源</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 通过当前类的类加载器获取jdbc.properties资源配置文件的输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> JDBCUtil.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建Properties对象，用于装载配置文件中的键值对</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载输入流中的配置信息到Properties对象中</span></span><br><span class="line">            properties.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 如果加载配置文件失败，抛出运行时异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用DruidDataSourceFactory创建数据源实例</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 如果创建数据源失败，抛出运行时异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接的方法。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException 如果获取连接失败，则抛出SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 从数据源中获取数据库连接</span></span><br><span class="line">        <span class="keyword">return</span>  dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库连接、Statement和ResultSet的方法，确保资源被正确释放。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn 数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sta Statement对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res ResultSet对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException 如果关闭资源时发生错误，则抛出SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Connection conn, Statement sta, ResultSet res)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 按照先创建的后关闭的顺序关闭资源</span></span><br><span class="line">        <span class="keyword">if</span>(res != <span class="literal">null</span>)&#123; <span class="comment">// 关闭ResultSet</span></span><br><span class="line">            res.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sta != <span class="literal">null</span>)&#123; <span class="comment">// 关闭Statement</span></span><br><span class="line">            sta.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="literal">null</span>)&#123; <span class="comment">// 关闭Connection</span></span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>JSONUtil</title>
    <url>/2025/09/15/JSONUtil/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">package</span> com.atguigu.jxc.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/11/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JSONUtil</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">StringToObject</span><span class="params">(String str, Class&lt;T&gt; objectClass)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objectMapper.readValue(str, objectClass);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">ObjectToString</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objectMapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">StrToArrayObject</span><span class="params">(String str, Class&lt;T&gt; arrayObjectClass)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用 TypeReference 来指定转换为 List 或数组的类型</span></span><br><span class="line">            <span class="keyword">return</span> objectMapper.readValue(str, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;T&gt;() &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>JUC</title>
    <url>/2025/09/15/JUC/</url>
    <content><![CDATA[<h1>JUC</h1>
<p>思维导图：<a href="https://server.blog.zorange.online/files/de1cdc38f6c34ecb8304253a283acaa3.png">https://server.blog.zorange.online/files/de1cdc38f6c34ecb8304253a283acaa3.png</a></p>
<h2 id="JUC是什么？">JUC是什么？</h2>
<p>在 Java 5.0 提供了 <code>java.util.concurrent</code>(简称JUC)包，在此包中增加了在并发编程中很常用的工具类。此包包括了几个小的、已标准化的可扩展框架，并提供一些功能实用的类，没有这些类，一些功能会很难实现或实现起来冗长乏味。</p>
<h2 id="进程和线程">进程和线程</h2>
<p>进程：进程是一个具有一定<strong>独立功能的程序</strong>关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</p>
<p>线程：通常在<strong>一个进程中可以包含若干个线程</strong>，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。</p>
<h2 id="并行和并发">并行和并发</h2>
<h2 id="wait和sleep的区别">wait和sleep的区别</h2>
<table>
<thead>
<tr>
<th>区别</th>
<th>wait</th>
<th>sleep</th>
</tr>
</thead>
<tbody>
<tr>
<td>类</td>
<td>Object</td>
<td>Thread</td>
</tr>
<tr>
<td>锁</td>
<td>释放锁</td>
<td>不释放锁</td>
</tr>
<tr>
<td>cpu资源</td>
<td>释放</td>
<td>释放</td>
</tr>
</tbody>
</table>
<h2 id="创建多线程的四种方法">创建多线程的四种方法</h2>
<ol>
<li>继承Thread类，实现run方法</li>
<li>实现Runable接口</li>
<li>实现Callable接口，借助FutrueTask实现一个带返回值的线程</li>
<li>线程池</li>
</ol>
<h2 id="Synchronized">Synchronized</h2>
<ol>
<li>普通方法：锁对象是当前对象</li>
<li>静态方法：锁对象是当前类的字节码对象</li>
<li>代码块：锁对象是自定义的</li>
</ol>
<blockquote>
<p>普通方法和静态方法的锁对象是不会互相竞争</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/9/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resource1</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             Thread.sleep(<span class="number">10</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(num&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;买票失败，没票了&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;买到了，&quot;</span>+<span class="string">&quot;还剩&quot;</span>+num--+<span class="string">&quot;张&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource1</span> <span class="variable">resource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resource1</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(resource1::get,i+<span class="string">&quot;&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多线程编程模板">多线程编程模板</h3>
<ol>
<li>创建资源类</li>
<li>资源类创建同步方法、同步代码块</li>
<li>多线程调用</li>
</ol>
<h2 id="Lock锁">Lock锁</h2>
<p>相比同步锁，JUC包中的Lock锁的功能更加强大，它提供了各种各样的锁（公平锁，非公平锁，共享锁，独占锁……），所以使用起来很灵活。</p>
<ul>
<li>是一个接口，主要有三个实现：ReentrantLock、ReentrantReadWriteLock.ReadLock、ReentrantReadWriteLock.WriteLock</li>
</ul>
<h3 id="ReentrantLock可重入锁">ReentrantLock可重入锁</h3>
<ul>
<li>
<p>可重入锁：</p>
<p>在一个线程调用了一个资源类的一个同步方法后，在这个方法里面又调用了这个资源类的另外一个同步方法，且两个方法的锁是同一个。</p>
<p>A—&gt;S1----&gt;S2</p>
<p>若这个锁不可重入，此时会发生死锁.可重入的话就不会死锁，这个锁任然可以正常获取</p>
</li>
<li>
<p>Synchronized也是可重入锁</p>
</li>
<li>
<p>可重入锁可以解决死锁问题</p>
</li>
</ul>
<h3 id="公平锁">公平锁</h3>
<ul>
<li>
<p>公平锁：在锁上等待的时间最长的线程将活得锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>); </span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="限时等待">限时等待</h3>
<p>通过我们的tryLock方法来实现，可以选择传入时间参数，表示等待指定的时间，无参则表示立即返回锁申请的结果：true表示获取锁成功，false表示获取锁失败。我们可以将这种方法用来解决死锁问题。</p>
<blockquote>
<p>响应中断</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lock.tryLock()</span><br><span class="line">lock.tryLock(Long timeout,Timeunit unit)   <span class="comment">//经过多次时间放弃</span></span><br></pre></td></tr></table></figure>
<h3 id="ReentrantLock和synchronized区别">ReentrantLock和synchronized区别</h3>
<table>
<thead>
<tr>
<th>区别</th>
<th>ReentrantLock</th>
<th>synchronized</th>
</tr>
</thead>
<tbody>
<tr>
<td>可重入</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>独占锁</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>隐式释放|显示</td>
<td>显示</td>
<td>隐式</td>
</tr>
<tr>
<td>响应中断</td>
<td>可以响应中断</td>
<td>不可以响应中断</td>
</tr>
</tbody>
</table>
<p>响应中断：拿不到锁就中断线程。</p>
<h3 id="ReentrantReadWriteLock读写锁">ReentrantReadWriteLock读写锁</h3>
<p>在并发场景中用于解决线程安全的问题，我们几乎会高频率的使用到独占式锁，通常使用java提供的关键字synchronized或者concurrents包中实现了Lock接口的ReentrantLock。它们都是独占式获取锁，也就是在同一时刻只有一个线程能够获取锁。而在一些业务场景中，大部分只是读数据，写数据很少，如果仅仅是读数据的话并不会影响数据正确性（出现脏读），而如果在这种业务场景下，依然使用独占锁的话，很显然这将是出现性能瓶颈的地方。针对这种读多写少的情况，java还提供了另外一个实现Lock接口的<strong>ReentrantReadWriteLock</strong>(读写锁)。<strong>读写锁允许同一时刻被多个读线程访问，但是在写线程访问时，所有的读线程和其他的写线程都会被阻塞</strong>。</p>
<p><strong>特点</strong>：</p>
<ul>
<li>写写不可并发</li>
<li>读写不可并发</li>
<li>读读可以并发</li>
</ul>
<p>读写锁：读写锁中的读锁和写锁实际是一把锁的两个不同角色。</p>
<p>读锁：读共享</p>
<p>写锁:  独占锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/9/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resource2</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    ReentrantReadWriteLock reentrantReadWriteLock= <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    ReentrantReadWriteLock.<span class="type">ReadLock</span> <span class="variable">readLock</span> <span class="operator">=</span> reentrantReadWriteLock.readLock();</span><br><span class="line">    ReentrantReadWriteLock.WriteLock writeLock=reentrantReadWriteLock.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key,String value)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        writeLock.lock();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;开始写入，key:&quot;</span>+key+<span class="string">&quot;,value:&quot;</span>+value);</span><br><span class="line">        map.put(key,value);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;写入成功,key:&quot;</span>+key+<span class="string">&quot;,value:&quot;</span>+value);</span><br><span class="line">        writeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;开始读取,key:&quot;</span>+key);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;读取成功，key:&quot;</span>+key+<span class="string">&quot;,value:&quot;</span>+value);</span><br><span class="line">        readLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource2</span> <span class="variable">resource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resource2</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            String a=i+<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                resource2.put(a,a);</span><br><span class="line">            &#125;,<span class="string">&quot;线程&quot;</span>+i).start();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                resource2.get(a);</span><br><span class="line">            &#125;,<span class="string">&quot;线程&quot;</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="锁降级">锁降级</h3>
<p>什么是锁降级，锁降级就是从写锁降级成为读锁。在当前线程拥有写锁的情况下，再次获取到读锁，随后释放写锁的过程就是锁降级。这里可以举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    rwlock.writeLock().lock();</span><br><span class="line">    System.out.println(<span class="string">&quot;获取到写锁。。。。&quot;</span>);</span><br><span class="line">    rwlock.readLock().lock();</span><br><span class="line">    System.out.println(<span class="string">&quot;获取到读锁----------&quot;</span>);</span><br><span class="line">    rwlock.writeLock().unlock();</span><br><span class="line">    System.out.println(<span class="string">&quot;释放写锁==============&quot;</span>);</span><br><span class="line">    rwlock.readLock().unlock();</span><br><span class="line">    System.out.println(<span class="string">&quot;释放读锁++++++++++++++++&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只能由写锁降级到读锁，不能由读锁升级到写锁</p>
<h3 id="读写锁总结">读写锁总结</h3>
<ol>
<li>
<p>支持公平/非公平策略</p>
</li>
<li>
<p>支持可重入</p>
<ul>
<li>同一读线程在获取了读锁后还可以获取读锁</li>
<li>同一写线程在获取了写锁之后既可以再次获取写锁又可以获取读锁</li>
</ul>
</li>
<li>
<p>支持锁降级，不支持锁升级</p>
</li>
<li>
<p>读写锁如果使用不当，很容易产生“写饥饿”问题：</p>
<p>在读线程非常多，写线程很少的情况下，很容易导致写线程“饥饿”，虽然使用“公平”策略可以一定程度上缓解这个问题，但是“公平”策略是以牺牲系统吞吐量为代价的。</p>
</li>
<li>
<p>Condition条件支持</p>
<p>写锁可以通过<code>newCondition()</code>方法获取Condition对象。但是读锁是没法获取Condition对象，读锁调用<code>newCondition() </code>方法会直接抛出<code>UnsupportedOperationException</code>。</p>
</li>
</ol>
<h2 id="线程通信">线程通信</h2>
<h3 id="线程通信模板">线程通信模板</h3>
<ol>
<li>定义资源类、方法</li>
<li>资源类方法：
<ul>
<li>判断（符合条件就运行，不符合就等待）</li>
<li>执行</li>
<li>唤醒</li>
</ul>
</li>
<li>通过多线程操作共享资源</li>
</ol>
<h3 id="synchronized和Lock锁的通信区别-（await、Condition）">synchronized和Lock锁的通信区别 （await、Condition）</h3>
<ul>
<li>synchronized     wait -----wait（time）-----notify-----notifyAll</li>
<li>lock        lock.newCondition.await------lock.condition.signal-----lock.condition.signalAll</li>
</ul>
<h3 id="线程通信涉及多个线程时">线程通信涉及多个线程时</h3>
<h4 id="虚假唤醒">虚假唤醒</h4>
<p><strong>问题</strong>：一个线程在判断之后wait，之后被唤醒时，会直接从wait唤醒，此时如果用的if，就不会再进行判断。就算不符合条件也会运行。</p>
<p><strong>解决</strong>：将if换为while</p>
<p><strong>原因</strong>：线程被唤醒时不是从头开始，而是从wait开始</p>
<h3 id="定制化线程间通信">定制化线程间通信</h3>
<blockquote>
<p>通过多钥匙实现<strong>指定线程</strong>唤醒</p>
</blockquote>
<p><strong>案例</strong>：多线程间有序运行</p>
<p>​			a打印10次，b再打印10次，c再打印10次</p>
<p><strong>原理</strong>：通过lock锁的多condition来实现指定唤醒线程，只有被同一个condition .await的才能被这个candition的signal唤醒。</p>
<p><strong>代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.thread.communication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/9/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resource</span>&#123;</span><br><span class="line">    <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">    Lock lock=<span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    Condition conditionA=lock.newCondition();</span><br><span class="line">    Condition conditionB=lock.newCondition();</span><br><span class="line">    Condition conditionC=lock.newCondition();</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">AA</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">while</span> (flag!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conditionA.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print(Thread.currentThread().getName()+<span class="string">&quot;AA &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        flag++;</span><br><span class="line">        conditionB.signal();</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">BB</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">while</span> (flag!=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conditionB.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print(Thread.currentThread().getName()+<span class="string">&quot;BB &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        flag++;</span><br><span class="line">        conditionC.signal();</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">CC</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">while</span> (flag!=<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conditionC.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print(Thread.currentThread().getName()+<span class="string">&quot;CC &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        conditionA.signal();</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AaBbCc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resource</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                resource.BB();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;2&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                resource.AA();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                resource.CC();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;3&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="并发容器类">并发容器类</h2>
<p>面试题：</p>
<p>​	请举例说明集合类是不安全的。</p>
<p>​                                   原因：                             解决方案</p>
<p>ArrayList:                  没有锁                            给代码块解锁、</p>
<p>​                                                                         vector、底层扩容基于数组、速度慢、稍微浪费内存、</p>
<p>​                                                                          Collections.synchronizedList(list);  有锁、底层扩容基于List、速度相较于   vector快一些、</p>
<p>​                                                                          CopyOnWriteArrayList: 适用于高并发读写操作，解决了读写冲突问题。</p>
<p>HashSet                    没有锁                            给代码块解锁：</p>
<p>​                                                                          Collections.synchronizedSet(set)</p>
<p>​                                                                         CopyOnWriteArraySet:  适用于高并发读写操作，解决了读写冲突问题。</p>
<p>HashMap:                 没有锁                           给代码块解锁：</p>
<p>​                                                                        Collections.synchronizedMap(map)</p>
<p>​                                                                        HashTable:在高并发场景下性能较差，因全表锁定导致大量锁竞争。</p>
<p>​                                                                       ConcurrentHashMap: 在高并发场景下性能优越，允许更高的并发访问,底层基于CAS乐观锁实现的。</p>
<p>​	<strong>CopyOnWrite容器</strong>（简称COW容器）即<strong>写时复制</strong>的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。这样做的好处是我们可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素。所以<strong>CopyOnWrite容器也是一种读写分离的思想，读和写不同的容器</strong>。</p>
<p><strong>CopyOnWrite并发容器用于读多写少的并发场景</strong>。比如：白名单，黑名单。假如我们有一个搜索网站，用户在这个网站的搜索框中，输入关键字搜索内容，但是某些关键字不允许被搜索。这些不能被搜索的关键字会被放在一个黑名单当中，黑名单一定周期才会更新一次。</p>
<p>缺点：</p>
<ol>
<li>**内存占用问题。**写的时候会创建新对象添加到新容器里，而旧容器的对象还在使用，所以有两份对象内存。通过压缩容器中的元素的方法来减少大对象的内存消耗，比如，如果元素全是10进制的数字，可以考虑把它压缩成36进制或64进制。或者不使用CopyOnWrite容器，而使用其他的并发容器，如ConcurrentHashMap。</li>
<li>**数据一致性问题。**CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。</li>
</ol>
<h2 id="JUC下的强大辅助工具类">JUC下的强大辅助工具类</h2>
<ol>
<li>CountDownLatch(倒计数器)</li>
<li>CycliBarrier(循环栅栏)</li>
<li>Samaphore（信号量）</li>
</ol>
<h3 id="CountDownLatch">CountDownLatch</h3>
<p><strong>使用</strong>：设置一个计数器。每当一个线程调用该计数器的countDown时，计数器减一</p>
<p>在主线程或另外一个线程中，使用计数器的await方法，进入阻塞状态，只有当计数器减为0之后，该线程才会继续运行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="type">int</span> count) <span class="comment">//实例化一个倒计数器，count指定初始计数</span></span><br><span class="line">countDown() <span class="comment">// 每调用一次，计数减一</span></span><br><span class="line">await() <span class="comment">//等待，当计数减到0时，阻塞线程（可以是一个，也可以是多个）并行执行</span></span><br></pre></td></tr></table></figure>
<p><strong>代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.thread.communication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/9/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> String[] country = &#123;<span class="string">&quot;俄罗斯&quot;</span>, <span class="string">&quot;美国&quot;</span>, <span class="string">&quot;德国&quot;</span>, <span class="string">&quot;意大利&quot;</span>, <span class="string">&quot;中国&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : country) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3000</span>));</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;同意!&quot;</span>);</span><br><span class="line">                    count.countDown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, s).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;核弹发射!!!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="CyclicBarrier">CyclicBarrier</h3>
<p><strong>介绍</strong>：在多线程场景下，若某些任务需要多个线程同时进行。且存在多个任务时，使用CyclicBarrier。</p>
<p>且在每完成一个任务时的最后一个完成线程可以添加额外功能。</p>
<p><strong>常用方法</strong>：</p>
<ol>
<li>CyclicBarrier(int parties, Runnable barrierAction) 创建一个CyclicBarrier实例，parties指定参与相互等待的线程数，<strong>barrierAction一个可选的Runnable命令，该命令只在每个屏障点运行一次，可以在执行后续业务之前共享状态。该操作由最后一个进入屏障点的线程执行。</strong></li>
<li>CyclicBarrier(int parties) 创建一个CyclicBarrier实例，parties指定参与相互等待的线程数。</li>
<li>await() 该方法被调用时表示当前线程已经到达屏障点，当前线程阻塞进入休眠状态，<strong>直到所有线程都到达屏障点</strong>，当前线程才会被唤醒。</li>
</ol>
<p><strong>相对于CountDown的区别</strong>：</p>
<p>CountDown只能存在一个主任务，而CyclicBarrier在完成一个任务之后，计数器可以重置。</p>
<p><strong>代码使用</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.thread.communication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/9/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resource2</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">4</span>,()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;最菜玩家出现了，他就是：&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在闯第&quot;</span>+j+<span class="string">&quot;关&quot;</span>);</span><br><span class="line">                        Thread.sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">3000</span>));</span><br><span class="line">                        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;闯过了&quot;</span>+j+<span class="string">&quot;关&quot;</span>);</span><br><span class="line">                        cyclicBarrier.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="string">&quot;玩家&quot;</span>+ i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Semaphore">Semaphore</h3>
<p>Semaphore翻译成字面意思为 信号量，Semaphore可以控制同时访问的线程个数。非常适合需求量大，而资源又很紧张的情况。比如给定一个资源数目有限的资源池，假设资源数目为N，每一个线程均可获取一个资源，但是当资源分配完毕时，后来线程需要阻塞等待，直到前面已持有资源的线程释放资源之后才能继续。</p>
<p><strong>介绍</strong>：主要用于限流，限制多少个线程同时运行某个任务。</p>
<p>信号量主要用于两个目的：</p>
<ol>
<li>多个共享资源的互斥使用。</li>
<li>用于并发线程数的控制。保护一个关键部分不要一次输入超过N个线程。</li>
</ol>
<p>sentinel限流</p>
<p><strong>代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.thread.communication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/9/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在pk...&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">4000</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;玩累了,退出了&quot;</span>);</span><br><span class="line">                semaphore.release();</span><br><span class="line">            &#125;,<span class="string">&quot;玩家&quot;</span>+i).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Callable">Callable</h2>
<h3 id="面试题：callable接口与runnable接口的区别？">面试题：callable接口与runnable接口的区别？</h3>
<p>相同点：都是接口，都可以编写多线程程序，都采用Thread.start()启动线程</p>
<p>不同点：</p>
<ol>
<li>具体方法不同：一个是run，一个是call</li>
<li>Runnable没有返回值；Callable可以返回执行结果，是个泛型</li>
<li>Callable接口的call()方法允许抛出异常；Runnable的run()方法异常只能在内部消化，不能往上继续抛</li>
<li>它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。</li>
</ol>
<h2 id="阻塞队列">阻塞队列</h2>
<p>介绍：在多线程领域：所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤起</p>
<p>BlockingQueue即阻塞队列，是java.util.concurrent下的一个接口，因此不难理解，BlockingQueue是为了解决多线程中数据高效安全传输而提出的。从阻塞这个词可以看出，在某些情况下对阻塞队列的访问可能会造成阻塞。被阻塞的情况主要有如下两种：</p>
<ol>
<li>当队列满了的时候进行入队列操作</li>
<li>当队列空了的时候进行出队列操作</li>
</ol>
<h3 id="BlockingQueue">BlockingQueue</h3>
<p>java.util.concurrent 包里的 BlockingQueue是一个接口，继承Queue接口，Queue接口继承 Collection。</p>
<p>BlockingQueue接口主要有以下7个实现类：</p>
<ol>
<li><strong>ArrayBlockingQueue</strong>：由数组结构组成的有界阻塞队列。</li>
<li><strong>LinkedBlockingQueue</strong>：由链表结构组成的有界（但大小默认值为integer.MAX_VALUE）阻塞队列。</li>
<li>PriorityBlockingQueue：支持优先级排序的无界阻塞队列。</li>
<li>DelayQueue：使用优先级队列实现的延迟无界阻塞队列。</li>
<li><strong>SynchronousQueue</strong>：不存储元素的阻塞队列，也即单个元素的队列。</li>
<li>LinkedTransferQueue：由链表组成的无界阻塞队列。</li>
<li>LinkedBlockingDeque：由链表组成的双向阻塞队列。</li>
</ol>
<p><strong>Blockingqueue的方法</strong>：</p>
<p>它的方法可以分成以下4类：</p>
<table>
<thead>
<tr>
<th></th>
<th>抛出异常</th>
<th>特殊值</th>
<th>阻塞</th>
<th>超时</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>插入</strong></td>
<td>add(e)</td>
<td>offer(e)</td>
<td>put(e)</td>
<td>offer(e, time, unit)</td>
</tr>
<tr>
<td><strong>移除</strong></td>
<td>remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(time, unit)</td>
</tr>
<tr>
<td><strong>检查</strong></td>
<td>element()</td>
<td>peek()</td>
<td>不可用</td>
<td>不可用</td>
</tr>
</tbody>
</table>
<p><strong>抛出异常</strong></p>
<p>add正常执行返回true，element（不删除）和remove返回阻塞队列中的第一个元素<br>
当阻塞队列满时，再往队列里add插入元素会抛IllegalStateException:Queue full<br>
当阻塞队列空时，再往队列里remove移除元素会抛NoSuchElementException<br>
当阻塞队列空时，再调用element检查元素会抛出NoSuchElementException</p>
<p><strong>特定值</strong><br>
插入方法，成功ture失败false<br>
移除方法，成功返回出队列的元素，队列里没有就返回null<br>
检查方法，成功返回队列中的元素，没有返回null</p>
<p><strong>一直阻塞</strong></p>
<p>如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。<br>
当阻塞队列满时，再往队列里put元素，队列会一直阻塞生产者线程直到put数据or响应中断退出<br>
当阻塞队列空时，再从队列里take元素，队列会一直阻塞消费者线程直到队列可用</p>
<p><strong>超时退出</strong></p>
<p>如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。<br>
返回一个特定值以告知该操作是否成功(典型的是 true / false)。</p>
<h2 id="线程池">线程池</h2>
<p><strong>优势</strong>：线程复用；控制最大并发数；管理线程。</p>
<ol>
<li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的销耗。​​</li>
<li>提高响应速度。当任务到达时，任务可以不需要等待线程创建就能立即执行。</li>
<li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会销耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>
</ol>
<h3 id="线程池使用的两种方式：">线程池使用的两种方式：</h3>
<p>1.使用现成的工具类得到线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> * Executors:</span><br><span class="line">*   <span class="number">1.</span>一池一线程： Executors.newSingleThreadExecutor()</span><br><span class="line"> *   <span class="number">2.</span>一池n线程：  Executors.newFixedThreadPool(<span class="number">5</span>):OOM异常</span><br><span class="line">*   <span class="number">3.</span>一池多线程:  Executors.newCachedThreadPool();OOM异常</span><br></pre></td></tr></table></figure>
<p>​    2.用户自定义线程池<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/4c1f58c69a3d2d9e55d09a18ce7a16a1.png" alt=""></p>
<p>线程池工具类的三个方法的本质都是ThreadPoolExecutor的实例化对象</p>
<h3 id="线程池的7个参数">线程池的7个参数</h3>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/03ee9499fb5f1b533fe6d193c1b406d6.png" alt=""></p>
<ol>
<li>corePoolSize：线程池中的常驻核心线程数</li>
<li>maximumPoolSize：线程池中能够容纳同时 执行的最大线程数，此值必须大于等于1</li>
<li>keepAliveTime：多余的空闲线程的存活时间 当前池中线程数量超过corePoolSize时，当空闲时间达到keepAliveTime时，多余线程会被销毁直到 只剩下corePoolSize个线程为止</li>
<li>Timeunit：keepAliveTime的单位</li>
<li>workQueue：任务队列，被提交但尚未被执行的任务</li>
<li>threadFactory：表示生成线程池中工作线程的线程工厂， 用于创建线程，一般默认的即可</li>
<li>handler：拒绝策略，表示当队列满了，并且工作线程大于 等于线程池的最大线程数（maximumPoolSize）时，如何来拒绝 请求执行的runnable的策略</li>
</ol>
<h3 id="线程池的工作原理">线程池的工作原理</h3>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/03614a601789d1577e3515876f24e080.png" alt=""></p>
<ol>
<li>在创建了线程池后，线程池中的线程数为零。</li>
<li>当调用execute()方法添加一个请求任务时，线程池会做出如下判断：
<ol>
<li>如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；</li>
<li>如果正在运行的线程数量大于或等于corePoolSize，那么将这个任务放入队列；</li>
<li>如果这个时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</li>
<li>如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略来执行。</li>
</ol>
</li>
<li>当一个线程完成任务时，它会从队列中取下一个任务来执行。</li>
<li>当一个线程无事可做超过一定的时间（keepAliveTime）时，线程会判断：<br>
如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。<br>
所以线程池的所有任务完成后，它最终会收缩到corePoolSize的大小。</li>
</ol>
<blockquote>
<p>线程池的最大负载：maximumpoolsize+blockingqueuesize</p>
</blockquote>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/0661de0e6e05f34962ba290b0253d90f.png" alt=""></p>
<h3 id="拒绝策略">拒绝策略</h3>
<p>一般我们创建线程池时，为防止资源被耗尽，任务队列都会选择创建有界任务队列，但种模式下如果出<strong>现任务队列已满且线程池创建的线程数达到你设置的最大线程数时</strong>，这时就需要你指定ThreadPoolExecutor的RejectedExecutionHandler参数即合理的拒绝策略，来处理线程池&quot;超载&quot;的情况。</p>
<p>ThreadPoolExecutor自带的拒绝策略如下：</p>
<ol>
<li>AbortPolicy(默认)：<strong>直接抛出RejectedExecutionException异常</strong>阻止系统正常运行</li>
<li>CallerRunsPolicy：“调用者运行”一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而是将<strong>某些任务回退到调用者</strong>，从而降低新任务的流量。</li>
<li>DiscardOldestPolicy：<strong>抛弃队列中等待最久的任务</strong>，然后把当前任务加人队列中 尝试再次提交当前任务。</li>
<li>DiscardPolicy：<strong>该策略默默地丢弃无法处理的任务</strong>，不予任何处理也不抛出异常。 如果允许任务丢失，这是最好的一种策略。</li>
</ol>
<p><strong>以上内置的策略均实现了RejectedExecutionHandler接口，也可以自己扩展RejectedExecutionHandler接口，定义自己的拒绝策略.</strong></p>
<h3 id="自定义线程池">自定义线程池</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建单一线程的连接池</span></span><br><span class="line">        <span class="comment">// ExecutorService threadPool = Executors.newSingleThreadExecutor();</span></span><br><span class="line">        <span class="comment">// 创建固定数线程的连接池</span></span><br><span class="line">        <span class="comment">// ExecutorService threadPool = Executors.newFixedThreadPool(3);</span></span><br><span class="line">        <span class="comment">// 可扩容连接池</span></span><br><span class="line">        <span class="comment">// ExecutorService threadPool = Executors.newCachedThreadPool();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义连接池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>, <span class="number">5</span>,</span><br><span class="line">                <span class="number">2</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="comment">//new ThreadPoolExecutor.AbortPolicy()</span></span><br><span class="line">                <span class="comment">//new ThreadPoolExecutor.CallerRunsPolicy()</span></span><br><span class="line">                <span class="comment">//new ThreadPoolExecutor.DiscardOldestPolicy()</span></span><br><span class="line">                <span class="comment">//new ThreadPoolExecutor.DiscardPolicy()</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">RejectedExecutionHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;自定义拒绝策略&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">                threadPool.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;执行了业务逻辑&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>优化</strong>：</p>
<ol>
<li>在实际开发中，将自定义线程池放入spring容器中，单例</li>
<li>实际生产环境下，核心线程数=最大线程数，防止程序运行期间，反复创建、销毁线程、造成资源消耗。一般把最大线程数和核心线程数设置为一样</li>
<li>线程数的设置
<ul>
<li>IO密集型【web应用】：cpu核数*2，程序中大量进行IO操作，对cpu要求并不高因此执行流个数没有太大要求</li>
<li>计算密集型：cpu核数+1: 像计算圆周率、对高清视频解码等全靠cpu计算。 +1是为了预防有个线程被阻塞，cpu可以调用其他线程</li>
</ul>
</li>
<li>动态获取cpu核心数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">coreSize</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>在创建线程池时，默认开启一个或全部核心线程</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">executorService.prestartCoreThread();<span class="comment">//开启一个核心线程</span></span><br><span class="line">executorService.prestartAllCoreThreads();<span class="comment">//开启所有的核心线程</span></span><br></pre></td></tr></table></figure>
<h2 id="多线程高并发底层原理">多线程高并发底层原理</h2>
<p>计算机运行架构图<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/185269c1ad455db1f0a69020f7244535.png" alt=""></p>
<h3 id="java内存模型">java内存模型</h3>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/a2efb89bb1ed915e25cbdc9b6926eaf6.png" alt=""></p>
<p>JMM规定了内存主要划分为<strong>主内存</strong>和<strong>工作内存</strong>两种。</p>
<blockquote>
<p><strong>主内存</strong>：保存了所有的变量。<br>
<strong>共享变量</strong>：如果一个变量被多个线程使用，那么这个变量会在每个线程的工作内存中保有一个副本，这种变量就是共享变量。<br>
<strong>工作内存</strong>：每个线程都有自己的工作内存，线程独享，保存了线程用到的变量副本（主内存共享变量的一份拷贝）。工作内存负责与线程交互，也负责与主内存交互。</p>
</blockquote>
<p>此处的主内存和工作内存跟JVM内存划分（堆、栈、方法区）是在不同的维度上进行的，如果非要对应起来，主内存对应的是Java堆中的对象实例部分，工作内存对应的是栈中的部分区域，从更底层的来说，<strong>主内存对应的是硬件的物理内存，工作内存对应的是寄存器和高速缓存</strong>。</p>
<p>JMM对共享内存的操作做出了如下两条规定：</p>
<blockquote>
<ul>
<li>线程对共享内存的所有操作都必须在自己的工作内存中进行，不能直接从主内存中读写；</li>
<li>不同线程无法直接访问其他线程工作内存中的变量，因此共享变量的值传递需要通过主内存完成。</li>
</ul>
</blockquote>
<h4 id="并发编程的三大特性：">并发编程的三大特性：</h4>
<ul>
<li>
<p><strong>原子性：<strong>即不可分割性。比如 a=0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作是原子操作。再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要</strong>使用同步技术（sychronized）或者锁（Lock）来让它变成一个原子操作</strong>。一个操作是原子操作，那么我们称它具有原子性。java的concurrent包下提供了一些原子类，我们可以通过阅读API来了解这些原子类的用法。比如：<strong>AtomicInteger、AtomicLong、AtomicReference</strong>等。</p>
</li>
<li>
<p>**可见性：**每个线程都有自己的工作内存，所以当某个线程修改完某个变量之后，在其他的线程中，未必能观察到该变量已经被修改。**在 Java 中 volatile、synchronized 和 final 实现可见性。**volatile只能让被他修饰内容具有可见性，但不能保证它具有原子性。</p>
</li>
<li>
<p>**有序性：**java的有序性跟线程相关。一个线程内部所有操作都是有序的，如果是多个线程所有操作都是无序的。因为JMM的工作内存和主内存之间存在延迟，而且java会对一些指令进行重新排序。volatile和synchronized可以保证程序的有序性，很多程序员只理解这两个关键字的执行互斥，而没有很好的理解到volatile和synchronized也能保证指令不进行重排序。</p>
</li>
</ul>
<h3 id="volatile关键字">volatile关键字</h3>
<blockquote>
<p>volatile可以解决可见性和有序性、不能解决原子性</p>
</blockquote>
<p>Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程(volatile修饰的变量从主内存获取)。</p>
<p>当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此<strong>不会将该变量上的操作与其他内存操作一起重排序</strong>。</p>
<p><strong>在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比sychronized关键字更轻量级的同步机制。</strong></p>
<p>当一个变量定义为 volatile 之后，将具备两种特性：</p>
<ul>
<li>
<p>保证此变量对所有的线程的可见性。</p>
</li>
<li>
<p>禁止指令重排序优化。有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个<strong>内存屏障</strong>（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障。</p>
</li>
<li>
<p>不保证变量的原子性</p>
</li>
</ul>
<p>volatile 性能：volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。</p>
<h2 id="CAS-campare-and-set-swap">CAS  (campare and set(swap))</h2>
<p>CAS：Compare and Swap。比较并交换的意思。CAS操作有3个基本参数：内存地址A，旧值B，新值C。它的作用是将指定内存地址A的内容与所给的旧值B相比，如果相等，则将其内容替换为指令中提供的新值C；如果不等，则更新失败。类似于修改登陆密码的过程。当用户输入的原密码和数据库中存储的原密码相同，才可以将原密码更新为新密码，否则就不能更新。</p>
<p>**CAS是解决多线程并发安全问题的一种乐观锁算法。**因为它在对共享变量更新之前，会先比较当前值是否与更新前的值一致，如果一致则更新，如果不一致则循环执行（称为自旋锁），直到当前值与更新前的值一致为止，才执行更新。</p>
<p>Unsafe类是CAS的核心类，提供<strong>硬件级别的原子操作</strong>（目前所有CPU基本都支持硬件级别的CAS操作）。</p>
<h3 id="缺点">缺点</h3>
<p><strong>开销大</strong>：在并发量比较高的情况下，如果反复尝试更新某个变量，却又一直更新不成功，会给CPU带来较大的压力</p>
<p><strong>ABA问题</strong>：当变量从A修改为B再修改回A时，变量值等于期望值A，但是无法判断是否修改，CAS操作在ABA修改后依然成功。版本号</p>
<p><strong>不能保证代码块的原子性</strong>：CAS机制所保证的只是一个变量的原子性操作，而不能保证整个代码块的原子性。</p>
<h2 id="AQS">AQS</h2>
<p>AbstractQueuedSynchronizer抽象队列同步器简称AQS，它是实现同步器的基础组件（框架），juc下面Lock（ReentrantLock、ReentrantReadWriteLock等）的实现以及一些并发工具类（Semaphore、CountDownLatch、CyclicBarrier等）就是通过AQS来实现的。具体用法是通过继承AQS实现其模板方法，然后将子类作为同步组件的内部类。But StampLock不是基于AQS实现的。</p>
<blockquote>
<p>JUC 工具类 框架底层加锁和解锁都是根据AQS实现的，是所有JUC包下工具类的解锁和解锁实现的基石，当然我们也可以基于AQS自定义一些加锁和解锁的工具类。</p>
</blockquote>
<h3 id="框架结构">框架结构</h3>
<p>AQS框架结构如下：</p>
<p>AQS内部维护着一个FIFO双向队列，该队列就是<code>CLH同步队列</code>。<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/6e0cb17740d4ca629866070f18b00666.png" alt=""></p>
<p>AQS维护了一个volatile语义(支持多线程下的可见性)的共享资源变量<strong>state</strong>和一个FIFO（first-in-first-out）<strong>线程等待队列</strong>(多线程竞争state资源被阻塞时，会进入此队列)。</p>
<p><code>state 属性表示资源的状态</code></p>
<p>例如：</p>
<ul>
<li>对于ReentrantLock来说，state=1，表示资源被占用；state=0，表示资源没有被占用。</li>
<li>对于CountDownLatch来说，state=0，表示计数器归零，所有线程都可以访问资源；status为N表示计数器未归零，所有线程都需要阻塞。</li>
</ul>
<h3 id="基于AQS实现锁的思路">基于AQS实现锁的思路</h3>
<p>AQS将大部分的同步逻辑均已经实现好，继承的自定义同步器只需要实现state的获取(acquire)和释放(release)的逻辑代码就可以，主要包括下面方法：</p>
<ul>
<li>acquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false。</li>
<li>release(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false。</li>
<li></li>
<li>acquireShared(int)：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</li>
<li>releaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。</li>
<li></li>
<li>isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。</li>
</ul>
<p>也就是说：</p>
<p>​		通过AQS可以实现独占锁（只有一个线程可以获取到锁，如：ReentrantLock），也可以实现共享锁（多个线程都可以获取到锁Semaphore/CountDownLatch等）</p>
<h3 id="ReentrantLock底层原理">ReentrantLock底层原理</h3>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/290dd92ba7e3e91ef40851699b9ffc6a.png" alt=""></p>
<p>在ReentrantLock类中包含了3个AQS的实现类：</p>
<ol>
<li>抽象类Sync</li>
<li>非公平锁实现类NonfaireSync</li>
<li>公平锁实现类FairSync</li>
</ol>
<h4 id="公平和非公平">公平和非公平</h4>
<p>公平锁指的是按照线程请求的顺序，来分配锁；而非公平锁指的是不完全按照请求的顺序，在一定情况下，可以允许插队。但需要注意这里的非公平并不是指完全的随机，不是说线程可以任意插队，而是仅仅“在合适的时机”插队。</p>
<p>那么什么时候是合适的时机呢？假设当前线程在请求获取锁的时候，恰巧前一个持有锁的线程释放了这把锁，那么当前申请锁的线程就可以不顾已经等待的线程而选择立刻插队。但是如果当前线程请求的时候，前一个线程并没有在那一时刻释放锁，那么当前线程还是一样会进入等待队列。</p>
<h3 id="面试题">面试题</h3>
<p>AQS的底层原理：AQS使用一个volatile成员变量state来表示锁是否已被持有，通过内置的FIFO队列存储被阻塞的线程。AQS使用CAS机制对state进行原子操作从而对state的值进行修改。如果state的值为0，表示锁未被持有，则将当前线程设置为工作线程（即获取到了锁），并将state的值设置为1，返回成功获取到锁。如果未能成功获取到锁，AQS先自旋获取锁，如果一直获取不到，则将当前获取不到锁的线程加入到FIFO队列中</p>
<h1>JUC 扩展</h1>
<h2 id="并发三大特性">并发三大特性</h2>
<p>原子性：锁(synchronized、Lock)</p>
<p>可见性：volatile</p>
<p>有序性：volatile</p>
<h2 id="有序性-指令重排">有序性&amp;指令重排</h2>
<p>有序性：它指的是程序执行的顺序按照代码的先后顺序执行。</p>
<p>正常情况下，这是没什么可说的，但是如果在Java中，并且是并发情况，就不得不说了。计算机在执行程序时，为了提高性能，编译器和处理器常常会对<strong>指令重排</strong>。处理器。在进行重排序时，必须要考虑指令之间的<strong>数据依赖性</strong>。</p>
<h2 id="Happen-Before">Happen-Before</h2>
<p>在常规的开发中，如果我们通过上述规则来分析一个并发程序是否安全，估计脑壳会很疼。因为更多时候，我们是分析一个并发程序是否安全，其实都依赖Happen-Before原则进行分析。Happen-Before被翻译成<strong>先行发生原则</strong>，意思就是<strong>当A操作先行发生于B操作，则在发生B操作的时候，操作A产生的影响能被B观察到</strong>，“影响”包括修改了内存中的共享变量的值、发送了消息、调用了方法等。</p>
<p>Happen-Before的规则有以下几条：</p>
<ol>
<li>程序次序规则（Program Order Rule）：在<strong>一个线程内</strong>一段代码的**执行结果是有序的。**就算还会指令重排，但是随便它怎么排，结果是按照我们代码的顺序生成的不会变！</li>
<li>管程锁定规则（Monitor Lock Rule）：就是无论是在单线程环境还是多线程环境，对于<strong>同一个锁</strong>来说，一个线程对这个锁解锁之后，另一个线程获取了这个锁都能看到前一个线程的操作结果！(管程是一种通用的同步原语，synchronized就是管程的实现）</li>
<li>volatile变量规则（volatile Variable Rule）：<strong>对同一个volatile的变量，先行发生的写操作，肯定早于后续发生的读操作</strong></li>
<li>线程启动规则（Thread Start Rule）：Thread对象的start()方法先行发生于此线程的每一个动作</li>
<li>线程终止规则（Thread Termination Rule）：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值等手段检测到线程已经终止执行。</li>
<li>线程中断规则（Thread Interruption Rule）：对线程的interruption()调用，先于被调用的线程检测中断事件(Thread.interrupted())的发生</li>
<li>对象终结规则（Finalizer Rule）：一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize()方法的开始。</li>
<li>传递性（Transitivity）：如果操作A先于操作B、操作B先于操作C,则操作A先于操作C</li>
</ol>
<p>以上这些规则保障了happen-before的顺序，如果不符合以上规则，那么在多线程环境下就不能<strong>保证执行顺序等同于代码顺序</strong>。通过这些条件的判定，仍然很难判断一个线程是否能安全执行，线程安全多数依赖于工具类的安全性来保证。想提高自己对线程是否安全的判断能力，必然需要理解所使用的框架或者工具的实现，并积累线程安全的经验。</p>
<h2 id="AQS的工作模式">AQS的工作模式</h2>
<h3 id="独占模式">独占模式</h3>
<p><strong>原理介绍</strong></p>
<p>工作流程：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/33b3dcce4ac90eae34c8d5796a76f443.png" alt=""></p>
<p>线程获取锁的流程：</p>
<p>1、线程A获取锁，将state的值由0设置为1</p>
<p>2、在A没有释放锁之前，线程B也来获取锁，线程B获取到state的值为1，表示锁被占用。线程B创建Node节点放入队尾，并且阻塞线程B</p>
<p>3、同理线程C获取到的state的值为1，表示锁被占用。线程C创建Node节点放入队尾，并且阻塞线程C</p>
<p>线程释放锁的流程：</p>
<p>1、线程A执行完毕以后，将state的值由1设置为0</p>
<p>2、唤醒下一个Node B节点，然后删除线程A节点</p>
<h3 id="共享模式">共享模式</h3>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/b196073b1a21955e132515acf42db2ae.png" alt=""></p>
<p>获取锁的流程：</p>
<p>1、线程A判断state的值是否大于0，如果否创建Node节点，将其加入到阻塞队列末尾。</p>
<p>2、如果大于0相当于获取到了锁，使用CAS算法对state进行-1</p>
<p>释放锁的流程</p>
<p>1、执行业务操作，业务操作完毕以后对state的值进行+1操作</p>
<p>2、唤醒下一个Node B节点，然后删除线程A节点</p>
<h2 id="synchronized原理">synchronized原理</h2>
<blockquote>
<p>Java对象结构</p>
</blockquote>
<p>Java中的对象是由三部分组成，分别是<strong>对象头、对象体和对齐填充</strong>；</p>
<p>1、对象体是存储一个对象属性值和父类的属性值的地方，并且jvm虚拟机中要求一个对象大小必须是8字节的整数倍，通过对齐填充达到这个要求；</p>
<p>2、对象头来描述一个Java对象是何种对象，且是属于那个类的对象</p>
<ul>
<li>对象头中的Klass Word存储的是Class对象的地址，表明该对象是属于那个类</li>
<li>标记字段Mark Word则存储了该对象运行时数据，如哈希码（hashcode)、GC分代年龄、<strong>锁状态标志和锁类型等信息</strong>。</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/e2e65a6045c9369633166c2cb8dd1573.png" alt=""></p>
<blockquote>
<p>synchronized上锁原理</p>
</blockquote>
<p><strong>synchronized同步代码块的情况</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;synchronized 代码块&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过javap查看字节码文件信息，如下所示：<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/4d5d7deb04055f4416ab1d852eeee939.png" alt=""></p>
<p>从上面我们可以看出：synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中monitorenter 指令指向同步代码块的开始位置，</p>
<p>monitorexit 指令则指明同步代码块的结束位置。当执行 monitorenter 指令时，线程试图获取锁也就是获取 monitor(monitor对象存在于每个Java对象的对象头中，synchronized 锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因) 的持有权。当计数器为0则可以成功获取，获取后将锁计数器设为1也</p>
<p>就是加1。相应的在执行monitorexit 指令后，将锁计数器设为0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。</p>
<p>Mark Word结构如下所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/6cf47960cc5c58c51f5ddd4b97f386de.png" alt=""></p>
<p>并发锁总共有4种状态：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态，每种状态在并发竞争情况下需要消耗的资源由低到高，性能由高到低。（锁信息占3位）在jdk1.6之前只有重量级锁，而JDK1.6之后对synchronized进行了优化，引入了偏向锁与轻量级锁，提高了性能降低了资源消耗。</p>
<p>锁状态确定：</p>
<p>1、无锁：是否偏向锁的字段值=0，锁标志位的值=01</p>
<p>2、偏向锁：是否偏向锁的字段值=1，锁标志位的值=01</p>
<p>3、轻量级锁：锁标志位的值=00</p>
<p>4、重量级锁：锁标志位的值=10</p>
<blockquote>
<p>锁升级</p>
</blockquote>
<p>所谓的上锁，就是把锁的信息记录在对象头中，默认是无锁的，当达到一定的条件时会进行锁升级，会按照下面的顺序依次升级。</p>
<p>1、无锁：没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p>
<p>2、偏向锁：研究发现大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了不让这个线程每次获得锁都需要CAS操作的性能消耗，就引入</p>
<p>了偏向锁【偏向锁会偏向于第一个获得它的线程】。当一个线程访问对象并获取锁时，会在对象头里存储锁偏向的这个线程的ID，以后该线程再访问该对象时只需判断对象头的Mark Word里是否有这个线程的ID，如果有就不需要进行CAS操作，这就是偏向锁。</p>
<p>3、轻量级锁：当线程竞争更激烈时，偏向锁就会升级为轻量级锁，轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式等待一会儿上一个线程就会释放锁。</p>
<p>4、重量级锁：但是当自旋超过了一定次数，或者一个线程持有锁，一个线程在自旋，又来了第三个线程访问时（反正就是竞争继续加大了），轻量级锁就会膨胀为重量级锁，重量级锁就是Synchronized,重量级锁会使除了此时拥有锁的线程以外的线程都阻塞。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/634979a855ebe5dabf3c714f4da9e31d.png" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2025/09/15/JVM/</url>
    <content><![CDATA[<h1>JVM</h1>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/93e6ed456e2dd92477e61ce35e6cefa7.png" alt=""></p>
<h2 id="面试">面试</h2>
<p>1.JVM是什么?JVM的内存	区域分为哪些?</p>
<p>2.什么是OOM ?什么是StackoverflowError?有哪些方法分析?</p>
<p>3.JVM 的常用参数调优你知道哪些?</p>
<p>4.GC是什么?为什么需要GC?</p>
<p>5.什么是类加载器?</p>
<h2 id="什么是JVM">什么是JVM</h2>
<p><strong>是一种规范：规定了字节码文件的格式</strong></p>
<blockquote>
<p>JDK=JRE+工具集（java.exe,javac.exe)</p>
<p>JRE=JVM+系统类库</p>
</blockquote>
<p>==屏蔽了平台和语言相关性==</p>
<p>JVM：<strong>J</strong>ava <strong>V</strong>irtual <strong>M</strong>achine，Java虚拟机</p>
<p>**位置：**JVM是运行在操作 系统之上的，它与硬件没有直接的交互。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/97126ec49a5f09c3cb50853909c5877d.png" alt=""></p>
<h2 id="主流虚拟机">主流虚拟机</h2>
<ul>
<li>JCP组织（Java Community Process 开放的国际组织 ）：<strong>Hotspot虚拟机</strong>（Open JDK版），sun2006年开源</li>
<li>Oracle：Hotspot虚拟机（Oracle JDK版），闭源，允许个人使用，商用收费</li>
<li>BEA：JRockit虚拟机</li>
<li>IBM：J9虚拟机</li>
<li>阿里巴巴：Dragonwell JDK（龙井虚拟机），电商物流金融等领域，高性能要求。</li>
</ul>
<h2 id="JVM结构图">JVM结构图</h2>
<p>**JVM的作用：**加载并执行Java字节码文件(.class) - 加载字节码文件、分配内存（运行时数据区）、运行程序</p>
<p>**JVM的特点：**一次编译到处运行、自动内存管理、自动垃圾回收</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/33b3904478561b47dee88f082a7df66d.png" alt=""></p>
<ul>
<li>
<p>类加载器子系统：将字节码文件（.class）加载到内存中的方法区</p>
</li>
<li>
<p><strong>运行时数据区</strong>：（Runtime Data Area)</p>
<ul>
<li>方法区：存储已被虚拟机加载的类的<strong>元数据信息(元空间)</strong>。也就是存储字节码信息。</li>
<li>堆：<strong>存放对象实例</strong>，几乎所有的对象实例都在这里分配内存。</li>
<li>虚拟机栈(java栈)：虚拟机栈描述的是<strong>Java方法执行的内存模型</strong>。每个方法被执行的时候都会创建一个<strong>栈帧</strong>（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息</li>
<li>本地方法栈：本地方法栈则是<strong>记录</strong>虚拟机当前使用到的<strong>native方法</strong>。</li>
<li>程序计数器：当前线程所执行的字节码的<strong>行号指示器</strong>。</li>
</ul>
</li>
<li>
<p>本地方法接口：虚拟机使用到的native类型的方法，负责调用操作系统类库。（例如Thread类中有很多Native方法的调用）</p>
</li>
<li>
<p>执行引擎：包含解释器、即时编译器和垃圾收集器 ，负责执行加载到JVM中的字节码指令。</p>
<ol>
<li>功能区： 类加载器子系统、垃圾回收器、字节码执行引擎</li>
<li>线程共享区：堆、方法区、直接内存、运行时常量池</li>
<li>线程私有区：栈、本地方法栈、程序计数器</li>
</ol>
</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/0f9c6206734143c8458c4b9a898d7fcb.png" alt=""></p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/28aef0cd227d38dc63c33e178e36ac82.png" alt=""></p>
<p><strong>注意：</strong></p>
<ul>
<li>多线程共享方法区和堆；</li>
<li>Java栈、本地方法栈、程序计数器是每个线程私有的。</li>
</ul>
<h2 id="执行引擎Execution-Engine">执行引擎Execution Engine</h2>
<p><strong>Execution Engine</strong>执行引擎负责解释命令(将字节码指令解释编译为机器码指令)，提交操作系统执行。</p>
<p>JVM执行引擎通常由两个主要组成部分构成：解释器和即时编译器（Just-In-Time Compiler，JIT Compiler）。</p>
<ol>
<li>解释器：当Java字节码被加载到内存中时，解释器逐条解析和执行字节码指令。解释器逐条执行字节码，将每条指令转换为对应平台上的本地机器指令。由于解释器逐条解析执行，因此执行速度相对较慢。但解释器具有优点，即可立即执行字节码，无需等待编译过程。</li>
<li>即时编译器（JIT Compiler）：为了提高执行速度，JVM还使用即时编译器。即时编译器将字节码动态地编译为本地机器码，以便直接在底层硬件上执行。即时编译器根据运行时的性能数据和优化技术，对经常执行的热点代码进行优化，从而提高程序的性能。即时编译器可以将经过优化的代码缓存起来，以便下次再次执行时直接使用。</li>
</ol>
<p>JVM执行引擎还包括其他一些重要的组件，如即时编译器后端、垃圾回收器、线程管理器等。这些组件共同协作，使得Java程序能够在不同的操作系统和硬件平台上运行，并且具备良好的性能。</p>
<h2 id="本地方法接口">本地方法接口</h2>
<p>本地接口的作用是融合不同的编程语言为 Java 所用，于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是 Native Method Stack中登记 native方法，在Execution Engine 执行时加载native libraies。</p>
<h2 id="本地方法栈Native-Method-Stack">本地方法栈Native Method Stack</h2>
<p>本地方法栈存储了从Java代码中调用本地方法时所需的信息。是<strong>线程私有</strong>的。</p>
<h2 id="PC寄存器-程序计数器">PC寄存器(程序计数器)</h2>
<p>每个线程都有一个程序计数器，是<strong>线程私有</strong>的，就是一个指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址，即 将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不记。</p>
<h2 id="类加载器">类加载器</h2>
<ul>
<li>负责加载class文件，class文件在文件开头有特定的文件标识(cafe babe)。</li>
<li>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</li>
<li>加载的类信息存放到方法区的内存空间。</li>
</ul>
<h3 id="类加载的过程">类加载的过程</h3>
<p><strong>类加载过程</strong>主要分为三个步骤：<strong>加载</strong>、<strong>链接</strong>、<strong>初始化</strong>，而其中链接过程又分为三个步骤：<strong>验证</strong>、<strong>准备</strong>、<strong>解析</strong>，加上<strong>卸载</strong>、<strong>使用</strong>两个步骤统称为为<strong>类的生命周期</strong>。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/9dcf02e8fa38ba6c1c0a3ddd56d9c820.png" alt=""></p>
<p><strong>阶段一：加载</strong></p>
<p>通过<strong>双亲委派模型</strong>加载类的字节码文件</p>
<ul>
<li>通过一个类的全限定名获取定义此类的二进制字节流</li>
<li>将这个字节流代表的静态存储结构转为方法区运行时数据结构</li>
<li><strong>在内存中生成一个代码这个类的java.lang.Class对象</strong>，作为方法区这个类的各种数据的访问入口</li>
</ul>
<p>结论：类加载为懒加载</p>
<p><strong>阶段二：链接</strong></p>
<ul>
<li>验证：验证阶段主要是为了为了确保Class文件的字节流中包含的信息符合虚拟机要求，并且不会危害虚拟机</li>
<li>准备：
<ul>
<li>为类的<strong>静态变量</strong>分配内存并 且设置该类变量的默认初始值，即<strong>赋初值</strong></li>
<li><strong>实例变量</strong>是在创建对象的时候完成赋值，且实例变量随着对象一起分配到Java堆中</li>
<li><strong>final修饰的常量</strong>在编译的时候会分配，准备阶段直接完成赋值，即没有赋初值这一步。被所有线程所有对象共享</li>
</ul>
</li>
<li>解析：将<strong>符号引用</strong>替换为<strong>直接引用</strong>
<ul>
<li>符号引用：以一组<strong>符号来描述</strong>所引用的目标，符号可以是任何形式的<strong>字面量</strong>，只要使用时能无歧义地定位到目标即可</li>
<li>直接引用：可以<strong>直接</strong>指向目标的指针，而直接引用必须引用的目标已经<strong>在内存中存在</strong></li>
</ul>
</li>
</ul>
<p><strong>阶段三：初始化</strong></p>
<p>​	初始化阶段是执行类构造器 <clinit>的过程。这一步主要的目的是：根据程序员程序编码制定的主观计划去初始化类变量和其他资源。</p>
<p><code>执行类构造器&lt;cinit&gt;()方法,给类静态变量赋值(比如:int i=5)，并执行静态代码块,如果一个类中没有静态代码块，也没有静态变量的赋值操作，那编译器可以不为这个类生成&lt;init&gt;()方法</code></p>
<h3 id="类加载器的作用">类加载器的作用</h3>
<p>负责加载class文件，class文件在文件开头有的文件标识**（CA FE BA BE）**，并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p>
<h3 id="类加载器的分类">类加载器的分类</h3>
<p>分为四种，前三种为虚拟机自带的加载器。</p>
<ul>
<li>启动类加载器（BootstrapClassLoader）：由C++实现。</li>
<li>扩展类加载器（ExtClassLoader/PlatformClassLoader）：由Java实现，派生自ClassLoader类。</li>
<li>应用程序类加载器（AppClassLoader）：也叫系统类加载器。由Java实现，派生自ClassLoader类。</li>
<li>自定义加载器 ：程序员可以定制类的加载方式，派生自ClassLoader类。</li>
</ul>
<p><strong>Java 9之前的ClassLoader</strong></p>
<ul>
<li>Bootstrap ClassLoader加载$JAVA_HOME中jre/lib/rt.jar，加载JDK中的核心类库</li>
<li>ExtClassLoader加载相对次要、但又通用的类，主要包括$JAVA_HOME中jre/lib/*.jar或-Djava.ext.dirs指定目录下的jar包</li>
<li>AppClassLoader加载-cp指定的类，加载用户类路径中指定的jar包及目录中class</li>
</ul>
<p><strong>Java 9及之后的ClassLoader</strong></p>
<ul>
<li>
<p>Bootstrap ClassLoader，使用了模块化设计，加载lib/modules启动时的基础模块类，java.base、java.management、java.xml</p>
</li>
<li>
<p>ExtClassLoader更名为PlatformClassLoader，使用了模块化设计，加载lib/modules中平台相关模块，如java.scripting、java.compiler。</p>
<blockquote>
<p><strong>平台类加载器</strong>加载的类示例：</p>
<ul>
<li><code>java.util.logging.Logger</code></li>
<li><code>javax.xml.parsers.DocumentBuilderFactory</code></li>
<li><code>javax.sql.DataSource</code></li>
</ul>
</blockquote>
</li>
<li>
<p>AppClassLoader加载-cp，-mp指定的类，加载用户类路径中指定的jar包及目录中class</p>
</li>
</ul>
<h2 id="双亲委派模型">双亲委派模型</h2>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/6366cd80ac2f7c90e911466098ca63d9.png" alt=""></p>
<p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，<strong>而是把请求委托给父加载器去完成，依次向上</strong>：</p>
<ul>
<li>1、当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器PlatformClassLoader去完成。</li>
<li>2、当PlatformClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器BootStrapClassLoader去完成。</li>
<li>3、如果BootStrapClassLoader加载失败，会用PlatformClassLoader来尝试加载；</li>
<li>4、若PlatformClassLoader也加载失败，则会使用AppClassLoader来加载</li>
<li>5、如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException</li>
</ul>
<p>其实这就是所谓的<strong>双亲委派模型</strong>。简单来说：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把**请求委托给父加载器去完成</p>
<p><strong>目的：</strong></p>
<p>一，性能，避免重复加载；</p>
<p>二，安全性，避免核心类被修改。</p>
<h2 id="方法区Method-Area">方法区Method Area</h2>
<h3 id="存储">存储</h3>
<p>它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等：</p>
<h3 id="方法区演进">方法区演进</h3>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/1c8f67cb1d67aa523b2495f39dd51610.png" alt=""></p>
<p><strong>方法区(永久代（JDK7及以前）、元空间（JDK8以后）)</strong></p>
<ul>
<li><strong>方法区</strong>是 JVM 规范中定义的一块内存区域，用来存储类元数据、方法字节码、即时编译器需要的信息等</li>
<li><strong>永久代</strong>是 Hotspot 虚拟机对 JVM 规范的实现（1.8 之前）</li>
<li><strong>元空间</strong>是 Hotspot 虚拟机对 JVM 规范的另一种实现（1.8 以后），使用本地内存作为这些信息的存储空间</li>
</ul>
<p>-XXMateSpaceSize</p>
<p>-XXMAxMateSpaceSize</p>
<p>元空间溢出OOM，(OutOfMenmoryError)</p>
<h2 id="虚拟机栈">虚拟机栈</h2>
<ul>
<li>栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，每个线程都有自己的栈，它的生命周期是跟随线程的生命周期，线程结束栈内存也就释放，<strong>是线程私有的</strong>。</li>
<li>线程上正在执行的每个方法都各自对应一个<strong>栈帧（Stack Frame）</strong>。</li>
</ul>
<h3 id="栈存储什么">栈存储什么?</h3>
<ol>
<li>局部变量表</li>
<li>操作数栈</li>
<li>动态链接</li>
<li>方法出口</li>
</ol>
<h4 id="局部变量表（Local-Variables）">局部变量表（Local Variables）</h4>
<p>也叫本地变量表。</p>
<p>**作用：**存储方法参数和方法体内的局部变量：8种基本类型变量、对象引用（reference）。</p>
<h4 id="操作数栈（Operand-Stack）">操作数栈（Operand Stack）</h4>
<p>**作用：**也是一个栈，在方法执行过程中根据字节码指令记录当前操作的数据，将它们入栈或出栈。用于保存计算过程的中间结果，同时作为计算过程中变量的临时存储空间。供cpu使用</p>
<h4 id="动态链接（Dynamic-Linking）">动态链接（Dynamic Linking）</h4>
<p>**作用：**可以知道当前帧执行的是哪个方法。**指向运行时常量池中方法的符号引用。**程序真正执行时，类加载到内存中后，符号引用会换成直接引用。</p>
<p>将符号引用指向元空间的地址</p>
<h4 id="方法返回地址（Return-Address）">方法返回地址（Return Address）</h4>
<p>**作用：**可以知道调用完当前方法后，上一层方法接着做什么，<strong>即“return”到什么位置去</strong>。存储当前方法调用完毕</p>
<h4 id="栈溢出">栈溢出</h4>
<p><strong>常见问题栈溢出</strong>：Exception in thread “main” java.lang.StackOverflowError通常出现在递归调用时。</p>
<p>问题辨析：</p>
<ul>
<li>
<p>垃圾回收是否涉及栈内存？</p>
<p>不涉及，因为栈内存在方法调用结束后都会自动弹出栈。</p>
</li>
<li>
<p>方法内的局部变量是线程安全的吗？</p>
<p>当方法内局部变量没有逃离方法的作用范围时线程安全，<strong>因为一个线程对应一个栈，每调用一个方法就会新产生一个栈桢，都是线程私有的局部变量</strong>，当变量是static时则不安全，因为是线程共享的。</p>
</li>
</ul>
<h4 id="设置栈的大小">设置栈的大小</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-Xss1m  </span><br><span class="line">-Xss1024k</span><br><span class="line">-Xss1048576</span><br><span class="line">完整的写法是： -XX:ThreadStackSize=1m  </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Xss1m YourClassName</span><br></pre></td></tr></table></figure>
<h2 id="堆heap">堆heap</h2>
<h3 id="堆、栈、方法区的关系">堆、栈、方法区的关系</h3>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/310a562ff5e34e99c47ae040b14251ef.png" alt=""></p>
<p>HotSpot是使用指针的方式来访问对象：</p>
<ul>
<li>
<p>Java堆中会存放指向类元数据的地址</p>
</li>
<li>
<p>Java栈中的reference存储的是指向堆中的对象的地址</p>
</li>
</ul>
<h3 id="分带空间">分带空间</h3>
<h4 id="堆空间划分">堆空间划分</h4>
<p>堆内存<strong>逻辑</strong>上分为三部分：</p>
<ul>
<li>Young Generation Space  				新生代/年轻代                    Young/New</li>
<li>Tenured generation space  	       养老代/老年代                   Old/Tenured</li>
<li>Permanent Space/Meta Space     永久代/元空间                    Permanent/Meta</li>
</ul>
<p>新生代又划分为：</p>
<ul>
<li>
<p>新生代又分为两部分： 伊甸园区（Eden space）和幸存者区（Survivor pace） 。</p>
</li>
<li>
<p>幸存者区有两个： 0区（Survivor 0 space）和1区（Survivor 1 space）。</p>
</li>
</ul>
<h4 id="JDK1-7及之前的堆空间">JDK1.7及之前的堆空间</h4>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/1ebb50a0bfd024d4827bb42a30e22927.png" alt=""></p>
<h4 id="JDK1-8及之后的堆空间">JDK1.8及之后的堆空间</h4>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/03952a19733057b71b7658e069bb9721.png" alt=""></p>
<p>**注意：**方法区（具体的实现是永久代和元空间）逻辑上是堆空间的一部分，但是虚拟机的实现中将方法区和堆分开了，如下图：</p>
<p>堆空间分为：年轻代、老年代</p>
<p>年轻代：伊甸园区+survivor区</p>
<p>​				suvivor区：s0（from）+s1（to）</p>
<p>​				空的为to区，两个suvivor区是为了解决内存碎片</p>
<h3 id="分代空间的工作流程">分代空间的工作流程</h3>
<p>存储在JVM中的Java对象可以被划分为两类：</p>
<ul>
<li>一类是生命周期较短的对象，创建在新生代，在新生代中被垃圾回收。</li>
<li>一类是生命周期非常长的对象，创建在新生代，在老年代中被垃圾回收，甚至与JVM生命周期保持一致。</li>
<li>几乎所有的对象创建在伊甸园区，绝大部分对象销毁在新生代，大对象直接进入老年代。</li>
</ul>
<h4 id="新生代">新生代</h4>
<p>（1）新创建的对象先放在伊甸园区。</p>
<p>（2）当伊甸园的空间用完时，程序又需要创建新对象，此时，触发JVM的垃圾回收器对伊甸园区进行垃圾回收（Minor GC，也叫Young GC），将伊甸园区中不再被引用的对象销毁。</p>
<p>（3）然后将伊甸园区的剩余对象移动到空的幸存0区。</p>
<p>（4）此时，伊甸园区清空。</p>
<p>（5）被移到幸存者0区的对象上有一个年龄计数器，值是1。</p>
<p>（6）然后再次将新对象放入伊甸园区。</p>
<p>（7）如果伊甸园区的空间再次用完，则再次触发垃圾回收，对伊甸园区和s0区进行垃圾回收，销毁不再引用的对象。</p>
<p>（8）此时s1区为空，然后将伊甸园区和s0区的剩余对象移动到空的s1区。</p>
<p>（9）此时，伊甸园区和s0区清空。</p>
<p>（10）从伊甸园区被移到s1区的对象上有一个年龄计数器，值是1。从s0区被移到s1区的对象上的年龄计数器+1，值是2。</p>
<p>（11）然后再次将新对象放入伊甸园区。如果再次经历垃圾回收，那么伊甸园区和s1区的剩余对象移动到s0区。对象上的年龄计数器+1。</p>
<p>（12）当对象上的年龄计数器达到15时（<strong>-XX:MaxTenuringThreshold</strong>），则晋升到老年代。</p>
<p><strong>总结：</strong></p>
<ul>
<li>
<p>针对幸存者s0，s1，GC之后有交换，谁空谁是to</p>
</li>
<li>
<p>垃圾回收时，<strong>伊甸园区和from区对象会被移动到to区</strong></p>
</li>
</ul>
<h4 id="老年代">老年代</h4>
<p>经历<strong>多次Minor GC</strong>仍然存在的对象（默认是15次）会被移入老年代，老年代的对象比较稳定，不会频繁的GC。若老年代也满了，那么这个时候将<strong>产生Major GC（同时触发Full GC）</strong>，进行老年代的垃圾回收。若老年代执行了Major GC之后发现依然无法进行对象的保存，就会<strong>产生OOM异常OutOfMemoryError</strong>。</p>
<h4 id="永久代-元空间">永久代/元空间</h4>
<p>方法区是一个常驻内存区域，用于存放JDK自身所携带的 Class，Interface 的元数据，也就是说它存储的是运行环境必须的类信息，方法区的回收效率很低，在full gc的时候才会触发。而full gc是老年代的空间不足、方法区不足时才会触发。如果出现 <strong>java.lang.OutOfMemoryError:PermGen space</strong>/<strong>java.lang.OutOfMemoryError:Meta space</strong>，说明是Java虚拟机对永久代内存设置不够。一般出现这种情况，都是程序启动需要加载大量的第三方jar包。例如：在一个Tomcat下部署了太多的应用。或者大量动态反射生成的类不断被加载，最终导致Perm区被占满。</p>
<p>尽管方法区在逻辑上属于堆的一部分，对于HotSpotJVM而言，方法区还有一个别名叫做Non-Heap(非堆)，目的就是要和堆分开。对于HotSpot虚拟机，很多开发者习惯将方法区称之为永久代 ，但严格说两者不同，或者说是使用永久代来实现方法区而已。</p>
<h4 id="GC总结">GC总结</h4>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/67bb48625de01bacfc27ce2cd653c3fd.png" alt=""></p>
<ul>
<li>频繁回收新生代</li>
<li>很少回收老年代</li>
<li>几乎不动方法区</li>
</ul>
<p><strong>部分收集：</strong></p>
<ul>
<li>年轻代收集（Minor GC  /  Young GC）：新生代垃圾收集（伊甸园区 + 幸存者区）</li>
<li>老年代收集（Major GC / FullGC）：老年代垃圾收集</li>
<li>混合收集（Mixed GC）：收集整个新生代以及部分老年代。<strong>G1垃圾收集器</strong>有这种方式</li>
</ul>
<p><strong>整堆收集（Full GC）：</strong></p>
<ul>
<li>整个Java堆的垃圾收集和方法区的垃圾收集</li>
</ul>
<p><strong>年轻代GC触发机制（Minor GC ）：</strong></p>
<p>年轻代的Eden空间不足，触发Minor GC。</p>
<p>每次Minor GC在清理Eden的同时会清理Survivor From区。</p>
<p>Minor GC非常频繁，回收速度块。</p>
<p>引发STW（Stop The World），暂停其他用户线程，垃圾回收结束，用户线程恢复。</p>
<p><strong>老年代GC触发机制（Full GC ）：</strong></p>
<p>老年代满了，对象从老年代消失是因为发生了Major GC 。</p>
<p>Major GC比Minor GC速度慢10倍以上，STW时间更长。</p>
<p>如果Major GC后，内存还不足，就报OOM。</p>
<p><strong>Full GC触发机制：</strong></p>
<p>Full GC（Full Garbage Collection）是Java虚拟机对堆内存中的所有对象进行全面回收的过程。Full GC的执行时机取决于Java虚拟机的实现和具体的垃圾回收策略。</p>
<p>一般情况下，Full GC发生的情况包括：</p>
<ol>
<li>当堆内存空间不足以分配新对象时，会触发一次Full GC。这种情况下，Java虚拟机会先执行一次新生代的垃圾回收（Minor GC），如果仍然无法满足内存需求，则会执行Full GC。</li>
<li>在某些垃圾回收器中，当老年代空间不足以容纳晋升到老年代的对象时，会执行Full GC。这通常发生在长时间运行的应用程序中，随着对象的逐渐增加，老年代空间可能会变得不足。</li>
<li>手动调用System.gc()方法或Runtime.getRuntime().gc()方法可以触发Full GC。但值得注意的是，这只是建议Java虚拟机进行垃圾回收的请求，并不能保证立即执行Full GC。</li>
</ol>
<p>需要注意的是，Full GC是一项资源密集型的操作，会导致应用程序的停顿时间增加，因为在Full GC期间，应用程序的线程会被挂起。因此，在设计和开发应用程序时，应尽量避免频繁触发Full GC，以减少对应用程序性能的影响。</p>
<h2 id="堆参数">堆参数</h2>
<ul>
<li><strong>-Xms</strong>表示堆的起始内存，等价于-XX:InitialHeapSize，默认是物理电脑内存的1/64。</li>
<li><strong>-Xmx</strong>表示堆的最大内存，等价于-XX:MaxHeapSize，默认是物理电脑内存的1/4。</li>
<li><strong>-Xmn</strong> 表示新生代堆大小，等价于-XX:NewSize，默认新生代占堆的<strong>1/3空间</strong>，老年代占堆的<strong>2/3空间</strong>。</li>
</ul>
<p><strong>通常会将-Xms和-Xmx配置相同的值</strong>，目的是为了在Java垃圾回收机制清理完堆区后，不需要重新分隔计算堆区的大小，从而提高性能。</p>
<h3 id="OOM错误">OOM错误</h3>
<p><strong>OOM异常：</strong></p>
<p>JVM启动时，为堆分配起始内存，当堆中数据超过-Xmx所指定的最大内存时，将会抛出<strong>java.lang.OutOfMemoryError: Java heap space</strong>  异常，此时说明Java虚拟机堆内存不够。</p>
<p><strong>原因有二：</strong></p>
<p>（1）Java虚拟机的<strong>堆内存设置不够</strong>，可以通过参数-Xms、-Xmx来调整。</p>
<p>（2）代码中创建了大量大对象，并且长时间<strong>不能被垃圾收集器收集</strong>（存在被引用）。</p>
<h2 id="VisualVM的使用">VisualVM的使用</h2>
<h3 id="OOM时自动生成堆内存快照">OOM时自动生成堆内存快照</h3>
<p>VisualVM工具：打开jvisualvm工具  ----&gt; 载入文件 ----&gt; 查看类实例数最多的并且和业务相关的对象  ----&gt; 查看线程的报错信息</p>
<table>
<thead>
<tr>
<th>1</th>
<th>自己本机新建路径D:\myDump，目的是对应参数-XX:HeapDumpPath=D:\myDump</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>-Xms20m -Xmx20m -XX:+PrintGCDetails -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:\myDump</td>
</tr>
<tr>
<td></td>
<td>-XX:+HeapDumpOnOutOfMemoryError：开启内存溢出时自动生成内存快照<br/>-XX:HeapDumpPath=/xxx/dump.hprof：指定dump文件的位置和文件名称</td>
</tr>
</tbody>
</table>
<h2 id="GC垃圾回收">GC垃圾回收</h2>
<h3 id="方法区的垃圾回收">方法区的垃圾回收</h3>
<p>方法区中能回收的内容主要就是不再使用的类。判定一个类可以被卸载。需要同时满足下面三个条件：</p>
<p>1、此类所有实例对象没有在任何地方被引用，在堆中不存在任何该类的实例对象以及子类对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">car = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p>2、该类对应的 java.lang.Class 对象没有在任何地方被引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(); </span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Car</span>&gt; aClass = car.getClass(); </span><br><span class="line">car = <span class="literal">null</span>;</span><br><span class="line">aClass = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p>3、加载该类的类加载器没有在任何地方被引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(); </span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Car</span>&gt; aClass = car.getClass(); </span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> aClass.getClassLoader();</span><br><span class="line"></span><br><span class="line">car = <span class="literal">null</span>;</span><br><span class="line">aClass = <span class="literal">null</span>;</span><br><span class="line">classLoader = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p>**总结：**方法区的回收通常情况下很少发生，但是如果通过自定义类加载器加载特定的是少数的类，那么可以在程序中释放自定义类加载器的引用，卸载当前类，垃圾回收及会对这部分内容进行回收</p>
<h3 id="判断对象是否为垃圾的算法">判断对象是否为垃圾的算法</h3>
<h4 id="引用计数法">引用计数法</h4>
<ul>
<li><strong>思路</strong>：给每一个对象加上引用计数器，每当有一个地方引用该对象，计数器就加1，计数器为0的就是不可能被使用的。</li>
<li><strong>优点</strong>：简单、高效</li>
<li><strong>缺点</strong>：当两个对象的属性循环引用时，计数器的值永远不可能为0，就无法释放。</li>
</ul>
<h4 id="可达性分析算法（根可达）">可达性分析算法（根可达）</h4>
<ul>
<li><strong>思路</strong>：通过将一些特定的对象设置为起始点GC Roots，这个根对象能到达的对象则为可用的，不能到达的对象则为垃圾。</li>
<li>GC Roots：</li>
</ul>
<table>
<thead>
<tr>
<th>1</th>
<th>栈帧中的局部变量表中的reference引用所引用的对象</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>方法区中static静态引用的对象</td>
</tr>
<tr>
<td>3</td>
<td>方法区中final常量引用的对象</td>
</tr>
<tr>
<td>4</td>
<td>本地方法栈中JNI(Native方法)引用的对象</td>
</tr>
</tbody>
</table>
<h3 id="垃圾回收算法-清除垃圾">垃圾回收算法-清除垃圾</h3>
<h4 id="复制算法（年轻代）">复制算法（年轻代）</h4>
<p><strong>核心思想：</strong></p>
<p>1.将堆内存分割成两块From空间 To空间，对象分配阶段，创建对象。</p>
<p>2.GC阶段开始，将GC Root搬运到To空间</p>
<p>3.将GC Root关联的对象，搬运到To空间</p>
<p>4.清理From空间，并把名称互换</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/80daaf1111bfcc8b31d379da468ca76b.png" alt=""></p>
<h4 id="标记清除（老年代）">标记清除（老年代）</h4>
<p>（1）**标记：**使用<code>可达性分析算法</code>，标记出可达对象。</p>
<p>（2）**清除：**对堆内存从头到尾进行线性便遍历，如果发现某个对象没有被标记为可达对象，则将其回收。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/75e283a4b3bff55ac33e642cdc882381.png" alt=""></p>
<p><strong>缺点：</strong></p>
<ul>
<li>
<p>效率问题（两次遍历）</p>
</li>
<li>
<p>空间问题（标记清除后会产生大量不连续的碎片。JVM就不得不维持一个<code>内存的空闲列表</code>，这又是一种开销。而且在分配数组对象的时候，寻找连续的内存空间会不太好找。）</p>
</li>
</ul>
<h4 id="标记压缩（标记整理清除）（老年代）">标记压缩（标记整理清除）（老年代）</h4>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/63759c05f37131eabf3e753f326894dd.png" alt=""></p>
<p><strong>优点：</strong></p>
<p>标记整理算法不仅可以弥补标记清除算法中，内存区域分散的缺点，也消除了复制算法当中，内存减半的高额代价。</p>
<p><strong>缺点：</strong></p>
<p>如果存活的对象过多，整理阶段将会执行较多复制操作，导致算法效率降低。</p>
<h3 id="四种引用">四种引用</h3>
<h4 id="强引用">强引用</h4>
<p>只要这个对象的引用存在，当空间不足时，垃圾回收器不会回收</p>
<h4 id="软引用">软引用</h4>
<p>内存足够不回收，内存不足够就回收</p>
<h4 id="弱引用">弱引用</h4>
<p>无论内存是否足够，只要发送垃圾回收，就一定会回收</p>
<h4 id="虚引用">虚引用</h4>
<p>与弱引用一样，但是在垃圾回收之前，会将对象添加到一个与之关联的引用队列中。</p>
<p>可以通过引用队列来判断是否发生垃圾回收或这个对象被垃圾回收了</p>
<h3 id="垃圾收集器">垃圾收集器</h3>
<blockquote>
<p>现在JDK17默认是G1垃圾回收器，可以使用效率更高的ZGC垃圾回收器</p>
</blockquote>
<p><code>-XX:+UseZGC</code></p>
<h4 id="G1垃圾回收器">G1垃圾回收器</h4>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/a2d4857660d8fd2461f2ca654592431d.png" alt=""></p>
<p>G1之前分为年轻代和老年代，且是连续的空间。G1之后也存在年轻代、老年代，多了一个HUmongous：用来存储内存超过region一半的大对象，如果不够则两个H合并，但是他们被分为2048个空间（region）。</p>
<table>
<thead>
<tr>
<th>1</th>
<th>年轻代和老年代是各自独立且连续的内存块</th>
</tr>
</thead>
<tbody>
<tr>
<td>2</td>
<td>年轻代收集使用伊甸园区+幸存零区+幸存一区进行复制算法；</td>
</tr>
<tr>
<td>3</td>
<td>老年代收集必须扫描整个老年代区域；</td>
</tr>
<tr>
<td>4</td>
<td>都是以尽可能少而快速地执行GC为设计原则。</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>初始标记</th>
<th>和CMS一样只标记GC Roots直接关联的对象</th>
</tr>
</thead>
<tbody>
<tr>
<td>并发标记</td>
<td>进行GC Roots Traceing过程</td>
</tr>
<tr>
<td>最终标记</td>
<td>修正并发标记期间,因程序运行导致发生变化的那一部分对象</td>
</tr>
<tr>
<td>筛选回收</td>
<td>根据时间来进行价值最大化收集</td>
</tr>
</tbody>
</table>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/ef0185439913fbc13b35c7393b3965e0.png" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>MD5Util</title>
    <url>/2025/09/15/MD5Util/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Md5Util</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件生成md5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getFileMD5</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> DigestUtils.md5Hex(file.getInputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;getFileMD5 error&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;使用文件name&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件流生成md5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getFileMD5</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DigestUtils.md5Hex(bytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;getFileMD5 error&quot;</span>,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown 2 基础语法</title>
    <url>/2022/09/27/Markdown%202%20%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1>Markdown 2 基础语法</h1>
<p><a href="https://markdown.com.cn/basic-syntax/lists.html">Markdown 列表语法 | Markdown 官方教程</a></p>
<p><a href="https://markdown.com.cn/extended-syntax/">Markdown 扩展语法入门 | Markdown 官方教程</a></p>
<p><a href="https://markdown.com.cn/tools.html#%E7%BC%96%E8%BE%91%E5%99%A8">Markdown 工具 | Markdown 官方教程</a></p>
<h1>标题：</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>
<p>标题除了可以通过 #来设置，还可以通过 ctrl + 数字键 1,2,3 来设置</p>
<h1>列表:</h1>
<h2 id="无序列表">无序列表</h2>
<p>语法很简单，只需要在你的文字前面加上一共 - 或 * 就行了.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">-我是第一行 \<span class="emphasis">*我是第二行 -我是第三行</span></span><br></pre></td></tr></table></figure>
<h2 id="有序列表">有序列表</h2>
<p>在文字前加 1. 2. 3. 的符号</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1.我是第一行 2.我是第二行 3.我是第三行</span><br></pre></td></tr></table></figure>
<p>注意：- * 等符号要和文字之间加一共空格</p>
<h1>引用：</h1>
<p>只需要在文本在之前加入 &gt; 这种尖括号</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 我一直在使用引用</span></span><br><span class="line"><span class="quote">&gt; 重开始到现在</span></span><br></pre></td></tr></table></figure>
<h1>图片和链接</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">图片为:![](<span class="link"></span>)</span><br><span class="line">链接为:[](<span class="link"></span>)</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">图片名称</span>](<span class="link">http://b.hiphotos.baidu.com/image/pic/item/0823dd54564e925838c205c89982d158ccbf4e</span>)</span><br></pre></td></tr></table></figure>
<p>体与斜体<br>
Markdown 的粗体和斜体也非常简单，用两个 _ 包含一段文本就是粗体的语法，用一个 _ 包含一段文本就是斜体的语法。<br>
例如：这是<strong>粗体</strong>，这是<em>斜体</em></p>
<h1>表格</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| Tables        |      Are      |  Cool |</span><br><span class="line">| ------------- | :-----------: | ----: |</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      |   centered    |   $12 |</span><br><span class="line">| zebra stripes |   are neat    |    $1 |</span><br></pre></td></tr></table></figure>
<p>表格还可以这样</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;td&gt;hello somebody told me&lt;/td&gt;</span></span><br><span class="line"><span class="code">    &lt;td&gt;hello&lt;/td&gt;</span></span><br><span class="line"><span class="code">  &lt;/tr&gt;</span></span><br><span class="line"><span class="code">  &lt;tr&gt;</span></span><br><span class="line"><span class="code">    &lt;td&gt;sss&lt;/td&gt;</span></span><br><span class="line"><span class="code">    &lt;td&gt;dsdf&lt;/td&gt;</span></span><br><span class="line"><span class="code">  &lt;/tr&gt;</span></span><br><span class="line"><span class="code">&lt;/table&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<table>
  <tr>
    <td>hello somebody told me</td>
    <td>hello</td>
  </tr>
  <tr>
    <td>sss</td>
    <td>dsdf</td>
  </tr>
</table>
<h1>代码框</h1>
<p>连续三个反引号 `，就是按键 1 前面的那个符号再加代码类型.</p>
<p><code>代码</code></p>
<h1>横线</h1>
<p>分割线的语法只需要三个 * 号。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure>
<hr>
<h1>转义字符</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\\ 反斜杠</span><br><span class="line">\` 反引号 \* 星号</span><br><span class="line">\_ 下划线</span><br><span class="line">\&#123;&#125; 大括号</span><br><span class="line">\[] 中括号</span><br><span class="line">\() 小括号</span><br><span class="line">\# 井号</span><br><span class="line">\+ 加号</span><br><span class="line">\- 减号</span><br><span class="line">\. 英文句号</span><br><span class="line">\! 感叹号</span><br></pre></td></tr></table></figure>
<h1>快捷键</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ctrl+1 一级标题</span><br><span class="line">ctrl+2 二级标题</span><br><span class="line">····</span><br><span class="line">ctrl+shift+o 有序列表</span><br><span class="line">ctrl+u 无序列表</span><br><span class="line">ctrl+g 插入图片</span><br><span class="line">ctrl+l 插入超链接</span><br><span class="line">Ctrl+B 　粗体</span><br><span class="line">Ctrl+I 　斜体</span><br><span class="line">Ctrl+Q 　引用</span><br><span class="line">Ctrl+K 　代码块</span><br><span class="line">Ctrl+Shift+I 插入图片（复制的链接）</span><br></pre></td></tr></table></figure>
<h2 id="Emoji表情">Emoji表情</h2>
<p>复制粘贴：<a href="https://emojipedia.org/">📙 Emojipedia — 😃 Home of Emoji Meanings 💁👌🎍😍</a></p>
<p><a href="https://gist.github.com/rxaviers/7360908">表情符号简码列表</a></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">去露营了！ :tent: 很快回来。</span><br><span class="line"></span><br><span class="line">真好笑！ :joy:</span><br></pre></td></tr></table></figure>
<p>去露营了！ ⛺ 很快回来。</p>
<p>真好笑！ 😂</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus</title>
    <url>/2025/09/15/MyBatis-Plus/</url>
    <content><![CDATA[<h1>MyBatis-Plus</h1>
<h2 id="逻辑删除">逻辑删除</h2>
<p><strong>逻辑删除功能</strong></p>
<p>由于数据库中所有表均采用逻辑删除策略，所以查询数据时均需要增加过滤条件is_deleted=0。</p>
<p>上述操作虽不难实现，但是每个查询接口都要考虑到，也显得有些繁琐。为简化上述操作，可以使用Mybatis-Plus提供的逻辑删除功能，它可以自动为查询操作增加is_deleted=0过滤条件，并将删除操作转为更新语句。具体配置如下，详细信息可参考官方文档。</p>
<h3 id="方法一">方法一</h3>
<p>在application.yml中增加如下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"><span class="attr">global-config:</span></span><br><span class="line">  <span class="attr">db-config:</span></span><br><span class="line">    <span class="attr">logic-delete-field:</span> <span class="string">is_deleted</span> <span class="comment"># 全局逻辑删除的实体字段名(配置后可以忽略不配置步骤二)</span></span><br><span class="line">    <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">    <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>
<h3 id="方法二">方法二</h3>
<p>在实体类中的删除标识字段上增加@TableLogic注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;主键&quot;)</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;逻辑删除&quot;)</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="meta">@TableField(&quot;is_deleted&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Byte isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="忽略特定字段">忽略特定字段</h2>
<p>通常情况下接口响应的Json对象中并不需要create_time、update_time、is_deleted等字段，这时只需在实体类中的相应字段添加@JsonIgnore注解，该字段就会在序列化时被忽略。</p>
<p>具体配置如下，详细信息可参考Jackson官方文档。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;主键&quot;)</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;create_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;update_time&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Schema(description = &quot;逻辑删除&quot;)</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@TableField(&quot;is_deleted&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Byte isDeleted;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置自动填充">配置自动填充</h2>
<p>创建一个配置类<code>MybatisMetaObjectHandler</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, Date.class, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, Date.class, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Minio</title>
    <url>/2025/09/15/Minio/</url>
    <content><![CDATA[<h1>MinioConfig</h1>
<p>minio操作：1.上传  2.生命周期等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.orange.blog.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.*;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> online.orange.blog.common.constants.FilePath;</span><br><span class="line"><span class="keyword">import</span> online.orange.blog.common.dto.MinioUploadDto;</span><br><span class="line"><span class="keyword">import</span> online.orange.blog.util.ByteUtil;</span><br><span class="line"><span class="keyword">import</span> online.orange.blog.util.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> online.orange.blog.util.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> online.orange.blog.util.StringUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;minio&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.baseUrl&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String baseUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">AUTO_DELETE_TAG_KEY</span> <span class="operator">=</span> <span class="string">&quot;auto-delete&quot;</span>;</span><br><span class="line">    <span class="comment">//自动删除规则</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">LifecycleRule</span> <span class="variable">autoDeleteRule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LifecycleRule</span>(</span><br><span class="line">            Status.ENABLED,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Expiration</span>(</span><br><span class="line">                    (ResponseDate) <span class="literal">null</span>,</span><br><span class="line">                    <span class="number">7</span>,</span><br><span class="line">                    (Boolean) <span class="literal">null</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">RuleFilter</span>(<span class="keyword">new</span> <span class="title class_">Tag</span>(AUTO_DELETE_TAG_KEY, <span class="string">&quot;true&quot;</span>)),</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">     );</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">getMinioClient</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;LifecycleRule&gt; rules = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        rules.add(autoDeleteRule);</span><br><span class="line">        <span class="type">LifecycleConfiguration</span> <span class="variable">lifecycleConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LifecycleConfiguration</span>(rules);</span><br><span class="line">        log.info(<span class="string">&quot;初始化minio&quot;</span>);</span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">build</span> <span class="operator">=</span> MinioClient.builder()</span><br><span class="line">                .endpoint(endpoint)</span><br><span class="line">                .credentials(accessKey, secretKey)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">LifecycleConfiguration</span> <span class="variable">lifecycle</span> <span class="operator">=</span> getLifecycle(build);</span><br><span class="line">        <span class="keyword">if</span> (lifecycle == <span class="literal">null</span>)&#123;</span><br><span class="line">            setLifecycle(lifecycleConfiguration,build);</span><br><span class="line">        &#125;</span><br><span class="line">        visualizeLifecycle(lifecycle);</span><br><span class="line">        <span class="keyword">return</span> build;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MinioUploadDto uploadDto)</span> &#123;</span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> <span class="built_in">this</span>.getMinioClient();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">MultipartFile</span> <span class="variable">file</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file=replaceUrl(uploadDto.getFile());</span><br><span class="line">            <span class="type">byte</span>[] bytes = file.getBytes();</span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            minioClient.putObject(PutObjectArgs.builder()</span><br><span class="line">                    .bucket(<span class="built_in">this</span>.getBucketName())</span><br><span class="line">                    .object(String.join(<span class="string">&quot;/&quot;</span>,uploadDto.getPath()))</span><br><span class="line">                    .stream(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes), bytes.length, -<span class="number">1</span>)</span><br><span class="line">                    .headers(getHeaders(originalFilename))</span><br><span class="line">                    .tags(uploadDto.getTags())</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;上传文件失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot;/&quot;</span>, <span class="built_in">this</span>.getBaseUrl(),<span class="built_in">this</span>.getBucketName(), uploadDto.getPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件类型返回头信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getHeaders</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>).toLowerCase();</span><br><span class="line">        Map&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 设置 Content-Type</span></span><br><span class="line">        <span class="keyword">switch</span> (extension) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;png&quot;</span>:</span><br><span class="line">                headers.put(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;jpg&quot;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;jpeg&quot;</span>:</span><br><span class="line">                headers.put(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;gif&quot;</span>:</span><br><span class="line">                headers.put(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;md&quot;</span>:</span><br><span class="line">                headers.put(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/markdown&quot;</span>); <span class="comment">// 明确标记 markdown 类型</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                headers.put(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 非图片类文件强制下载</span></span><br><span class="line">        <span class="keyword">if</span> (!extension.matches(<span class="string">&quot;png|jpg|jpeg|gif|bmp&quot;</span>)) &#123;</span><br><span class="line">            headers.put(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=\&quot;&quot;</span> + fileName + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除对象的所有标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeAllTags</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">domain</span> <span class="operator">=</span> StringUtil.getDomain(url);</span><br><span class="line">        <span class="keyword">if</span> (!domain.equals(baseUrl))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;非本站域名图片&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        setTags(url, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对象标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getTags</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        String path= getObjectPath(url);</span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> getMinioClient();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Tags</span> <span class="variable">objectTags</span> <span class="operator">=</span> minioClient.getObjectTags(</span><br><span class="line">                    GetObjectTagsArgs.builder()</span><br><span class="line">                            .bucket(getBucketName())</span><br><span class="line">                            .object(path)</span><br><span class="line">                            .build());</span><br><span class="line">            <span class="keyword">return</span> objectTags.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取对象标签失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据url获取路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getObjectPath</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取路径</span></span><br><span class="line">        <span class="keyword">return</span> url.substring(url.indexOf(bucketName)+bucketName.length()+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * setTags</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTags</span><span class="params">(String url, Map&lt;String, String&gt; tags)</span> &#123;</span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> getMinioClient();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SetObjectTagsArgs</span> <span class="variable">build</span> <span class="operator">=</span> SetObjectTagsArgs.builder()</span><br><span class="line">                    .bucket(getBucketName())</span><br><span class="line">                    .object(getObjectPath(url))</span><br><span class="line">                    .tags(tags)</span><br><span class="line">                    .build();</span><br><span class="line">            minioClient.setObjectTags(build);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;设置对象标签失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取生命周期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> LifecycleConfiguration <span class="title function_">getLifecycle</span><span class="params">(MinioClient minioClient)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> minioClient.getBucketLifecycle(</span><br><span class="line">                    GetBucketLifecycleArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取生命周期失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置生命周期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLifecycle</span><span class="params">(LifecycleConfiguration lifecycle,MinioClient minioClient)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.setBucketLifecycle(</span><br><span class="line">                    SetBucketLifecycleArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .config(lifecycle)</span><br><span class="line">                            .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;设置生命周期失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除生命周期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearLifecycle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> getMinioClient();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.deleteBucketLifecycle(</span><br><span class="line">                    DeleteBucketLifecycleArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;清除生命周期失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可视化生命周期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visualizeLifecycle</span><span class="params">(LifecycleConfiguration lifecycle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lifecycle == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该存储桶未设置生命周期规则&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;LifecycleRule&gt; rules = lifecycle.rules();</span><br><span class="line">        System.out.printf(<span class="string">&quot;=== 发现 %d 条生命周期规则 ===%n%n&quot;</span>, rules.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rules.size(); i++) &#123;</span><br><span class="line">            <span class="type">LifecycleRule</span> <span class="variable">rule</span> <span class="operator">=</span> rules.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 规则基本信息</span></span><br><span class="line">            System.out.printf(<span class="string">&quot;┌────── 规则 #%d ───────%n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;│ ID: %s%n&quot;</span>, rule.id() != <span class="literal">null</span> ? rule.id() : <span class="string">&quot;(未指定)&quot;</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;│ 状态: %s%n&quot;</span>, rule.status());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 过滤条件</span></span><br><span class="line">            System.out.print(<span class="string">&quot;│ 适用范围: &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (rule.filter() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rule.filter().prefix() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;前缀[&quot;</span> + rule.filter().prefix() + <span class="string">&quot;] &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (rule.filter().tag() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;标签[&quot;</span> + rule.filter().tag().key() + <span class="string">&quot;=&quot;</span></span><br><span class="line">                            + rule.filter().tag().value() + <span class="string">&quot;] &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;全部对象&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 过期设置</span></span><br><span class="line">            System.out.print(<span class="string">&quot;│ 对象过期: &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (rule.expiration() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rule.expiration().days() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    System.out.println(rule.expiration().days() + <span class="string">&quot;天后删除&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rule.expiration().date() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;在 &quot;</span> + rule.expiration().date() + <span class="string">&quot; (GMT午夜) 删除&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rule.expiration().expiredObjectDeleteMarker() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;删除标记: &quot;</span> + rule.expiration().expiredObjectDeleteMarker());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;未设置&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分段上传设置</span></span><br><span class="line">            System.out.print(<span class="string">&quot;│ 分段上传: &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (rule.abortIncompleteMultipartUpload() != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(rule.abortIncompleteMultipartUpload().daysAfterInitiation()</span><br><span class="line">                        + <span class="string">&quot;天后中止未完成的上传&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;不自动中止&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 非当前版本设置</span></span><br><span class="line">            System.out.print(<span class="string">&quot;│ 非当前版本: &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (rule.noncurrentVersionExpiration() != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.print(rule.noncurrentVersionExpiration().noncurrentDays() + <span class="string">&quot;天后删除&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (rule.noncurrentVersionTransition() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;，&quot;</span>+ rule.noncurrentVersionTransition().noncurrentDays()</span><br><span class="line">                            + <span class="string">&quot;天后转为&quot;</span> + rule.noncurrentVersionTransition().storageClass());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rule.noncurrentVersionTransition() != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.print(rule.noncurrentVersionTransition().noncurrentDays()</span><br><span class="line">                        + <span class="string">&quot;天后转为&quot;</span> + rule.noncurrentVersionTransition().storageClass());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;无设置&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 存储类型转换</span></span><br><span class="line">            System.out.print(<span class="string">&quot;│ 存储转换: &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (rule.transition() != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(rule.transition().days() + <span class="string">&quot;天后转为&quot;</span></span><br><span class="line">                        + rule.transition().storageClass());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无设置&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;└─────────────────────%n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有带有 AUTO_DELETE_TAG_KEY 标签的 对象的url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getObjectByTag</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> getMinioClient();</span><br><span class="line">        List&lt;String&gt; urls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 列出所有对象</span></span><br><span class="line">            Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(</span><br><span class="line">                    ListObjectsArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .recursive(<span class="literal">true</span>)  <span class="comment">// 递归列出所有子目录</span></span><br><span class="line">                            .build());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 遍历并检查标签</span></span><br><span class="line">            <span class="keyword">for</span> (Result&lt;Item&gt; result : results) &#123;</span><br><span class="line">                <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    item = result.get();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> item.objectName();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取对象标签</span></span><br><span class="line">                    <span class="type">Tags</span> <span class="variable">tags</span> <span class="operator">=</span> minioClient.getObjectTags(</span><br><span class="line">                            GetObjectTagsArgs.builder()</span><br><span class="line">                                    .bucket(bucketName)</span><br><span class="line">                                    .object(objectName)</span><br><span class="line">                                    .build());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 检查是否包含目标标签</span></span><br><span class="line">                    <span class="keyword">if</span> (tags != <span class="literal">null</span> &amp;&amp; tags.get().containsKey(key)) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> baseUrl + <span class="string">&quot;/&quot;</span> + bucketName + <span class="string">&quot;/&quot;</span> + objectName;</span><br><span class="line">                        urls.add(url);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;处理对象 &#123;&#125; 时出错: &#123;&#125;&quot;</span>, item.objectName(), e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取带 &#123;&#125; 标签的对象列表失败&quot;</span>, key, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;查询失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> urls;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObject</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> getMinioClient();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> getObjectPath(url);</span><br><span class="line">            minioClient.removeObject(</span><br><span class="line">                    RemoveObjectArgs.builder()</span><br><span class="line">                            .bucket(bucketName)</span><br><span class="line">                            .object(objectName)</span><br><span class="line">                            .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;删除对象 &#123;&#125; 失败&quot;</span>, url, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;删除失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对象文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getObjectByte(String url) &#123;</span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> getMinioClient();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> getObjectPath(url);</span><br><span class="line">            <span class="type">GetObjectArgs</span> <span class="variable">args</span> <span class="operator">=</span> GetObjectArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .object(objectName)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">GetObjectResponse</span> <span class="variable">response</span> <span class="operator">=</span> minioClient.getObject(args)) &#123;</span><br><span class="line">                <span class="keyword">return</span> response.readAllBytes();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取对象 &#123;&#125; 失败&quot;</span>, url, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;获取失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对象文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getObjectString</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> getMinioClient();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> getObjectPath(url);</span><br><span class="line">            <span class="type">GetObjectArgs</span> <span class="variable">args</span> <span class="operator">=</span> GetObjectArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .object(objectName)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">GetObjectResponse</span> <span class="variable">response</span> <span class="operator">=</span> minioClient.getObject(args)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(response.readAllBytes(), StandardCharsets.UTF_8);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取对象 &#123;&#125; 失败&quot;</span>, url, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;获取失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换文件中所有非本站图片地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> MultipartFile <span class="title function_">replaceUrl</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.getOriginalFilename().endsWith(<span class="string">&quot;.md&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> file;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">modifiedContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(file.getBytes(), StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">            List&lt;String&gt; urls = ByteUtil.getUrls(file.getBytes());</span><br><span class="line">            <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!isLocalImage(url)) &#123;</span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> HttpUtil.getInputStream(url);</span><br><span class="line">                        <span class="type">MinioUploadDto</span> <span class="variable">build</span> <span class="operator">=</span> MinioUploadDto.builder().build();</span><br><span class="line">                        build.setFile(inputStream, getUrlOriginalFilename(url));</span><br><span class="line">                        build.setPath(String.format(FilePath.ARTICLE_IMAGE_PATH,</span><br><span class="line">                                SecurityContextHolder.getUserAccount().getId()));</span><br><span class="line">                        <span class="type">String</span> <span class="variable">newUrl</span> <span class="operator">=</span> upload(build);</span><br><span class="line">                        log.info(<span class="string">&quot;替换图片地址：&#123;&#125;-&gt;&#123;&#125;&quot;</span>, url, newUrl);</span><br><span class="line">                        modifiedContent = modifiedContent.replace(url, newUrl);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;获取图片 &#123;&#125; 失败&quot;</span>, url, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] newBytes = modifiedContent.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomMultipartFile</span>(</span><br><span class="line">                    file.getName(),</span><br><span class="line">                    file.getOriginalFilename(),</span><br><span class="line">                    file.getContentType(),</span><br><span class="line">                    newBytes</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;处理文件失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrlByObjectPath</span><span class="params">(String objectPath)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot;/&quot;</span>, baseUrl,bucketName, objectPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Helper class to create a new MultipartFile</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CustomMultipartFile</span> <span class="keyword">implements</span> <span class="title class_">MultipartFile</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String originalFilename;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String contentType;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span>[] content;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">CustomMultipartFile</span><span class="params">(String name, String originalFilename, String contentType, <span class="type">byte</span>[] content)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.originalFilename = originalFilename;</span><br><span class="line">            <span class="built_in">this</span>.contentType = contentType;</span><br><span class="line">            <span class="built_in">this</span>.content = content;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getOriginalFilename</span><span class="params">()</span> &#123; <span class="keyword">return</span> originalFilename; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getContentType</span><span class="params">()</span> &#123; <span class="keyword">return</span> contentType; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123; <span class="keyword">return</span> content == <span class="literal">null</span> || content.length == <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getSize</span><span class="params">()</span> &#123; <span class="keyword">return</span> content.length; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] getBytes() &#123; <span class="keyword">return</span> content; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> InputStream <span class="title function_">getInputStream</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(content); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transferTo</span><span class="params">(File dest)</span> <span class="keyword">throws</span> IOException, IllegalStateException &#123;</span><br><span class="line">            Files.write(dest.toPath(), content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为本站图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLocalImage</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">domain</span> <span class="operator">=</span> StringUtil.getDomain(url);</span><br><span class="line">        <span class="keyword">return</span> domain.equals(baseUrl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取url中文件文件名包括后缀</span></span><br><span class="line"><span class="comment">     * https://server.blog.zorange.online/files/2d1407371ac5449c993b53caeabdcb65.md</span></span><br><span class="line"><span class="comment">     * return 2d1407371ac5449c993b53caeabdcb65.md</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrlOriginalFilename</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url.substring(url.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Nacos配置中心</title>
    <url>/2025/09/15/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1>Nacos配置中心</h1>
<h2 id="统一配置管理">统一配置管理</h2>
<ul>
<li>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就显得十分的不方便，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。</li>
<li>nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/d923af8cb110e8c0b7cccfaec19767cb.png" alt=""></p>
<h2 id="Nacos入门">Nacos入门</h2>
<h3 id="1-在nacos中添加配置">1.在nacos中添加配置</h3>
<ul>
<li>配置的选项与服务配置基本一致</li>
<li>只有一个区别：服务名改成了配置文件的id（<strong>Data ID</strong>）</li>
<li>都有 namespace和group</li>
</ul>
<h3 id="2-微服务集成配置中心">2.微服务集成配置中心</h3>
<p>微服务需要进行改造，从Nacos配置中心中获取配置信息进行使用。</p>
<p>步骤：</p>
<p>1、在spzx-cloud-user微服务中，引入spring-cloud-starter-alibaba-nacos-config依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos作为配置中心时所对应的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、在spzx-cloud-user项目的 /src/main/resources/application.yml 配置文件中配置 Nacos Config 地址并引入服务配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置数据库的连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.136</span><span class="number">.142</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">import:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nacos:spzx-cloud-user-dev.yml</span></span><br></pre></td></tr></table></figure>
<h3 id="读取自定义配置">读取自定义配置</h3>
<ul>
<li>@value</li>
<li>@ConfigurationProperties(prefix=“aaa”)</li>
</ul>
<p><strong>区别</strong></p>
<p><code>@ConfigurationProperties</code> 当nacos配置文件更新时，里面的参数可以热更新（同步更新）</p>
<p><code>@Value</code> 不能热更新，但是可以使用<code>@RefreshScope</code>加在类上，实现热更新</p>
<h3 id="配置优先级">配置优先级</h3>
<p>优先级顺序：Nacos配置中心的配置(后导入的配置 &gt; 先导入的配置) &gt; application.yml</p>
<h2 id="拓展：加载yml文件的两种方式">拓展：加载yml文件的两种方式</h2>
<p>新版方式：加载yml文件的方式的方式是新版中的方式：spring.config.import</p>
<p>旧版方式：借助于<code>bootstrap.properties</code>，<code>bootstrap.yml</code>文件，不过 从技术上讲<code>bootstrap.properties</code>，<code>bootstrap.yml</code> <strong>其文件已被弃用</strong>。</p>
<p>如果使用旧版方式：需要两步：【旧版方式就不需要application.yml文件了】</p>
<p>第一步:需要导入spring-cloud-starter-bootstrap依赖信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第二步：在src/main/resource目录下创建bootstrap.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> </span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 如果不想使用 Nacos 进行配置管理，设置为 false 即可</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span> <span class="comment"># 组，默认为 DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 配置内容的数据格式，默认为 properties</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">483bb765-a42d-4112-90bc-50b8dff768b3</span> <span class="comment">#指定名称空间的id,如果是public名称空间，这里可以省略。</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/spzx-cloud-user</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spzx-cloud-user</span></span><br></pre></td></tr></table></figure>
<h3 id="DataId">DataId</h3>
<p>说明：之所以需要配置 <code>spring.application.name</code>，是因为它是构成 Nacos 配置管理 <code>dataId</code>字段的一部分。在 Nacos Spring Cloud 中，<code>dataId</code> 的完整格式如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 若不指定，默认采用应用名的方案</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">spzx-cloud-user</span></span><br><span class="line"><span class="comment"># 手动指定配置的dataID前缀标识</span></span><br><span class="line"><span class="comment"># spring.cloud.nacos.config.prefix=spzx-cloud-user</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>spring.profile.active</code> 即为当前环境对应的 profile。<strong>注意：当 <code>spring.profile.active</code> 为空时，对应的连接符 <code>-</code> 也将不存在，dataId 的拼接格式将变成 <code>$&#123;prefix&#125;.$&#123;file-extension&#125;</code></strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dev表示开发环境</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>file-exetension</code> 为配置内容的数据格式,默认为properties类型，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置,目前支持的类型有 TEXT、JSON、XML、YAML、HTML、Properties。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定配置文件类型为yaml文件</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.file-extension</span>=<span class="string">yaml</span></span><br></pre></td></tr></table></figure>
<p>最终配置：</p>
<p>​    经过前面三个步骤，我们最终在nacos配置中心的控制台新增配置文件就是：spzx-cloud-user-dev.yaml</p>
<p>通常我们可以这样定义 Namespace，Group，DataId：</p>
<ul>
<li><code>Namespace</code>：代表不同的<strong>环境</strong>，如：开发、测试， 生产等；</li>
<li><code>Group</code>：代表某个<strong>项目</strong>，如：XX物流项目，XX教育项目；</li>
<li><code>DataId</code>：每个项目下往往有若干个<strong>应用</strong>，每个配置集(DataId)是一个应用的<strong>主配置文件</strong></li>
</ul>
</li>
</ul>
<h2 id="公共配置">公共配置</h2>
<p>日常开发中，多个模块可能会有很多共用的配置，比如数据库连接信息，Redis 连接信息，RabbitMQ 连接信息，监控配置等等。那么此时，我们就希望可以加载多个配置，多个项目共享同一个配置之类等功能，Nacos Config 也确实支持。</p>
<p>Nacos在配置路径spring.cloud.nacos.config.extension-configs下，允许我们指定⼀个或多个额外配置。<br>
Nacos在配置路径spring.cloud.nacos.config.shared-configs下，允许我们指定⼀个或多个共享配置。</p>
<p>上述两类配置都⽀持三个属性：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">data-id(引用的配置文件全称)</span><br><span class="line">group(默认为字符串DEFAULT<span class="built_in">_</span>GROUP)</span><br><span class="line">refresh(默认为false)    //是否开启热更新</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这两种配置方式都可以同时导入多个配置文件，因此就有两种（都有两种，把extension替换成shared）方式,</p>
<ol>
<li>
<p>下标</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">      	<span class="string">extension-configs[0]:</span></span><br><span class="line">      		<span class="attr">data-id:</span> <span class="string">xxxxx</span></span><br><span class="line">      		<span class="attr">group:</span> </span><br><span class="line">      		<span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">      	<span class="string">extension-configs[1]:</span></span><br><span class="line">      		<span class="attr">data-id:</span> <span class="string">yyyyy</span></span><br><span class="line">      		<span class="attr">group:</span> </span><br><span class="line">      		<span class="attr">refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>-</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">      	<span class="attr">extension-configs:</span></span><br><span class="line">      		<span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">xxx.uml</span></span><br><span class="line">      			<span class="attr">graoup:</span></span><br><span class="line">      			<span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">      		<span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">yyyy.uml</span></span><br><span class="line">      			<span class="attr">graoup:</span></span><br><span class="line">      			<span class="attr">refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h3 id="不同方式配置加载优先级">不同方式配置加载优先级</h3>
<p>Nacos 配置中心目前提供以下三种配置能力从 Nacos 拉取相关的配置，当三种方式共同使用时，他们的一个优先级关系是:A &lt; B &lt; C：</p>
<ul>
<li>A：通过 spring.cloud.nacos.config.shared-configs[n].data-id 支持多个共享 Data Id 的配置</li>
<li>B：通过 spring.cloud.nacos.config.extension-configs[n].data-id 的方式支持多个扩展 Data Id 的配置</li>
<li>C：通过内部相关规则(spring.cloud.nacos.config.prefix、spring.cloud.nacos.config.file-extension、spring.cloud.nacos.config.group)自动生成相关的 Data Id 配置。</li>
</ul>
<h3 id="共享配置和拓展配置的区别">共享配置和拓展配置的区别</h3>
<p>在Nacos中，<code>shared-configs</code>和<code>extension-configs</code>是两种不同的配置存储方式，它们主要用于不同的场景和目的：</p>
<ol>
<li><strong>shared-configs</strong>：
<ul>
<li><strong>作用</strong>：用于存储应用程序的共享配置，即多个应用程序可以共同使用的配置信息。</li>
<li><strong>特点</strong>：这些配置项通常是多个微服务或应用程序之间共享的核心配置，例如数据库连接信息、公共服务的地址、全局性的配置参数等。</li>
<li><strong>优点</strong>：通过将这些共享配置放在<code>shared-configs</code>中，可以实现统一管理和更新，确保所有使用这些配置的应用程序在配置变更时能够及时获取最新的配置信息。</li>
</ul>
</li>
<li><strong>extension-configs</strong>：
<ul>
<li><strong>作用</strong>：用于存储应用程序的扩展配置，即特定于某个应用或模块的配置信息。</li>
<li><strong>特点</strong>：这些配置项是应用程序特有的，通常是各个微服务或模块需要的特定配置，如每个微服务的业务相关的配置、特定功能的开关等。</li>
<li><strong>优点</strong>：将这些配置放在<code>extension-configs</code>中有助于保持配置的独立性和隔离性，避免不同应用程序之间的配置混淆和冲突。</li>
</ul>
</li>
</ol>
<p><strong>总结</strong>：</p>
<ul>
<li><code>shared-configs</code>适用于存储全局和共享的配置，以确保多个应用程序能够共享和同步这些配置。</li>
<li><code>extension-configs</code>适用于存储特定应用程序或服务的个性化配置，以确保每个应用程序都能获取到其所需的特定配置信息。</li>
</ul>
<p>在实际使用中，根据配置的共享程度和应用的功能需求，可以灵活选择将配置项存储在哪种配置中心中。</p>
<h2 id="Nacos做配置中心数据持久化到mysql">Nacos做配置中心数据持久化到mysql</h2>
<ul>
<li>
<p>第一步：在navicat创建nacos_config库，并将nacos/conf目录下的mysql-schema.sql文件在navicat中导入</p>
</li>
<li>
<p>第二步：在conf 下找到application.properties 文件，进行配置。配置文件如下:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>第三步：配置置完成启动nacos，操作就可以持久化</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>OCR 图形转文字</title>
    <url>/2022/12/19/OCR%20%E5%9B%BE%E5%BD%A2%E8%BD%AC%E6%96%87%E5%AD%97/</url>
    <content><![CDATA[<h1>OCR 图像转文字</h1>
<h2 id="涉及涉及软件：">涉及涉及软件：</h2>
<h3 id="Snipaste">Snipaste</h3>
<ol>
<li>功能：快捷截图</li>
<li>优点：方便、快捷、小巧、、</li>
</ol>
<h3 id="Tesseract-OCR">Tesseract-OCR</h3>
<ol>
<li>功能：Tesseract-OCR 是一种开源的文本识别软件，可以将扫描的文档或者图片中的文本识别成电子文本。它可以识别多种语言，包括英语、法语、德语、西班牙语、意大利语和许多其他语言。</li>
</ol>
<p>Tesseract-OCR 使用神经网络技术来识别文本，并且可以在许多操作系统上运行，包括 Windows、Linux 和 MacOS。它可以被用于 自 动化文档处理、文本挖掘和其他应用程序中。</p>
<p>Tesseract-OCR 还可以支持自定义字体，并且可以通过训练来提高识别精度。它提供了一组命令行工具，可以用来进行文本识别和处 理。</p>
<ol start="2">
<li>优点：优点：开源、多语言支持、自定义字体、跨平台等。</li>
</ol>
<h3 id="具体思路">具体思路:</h3>
<p>用 Snipaste 来快捷截图，可以一次性将想要识别的图片分多次截取，Snipate 的图片名称和路径都是可以自定义的。那么在获取图片路径时是可以实现自动获取的</p>
<p>缺点：因为每个的 Snipaste 的设置可能个有不同，因此换用户时，需要修改程序的规制。</p>
<p>用 python 编程，获取图片路径，ORC 来识别图片文字。设计一个 GUI 来显示识别的文字，和交互按钮来供用户进行下一步的操作。</p>
<h3 id="实现代码">实现代码:</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 Tkinter 界面</span></span><br><span class="line">root = tkinter.Tk()</span><br><span class="line">root.title(<span class="string">&quot;OCR图片转文字&quot;</span>)</span><br><span class="line"><span class="comment"># 获取屏幕宽度和高度</span></span><br><span class="line">screen_width = root.winfo_screenwidth()</span><br><span class="line">screen_height = root.winfo_screenheight()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算窗口的位置</span></span><br><span class="line">x = (screen_width - <span class="number">500</span>) // <span class="number">2</span></span><br><span class="line">y = (screen_height - <span class="number">300</span>) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗口的位置和大小</span></span><br><span class="line">root.geometry(<span class="string">&quot;500x300+&#123;&#125;+&#123;&#125;&quot;</span>.<span class="built_in">format</span>(x, y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义文本区域</span></span><br><span class="line">text = tkinter.Text(root, font=(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">10</span>, <span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">text.place(x=<span class="number">0</span>, y=<span class="number">0</span>, width=<span class="number">350</span>, height=<span class="number">300</span>)</span><br><span class="line">text.config(fg=<span class="string">&quot;black&quot;</span>)</span><br><span class="line">text.insert(<span class="string">&quot;end&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义标签1</span></span><br><span class="line">lab_one = tkinter.Label(root, text=<span class="string">&#x27;URL:&#x27;</span>, font=(<span class="string">&quot;Arial&quot;</span>, <span class="number">16</span>, <span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">lab_one.place(x=<span class="number">360</span>, y=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义文本区域</span></span><br><span class="line">entry_id = tkinter.Entry(root, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">entry_id.place(x=<span class="number">410</span>, y=<span class="number">30</span>)</span><br><span class="line">entry_id.insert(<span class="string">&quot;end&quot;</span>,<span class="string">&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义标签2</span></span><br><span class="line">lab_now = tkinter.Label(root, text=<span class="string">&#x27;0&#x27;</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">lab_now.place(x=<span class="number">450</span>, y=<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义获取日期函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data</span>():</span><br><span class="line">    y = <span class="string">&#x27;_&#x27;</span> + <span class="built_in">str</span>(datetime.datetime.now().year)</span><br><span class="line">    m = <span class="string">&#x27;-&#x27;</span> + <span class="built_in">str</span>(datetime.datetime.now().month) + <span class="string">&#x27;-&#x27;</span></span><br><span class="line">    d = <span class="built_in">str</span>(datetime.datetime.now().day) + <span class="string">&quot;_&quot;</span></span><br><span class="line">    <span class="keyword">return</span> y + m + d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义按钮点击函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">button_click</span>():</span><br><span class="line">    url=entry_id.get()</span><br><span class="line">    <span class="keyword">if</span>(url==<span class="string">&#x27;-1&#x27;</span>):</span><br><span class="line">        url=<span class="built_in">str</span>(<span class="built_in">int</span>(lab_now.cget(<span class="string">&quot;text&quot;</span>))+<span class="number">1</span>)</span><br><span class="line">        lab_now.config(text=url)</span><br><span class="line">    <span class="keyword">elif</span>(<span class="built_in">int</span>(url)&gt;<span class="built_in">int</span>(lab_now.cget(<span class="string">&quot;text&quot;</span>))):</span><br><span class="line">        lab_now.config(text=url)</span><br><span class="line">    image_url=<span class="string">&#x27;E:\\截图\\Orange&#x27;</span>+data()+url+<span class="string">&quot;.png&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(image_url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        image=Image.<span class="built_in">open</span>(image_url)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        lab_now.config(text=<span class="built_in">str</span>(<span class="built_in">int</span>(url)-<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 使用中文和英文的 OCR 识别，使用单列模式进行OCR识别</span></span><br><span class="line">    out = pytesseract.image_to_string(image, lang=<span class="string">&quot;chi_sim+eng&quot;</span>, config=<span class="string">&quot;--psm 6&quot;</span>)</span><br><span class="line"></span><br><span class="line">    text.delete(<span class="string">&quot;1.0&quot;</span>,<span class="string">&quot;end&quot;</span>)</span><br><span class="line">    text.insert(<span class="string">&quot;1.0&quot;</span>,out)</span><br><span class="line"></span><br><span class="line">button1=tkinter.Button(root,text=<span class="string">&quot;获取&quot;</span>,font=(<span class="string">&quot;Arial&quot;</span>,<span class="number">16</span>,<span class="string">&#x27;bold&#x27;</span>),command=button_click)</span><br><span class="line">button1.place(x=<span class="number">360</span>,y=<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 点击next按钮事件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">click_next</span>():</span><br><span class="line">    entry_id.delete(<span class="number">0</span>,<span class="string">&quot;end&quot;</span>)</span><br><span class="line">    entry_id.insert(<span class="number">0</span>,<span class="string">&quot;-1&quot;</span>)</span><br><span class="line">    <span class="comment"># print(entry_id.get())</span></span><br><span class="line">    button_click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动向前按钮</span></span><br><span class="line">button_go=tkinter.Button(root,text=<span class="string">&quot;max_next&quot;</span>,font=(<span class="string">&quot;微软雅黑&quot;</span>,<span class="number">10</span>,<span class="string">&#x27;bold&#x27;</span>),command=click_next)</span><br><span class="line">button_go.place(x=<span class="number">360</span>,y=<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>OCR</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 高级</title>
    <url>/2025/09/15/Mysql%20%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h1>Mysql 高级</h1>
<h2 id="配置">配置</h2>
<ul>
<li><strong>配置文件路径</strong><br>
<code>/etc/mysql/conf.d</code></li>
<li>以<code>.cnf</code>结尾的可以被mysql加载</li>
<li><strong>配置文件节点</strong><br>
在配置文件中,配置项写在<code>[mysqld]</code>或<code>[mysql]</code>下,分别代表服务端和客户端配置</li>
</ul>
<h3 id="字符集">字符集</h3>
<p>MySQL 8版本之前，默认字符集为 latin1（ISO-8859-1） ，不支持中文，使用前必须设置字符集为utf8（utf8mb3）或utf8mb4。从MySQL 8开始，数据库的默认字符集为 utf8mb4 ，从而避免中文乱码的问题。</p>
<p><code> SHOW VARIABLES LIKE '%char%'</code>;</p>
<p>utf8与utf8mb4</p>
<figure class="highlight plaintext"><figcaption><span>字符集表示一个字符需要使用1～4个字节，但是我们常用的一些字符使用1～3个字节就可以表示了。而字符集表示一个字符所用的最大字节长度，在某些方面会影响系统的存储和性能，所以设计MySQL的设计者偷偷的定义了两个概念：</span></figcaption><table><tr><td class="code"><pre><span class="line">utf8mb3 ：阉割过的 utf8 字符集，只使用1～3个字节表示字符。（无法存储emoji表情）</span><br><span class="line">MySQL5.7中的utf8是utf8mb3字符集</span><br><span class="line">utf8mb4 ：正宗的 utf8 字符集，使用1～4个字节表示字符。</span><br><span class="line">MySQL8.0中的utf8是utf8mb4字符集</span><br></pre></td></tr></table></figure>
<h3 id="大小写">大小写</h3>
<ul>
<li><strong>Windows环境：</strong></li>
</ul>
<p>全部不区分大小写</p>
<ul>
<li><strong>Linux环境：</strong></li>
</ul>
<p>1、数据库名、表名、表的别名、变量名严格区分大小写；</p>
<p>2、列名与列的别名不区分大小写。</p>
<p>3、关键字、函数名称不区分大小写；</p>
<ul>
<li><strong>设置linux不区分大小写</strong></li>
</ul>
<ol>
<li>在配置文件中设置<br>
<code>lower_case_table_names=1 </code></li>
<li>Docker容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 3309:3306 \</span><br><span class="line">-v /atguigu/mysql/mysql8/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /atguigu/mysql/mysql8/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name atguigu-mysql8 \</span><br><span class="line">--restart=always \</span><br><span class="line">mysql:8.0.29 --lower-case-table-names=1</span><br></pre></td></tr></table></figure>
<h3 id="sql-mode">sql_mode</h3>
<ul>
<li>
<p><strong>宽松模式：</strong><br>
执行错误的SQL或插入不规范的数据，也会被接受，并且不报错。</p>
</li>
<li>
<p><strong>严格模式：</strong><br>
执行错误的SQL或插入不规范的数据，会报错。MySQL5.7版本开始就将sql_mode默认值设置为了严格模式。</p>
</li>
<li>
<p><strong>查看和设置sql_mode</strong></p>
<ul>
<li>
<p><strong>查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@session</span>.sql_mode; </span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.sql_mode; </span><br><span class="line"><span class="comment">-- 或者 </span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;sql_mode&#x27;</span>; <span class="comment">--session级别</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>修改</strong></p>
<ol>
<li>临时修改</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> sql_mode <span class="operator">=</span> <span class="string">&#x27;mode1,model2,...&#x27;</span>; <span class="comment">--全局，要重新启动客户端生效，重启MySQL服务后失效</span></span><br><span class="line"><span class="keyword">SET</span> SESSION sql_mode <span class="operator">=</span> <span class="string">&#x27;mode1,model2,...&#x27;</span>; <span class="comment">--当前会话生效效，关闭当前会话就不生效了。可以省略SESSION关键字</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置文件修改</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="keyword">sql</span><span class="operator">-</span>mode <span class="operator">=</span> &quot;mode1,model2,...&quot;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>sql_mode常用值</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、STRICT_TRANS_TABLES：启用严格模式，要求插入或更新操作中的数据类型必须与表定义的数据类型完全匹配，否则会抛出错误。</span><br><span class="line"><span class="number">2</span>、NO_ZERO_IN_DATE：禁止在日期中的月份和日字段使用零值，但<span class="string">&#x27;0000-00-00&#x27;</span>是例外，否则会抛出错误。</span><br><span class="line"><span class="number">3</span>、NO_ZERO_DATE：禁止在日期中的年、月、日字段使用零值，例如<span class="string">&#x27;0000-00-00&#x27;</span>或<span class="string">&#x27;0000-00-00 00:00:00&#x27;</span>，否则会抛出错误。</span><br><span class="line"><span class="number">4</span>、ERROR_FOR_DIVISION_BY_ZERO：当除数为零时，执行除法运算会抛出错误。</span><br><span class="line"><span class="number">5</span>、ONLY_FULL_GROUP_BY：要求<span class="keyword">GROUP</span> <span class="keyword">BY</span>子句中的列必须出现在<span class="keyword">SELECT</span>列表中，或者是聚合函数的参数，否则会抛出错误。</span><br><span class="line"><span class="number">6</span>、ANSI_QUOTES：启用ANSI_QUOTES模式，要求使用双引号来引用字符串，而不是单引号。</span><br><span class="line">除了上述常见的sql_mode值，还有其他一些选项可以根据需要进行配置。</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="逻辑架构-面试">逻辑架构[面试]</h2>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/06e13c61c21738a780a701689e2c142b.png" alt=""></p>
<ul>
<li>
<p><strong>mysql客户端</strong></p>
</li>
<li>
<p><strong>mysql服务器端</strong></p>
<ul>
<li>
<p><strong>connection连接层</strong>------------------&gt;用户身份的认证和授权—维护<code>Connnection</code>连接池</p>
<ul>
<li>认证</li>
<li>connection连接池</li>
</ul>
</li>
<li>
<p><strong>Service服务层</strong></p>
<ul>
<li>
<p>查询缓存(query_cache)</p>
<p>缓存select查询语句和结果</p>
</li>
<li>
<p>解析器(parser)</p>
<p>负责对sql进行词法和语法解析</p>
<p>词法解析：检查sgl语句中的关键字是否正确</p>
<p>语法解析：把手写的SQL转换机读SQL，并生成SQL执行树</p>
</li>
<li>
<p>预处理器(preprocessor)</p>
<p>负责语义解析，并校验权限，生成新的SQL的执行树</p>
</li>
<li>
<p>优化器(Optimize)</p>
<p>在不改变查询结果的前提下，对SQL语句进行优化，<br>
比如：生成SQL执行计划，选择合适的索引，选择合适的驱动表,将子查询转化为连表查询,  选择开销最小的路径,  最终生成sql执行计划.</p>
</li>
</ul>
</li>
<li>
<p><strong>Pluggable Storage Engine引擎层</strong></p>
<p>引擎:	<code>Innodb</code>	<code>MyISAM	</code>	<code>MEMORY	</code>	<code>BlackHole</code></p>
<p>可插拔引擎层</p>
<p>功能:	负责数据的具体查找，以及数据在磁盘和内存之间的交互</p>
</li>
<li>
<p><strong>存储层</strong></p>
<p>功能:	负责数据在磁盘的组织形式</p>
<p>日志信息:	<code>redolog</code>、<code>unolog</code>、<code>binarylog</code>、<code>slowlog</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="查询的执行流程">查询的执行流程</h3>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/fcd2df398cac24c7f59718c618d10129.png" alt=""></p>
<h3 id="查看sql执行流程-profiling">查看sql执行流程 profiling</h3>
<ul>
<li>
<p>profiling</p>
</li>
<li>
<p>查看是否开启</p>
<ul>
<li><code>SHOW VARIABLES LIKE '%profiling%';</code></li>
</ul>
</li>
<li>
<p>开启profiling</p>
<ul>
<li><code>SET profiling = 1;  -- profiling = ON</code></li>
<li><code> profiling = ON</code>     配置文件</li>
</ul>
</li>
<li>
<p>查询</p>
<ul>
<li>
<p>显示最近的几次查询：<code>SHOW PROFILES;</code></p>
</li>
<li>
<p>查看最后一个SQL的执行流程：<code>SHOW PROFILE;</code></p>
</li>
<li>
<p>查看指定SQL的执行流程：查询指定的 Query ID:    <code>SHOW PROFILE FOR QUERY 3;</code></p>
</li>
<li>
<p>查询更丰富的内容:  <code> SHOW PROFILE cpu,block io FOR QUERY 3;</code></p>
<ul>
<li>
<p>参数</p>
<ul>
<li>
<p><code>ALL：</code>显示所有的开销信息。</p>
</li>
<li>
<p><code>BLOCK IO</code>：显示块IO开销。</p>
</li>
<li>
<p><code>CONTEXT SWITCHES</code>：上下文切换开销。</p>
</li>
<li>
<p><code>CPU</code>：显示CPU开销信息。</p>
</li>
<li>
<p><code>IPC</code>：显示发送和接收开销信息。</p>
</li>
<li>
<p><code>MEMORY</code>：显示内存开销信息。</p>
</li>
<li>
<p><code>PAGE FAULTS</code>：显示页面错误开销信息。</p>
</li>
<li>
<p><code>SOURCE</code>：显示和Source_function，Source_file，Source_line相关的开销信息。</p>
</li>
<li>
<p><code>SWAPS</code>：显示交换次数开销信息。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="存储引擎">存储引擎</h2>
<h3 id="查看与设置引擎">查看与设置引擎</h3>
<ul>
<li>
<p>查看存储引擎:	<code>show engines</code></p>
<p>mysql 默认存储引擎:	<code>innoDB</code></p>
<p>查看每个表的存储引擎: <code>show table status from 库名;</code></p>
</li>
<li>
<p>查看默认的存储引擎:  <code>SHOW VARIABLES LIKE '%default_storage_engine%';</code></p>
</li>
<li>
<p>设置存储引擎</p>
<ul>
<li>
<p>设置默认存储引擎: 	<code>SET DEFAULT_STORAGE_ENGINE=MyISAM;</code> 	或配置文件:	<code>default-storage-engine=MyISAM</code></p>
</li>
<li>
<p>为表设置不同的存储引擎:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名( 建表语句 ) ENGINE <span class="operator">=</span> 存储引擎名称;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 ENGINE <span class="operator">=</span> 存储引擎名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例如：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(id <span class="type">INT</span>, `name` <span class="type">VARCHAR</span>(<span class="number">16</span>),age <span class="type">INT</span>,dept <span class="type">INT</span>) ENGINE <span class="operator">=</span> MyISAM;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="存储引擎介绍">存储引擎介绍</h3>
<p><code>1. InnoDB存储引擎</code></p>
<ul>
<li>
<p>InnoDB是MySQL的默认事务型引擎，它被设计用来<code>处理大量的短期(short-lived)事务</code>。可以确保事务的完整提交(Commit)和回滚(Rollback)。</p>
</li>
<li>
<p>除非有非常特别的原因需要使用其他的存储引擎，否则<code>应该优先考虑InnoDB引擎</code>。</p>
</li>
<li>
<p>InnoDB不仅缓存索引还要缓存真实数据， 对内存要求较 高 ，而且内存大小对性能有决定性的影响。</p>
</li>
</ul>
<p><code>2. MyISAM存储引擎</code></p>
<ul>
<li>
<p>MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，但<code>MyISAM不支持事务和行级锁</code>，有一个毫无疑问的缺陷就是崩溃后无法安全恢复。</p>
</li>
<li>
<p>优势是访问的 速度快 ，对事务完整性没有要求或者以SELECT、INSERT为主的应用。</p>
</li>
<li>
<p>MyISAM只缓存索引，不缓存真实数据。</p>
</li>
</ul>
<p><code>3. Archive引擎</code></p>
<ul>
<li><code>Archive档案存储引擎只支持INSERT和SELECT操作</code>。</li>
<li>Archive表适合日志和数据采集（档案）类应用。</li>
<li>根据英文的测试结论来看，Archive表比MyISAM表要小大约75%，比支持事务处理的InnoDB表小大约83%。</li>
</ul>
<p><code>4. Blackhole引擎（黑洞）</code></p>
<ul>
<li><code>Blackhole引擎没有实现任何存储机制，它会丢弃所有插入的数据，不做任何保存</code>。</li>
<li>但服务器会记录Blackhole表的日志，所以可以用于复制数据到备库，或者简单地记录到日志。但这种应用方式会碰到很多问题，因此并不推荐。</li>
</ul>
<p><code>5. CSV引擎</code></p>
<ul>
<li><code>CSV引擎可以将普通的CSV文件作为MySQL的表来处理，但不支持索引</code>。</li>
<li>CSV引擎可以作为一种数据交换的机制，非常有用。</li>
<li>CSV存储的数据直接可以在操作系统里，用文本编辑器，或者excel读取。</li>
</ul>
<p><code>6. Memory引擎</code></p>
<ul>
<li>如果需要快速地访问数据，并且这些数据不会被修改，重启以后丢失也没有关系，那么使用Memory表是非常有用。</li>
<li>Memory表至少比MyISAM表要快一个数量级。</li>
</ul>
<p><code>7. Federated引擎</code></p>
<ul>
<li><code>Federated引擎是访问其他MySQL服务器的一个代理（跨库关联查询）</code>，尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题，因此默认是禁用的。</li>
</ul>
<h3 id="MyISAM和InnoDB的区别-常见面试题">MyISAM和InnoDB的区别[常见面试题]</h3>
<table>
<thead>
<tr>
<th>对比项</th>
<th>InnoDB</th>
<th>MyISAM</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否支持事务</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>是否支持分布式事务(XA协议)</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>是否支持行锁</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>是否支持表锁</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>是否支持外键</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>增删改的性能</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>读的性能</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>适用场景</td>
<td>主机(写)</td>
<td>从机(读)</td>
</tr>
<tr>
<td>是否聚簇索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>是否支持MVCC</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>数据在磁盘的组织形式</td>
<td>.ibd (index、data、表结构)</td>
<td>.MYI(索引)、.MYD(数据)、.sdi（表结构）</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>每张表对应一个数据库引擎。</span><br><span class="line">  <span class="keyword">show</span> <span class="keyword">table</span> status <span class="keyword">from</span> 库名;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">create</span> <span class="keyword">table</span> 表名(..) engine<span class="operator">=</span>存储引擎名;</span><br><span class="line">  <span class="keyword">alter</span> <span class="keyword">table</span> 表名 engine<span class="operator">=</span>存储引擎名;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">show</span> engines;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>如何查看某张表的数据库引擎？</span><br><span class="line">   <span class="keyword">show</span> <span class="keyword">table</span> status <span class="keyword">from</span> 数据库名;</span><br><span class="line">   </span><br><span class="line"><span class="number">3.</span>如何修改一张表对应的数据库引擎</span><br><span class="line">  <span class="keyword">alter</span> <span class="keyword">table</span> 表名  engine<span class="operator">=</span> <span class="string">&#x27;数据库引擎&#x27;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="number">4.</span>如何查看数据库及表存在磁盘的哪个目录？</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="连表">连表</h2>
<ul>
<li>
<p>横行连接</p>
<ul>
<li><code>join</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">left</span><span class="operator">|</span><span class="keyword">right</span><span class="operator">|</span><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line"><span class="keyword">on</span> 条件</span><br><span class="line"><span class="keyword">where</span> 过滤条件</span><br></pre></td></tr></table></figure>
<ul>
<li><code>from</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span></span><br><span class="line"><span class="keyword">where</span> 连接条件</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>纵向连接:</p>
<p>要求:	属性个数一致,类型一致</p>
<ul>
<li>
<p><strong><code>UNION</code></strong>：去除重复的记录后再合并结果。</p>
</li>
<li>
<p><strong><code>UNION ALL</code></strong>：保留所有记录，包括重复的。</p>
</li>
</ul>
</li>
</ul>
<h2 id="MySQL索引介绍">MySQL索引介绍</h2>
<h3 id="什么是索引">什么是索引</h3>
<ul>
<li>本质:	数据结构</li>
<li>理解: 	对每行数据建立索引, 维护一个二叉查找树,查找数据时根据索引查找.</li>
<li>存储:	磁盘中</li>
</ul>
<h3 id="索引优缺点">索引优缺点</h3>
<ul>
<li>优点:
<ul>
<li>提高了检索速度,降低数据库的IO成本</li>
<li>通过索引对数据进行排序, 降低了排序成本,降低了CPU的消耗</li>
</ul>
</li>
<li>缺点:
<ul>
<li>在更新表时, 还要更新索引信息, 降低了更新速度,</li>
<li>索引也是一张表,占用一定空间</li>
</ul>
</li>
</ul>
<h3 id="索引分类">索引分类</h3>
<ul>
<li>从功能逻辑上划分，索引主要有4种，分别是<code>普通索引</code>、<code>唯一索引</code>、<code>主键索引</code>、<code>全文索引</code>。</li>
<li>按照作用字段个数划分，索引可以分为<code>单列索引</code>和<code>联合索引</code>。</li>
<li>按照物理实现方式划分，索引可以分为2种，分别是<code>聚簇索引</code>和<code>非聚簇索引</code></li>
</ul>
<h3 id="B树">B树</h3>
<ul>
<li><code>B-Tree即B树，Balance Tree，平衡树,B树就是典型的多叉树，它的高度远小于平衡二叉树的高度（多路平衡二叉树）</code>。</li>
<li><code>B树的阶：</code>节点的最多子节点个数。</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/b8e1bc0d38bda6a1ed246ef1734ac733.png" alt=""></p>
<h3 id="MySQL索引结构-B-树">MySQL索引结构 B+树</h3>
<ul>
<li>理解:
<ul>
<li>叶子节点存储数据项, 每一个节点为一页</li>
<li>非叶子节点存储目录页:    目录项的最大值和最小值,   目录页也可以存在目录页,每一页大小页为16kb.</li>
<li>同一层之间存在互相 指向的指针</li>
</ul>
</li>
<li>InooDB一页:16kb</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/f86eb072b9b517624f45300da10e4a8b.png" alt=""></p>
<h3 id="B树和B-树区别">B树和B+树区别</h3>
<table>
<thead>
<tr>
<th>特性</th>
<th>B树</th>
<th>B+树</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>数据存储</strong></td>
<td>数据存储在内部节点和叶子节点中</td>
<td>数据仅存储在叶子节点</td>
</tr>
<tr>
<td><strong>叶子节点链接</strong></td>
<td>叶子节点之间没有链表连接</td>
<td>叶子节点通过指针形成双向链表链表</td>
</tr>
<tr>
<td><strong>查找路径</strong></td>
<td>查找路径可以在内部节点结束</td>
<td>查找必须到达叶子节点</td>
</tr>
<tr>
<td><strong>树的高度</strong></td>
<td>相对较高</td>
<td>相对较低</td>
</tr>
<tr>
<td><strong>范围查询</strong></td>
<td>效率较低</td>
<td>效率较高，顺序遍历方便</td>
</tr>
<tr>
<td><strong>磁盘I/O效率</strong></td>
<td>较低，内部节点存储数据和索引</td>
<td>较高，内部节点只存储索引信息</td>
</tr>
</tbody>
</table>
<h3 id="聚簇索引">聚簇索引</h3>
<ul>
<li>
<p>也叫主键索引</p>
</li>
<li>
<p><strong>特点</strong>:</p>
<ul>
<li>索引和数据保存在同一个B+树中.</li>
<li><code>页内的记录</code>是按照<code>主键</code>的大小顺序排成一个<code>单向链表</code> 。(页内物理上是顺序排列的,只是逻辑上看起来像链表)</li>
<li>页与页之间也是通过主键(索引)大小形成双向链表</li>
<li>非叶子节点存储的是主键(索引)+页号</li>
<li>叶子节点存储的是完整记录</li>
</ul>
</li>
<li>
<p><strong>优点</strong>:</p>
<ul>
<li>完整数据和索引存储在同一个B+树中,不需要回表,比非聚簇索引查询快</li>
<li>对于主键(聚簇索引)的排序查找和范围查找快</li>
<li>按照聚簇索引查找一定范围数据时,由于数据之间形成链表,节省了IO操作,</li>
</ul>
</li>
<li>
<p><strong>缺点</strong>:</p>
<ul>
<li>
<p>由于插入是按照主键(索引)进行插入,如果主键(索引)不按照顺序插入时,会导致页出现分裂,响应性能.</p>
<p>解决办法: 插入时控制主键自增且不更新主键.  (雪花算法)</p>
</li>
<li>
<p>更新主键的代价很高 ，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义<code>主键为不可更新</code>。</p>
</li>
</ul>
</li>
<li>
<p><strong>限制：</strong></p>
<ul>
<li>InnoDB支持聚簇索引, MyISAM不支持.</li>
<li>由于数据的物理顺序排列只能有一种(页内),  而聚簇索引又决定了数据的顺序,所以,聚簇索引只能有一个</li>
<li>如果没有为表定义主键，InnoDB会选择<code>非空的唯一索引列代替</code>。如果没有这样的列，InnoDB会<code>隐式的定义一个主键</code>作为聚簇索引。</li>
<li>为了充分利用聚簇索引的聚簇特性，InnoDB中表的<code>主键应选择有序的id</code>，不建议使用无序的id，比如UUID、MD5、HASH、字符串作为主键，无法保证数据的顺序增长。</li>
</ul>
</li>
</ul>
<h3 id="非聚簇索引">非聚簇索引</h3>
<ul>
<li>
<p>也叫二级索引	辅助索引</p>
</li>
<li>
<p><strong>特点</strong>:</p>
<ul>
<li>
<p>叶子节点存储的数据为 索引和主键,并不是完整的数据.</p>
</li>
<li>
<p>查找非<code>覆盖索引</code>时需要回表</p>
<p><code>回表</code>: 因为非聚簇索引的叶子节点中不包含完整数据,只有索引和主键,因此,在通过非聚簇索引查找到主键之后,InnoDB需要通过主键查找聚簇索引来获取完整的数据.(MyISAM的非聚簇索引中存储的数据为索引和数据的地址值,在查找之后,也需要通过地址值拿到完整的数据)</p>
</li>
<li>
<p>索引非主键</p>
</li>
<li>
<p>可以有多个非聚簇索引</p>
</li>
</ul>
</li>
<li>
<p><strong>问题</strong>:</p>
<ul>
<li>
<p>为什么非聚簇索引不存储完整数据呢?</p>
<p>答: 非聚簇索引不影响数据的物理顺序,所以可以有多个,如果每个非聚簇索引都存储完整数据,占用的空间就非常大.</p>
</li>
</ul>
</li>
</ul>
<h4 id="聚簇索引-vs-非聚簇索引：对比总结">聚簇索引 vs 非聚簇索引：对比总结</h4>
<table>
<thead>
<tr>
<th>特性</th>
<th>聚簇索引</th>
<th>非聚簇索引</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>数据存储</strong></td>
<td>数据和索引一起存储</td>
<td>数据和索引分开存储</td>
</tr>
<tr>
<td><strong>索引结构</strong></td>
<td>叶子节点存储数据</td>
<td>叶子节点存储指向数据的指针(Row id 或主键)</td>
</tr>
<tr>
<td><strong>数据顺序</strong></td>
<td>数据按索引顺序物理存储</td>
<td>数据的物理顺序与索引无关</td>
</tr>
<tr>
<td><strong>索引数量</strong></td>
<td>一个表只能有一个聚簇索引</td>
<td>一个表可以有多个非聚簇索引</td>
</tr>
<tr>
<td><strong>查询效率</strong></td>
<td>直接读取数据，效率较高</td>
<td>需要先找到指针，再查找数据，效率较低</td>
</tr>
<tr>
<td><strong>范围查询</strong></td>
<td>高效</td>
<td>效率相对较低</td>
</tr>
<tr>
<td><strong>占用空间</strong></td>
<td>占用较少，因为数据与索引合并存储</td>
<td>占用较大，需要额外的指针存储空间</td>
</tr>
<tr>
<td><strong>更新插入</strong></td>
<td>可能导致页分裂或重排，影响较大</td>
<td>对数据插入影响较小</td>
</tr>
<tr>
<td><strong>应用场景</strong></td>
<td>适合主键或范围查询</td>
<td>适合优化特定列的查询</td>
</tr>
</tbody>
</table>
<h3 id="联合索引">联合索引</h3>
<ul>
<li>
<p>组成索引的有多个字段,</p>
</li>
<li>
<p>本质上也是二级索引</p>
</li>
<li>
<p><strong>叶子节点</strong>：对于非聚簇索引（联合索引），叶子节点存储的是<strong>索引字段的值</strong>和指向实际数据行的<strong>主键值</strong>（InnoDB）或<strong>指针</strong>（MyISAM）。</p>
</li>
<li>
<p>非叶子节点存储的是<strong>部分索引字段的值</strong>以及指向下一级节点的<strong>指针</strong>（页号或页地址）。</p>
<ul>
<li>先按照第一个字段排,如果一样,则根据第二个.</li>
</ul>
<p>非叶子节点通常只存储部分索引字段的值，不需要存储完整的联合索引字段，它的目的是帮助快速定位叶子节点。</p>
</li>
</ul>
<h3 id="覆盖索引">覆盖索引</h3>
<p>当一个索引包含了查询所需的所有列时，这个索引就称为<strong>覆盖索引</strong>。换句话说，如果查询的<strong>SELECT</strong>、<strong>WHERE</strong>、<strong>GROUP BY</strong>、<strong>ORDER BY</strong>语句中涉及的所有字段都在某个索引中，数据库可以只通过索引完成查询，而不需要再去表中读取数据行。</p>
<h3 id="MyISAM中的索引">MyISAM中的索引</h3>
<ul>
<li>
<p>MyISAM引擎使用 B+Tree 作为索引结构，<code>叶子节点的data域存放的是数据记录的地址</code> 。</p>
</li>
<li>
<p>下图是MyISAM索引的原理图<code>（索引和数据分开存储，是非聚簇索引）</code>：</p>
</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/fa7f538a4e9af7de236026f810baa4b2.png" alt=""></p>
<h3 id="MyISAM与InnoDB对比">MyISAM与InnoDB对比</h3>
<ul>
<li>
<p>InnoDB的数据文件本身就是索引文件，而MyISAM索引文件和数据文件是分离的：</p>
<ul>
<li>InnoDB的表在磁盘上存储在以下文件中： <code>.ibd（表结构、索引和数据都存在一起,MySQL5.7表结构放在.frm中）</code></li>
<li>MyISAM的表在磁盘上存储在以下文件中：  <code>*.sdi（描述表结构，MySQL5.7是.frm）</code>、<code>*.MYD（数据）</code>，<code>*.MYI（索引）</code></li>
</ul>
</li>
<li>
<p>InnoDB中主键索引是聚簇索引，叶子节点中存储完整的数据记录；其他索引是非聚簇索引，存储相应记录主键的值 。</p>
</li>
<li>
<p>InnoDB要求表必须有主键 （ MyISAM可以没有 ）。如果没有显式指定，则MySQL系统会自动选择一个可以<code>非空且唯一</code>标识数据记录的列作为主键。如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键。</p>
</li>
<li>
<p>MyISAM中无论是主键索引还是非主键索引都是非聚簇的，叶子节点记录的是数据的地址。</p>
</li>
<li>
<p><code>MyISAM的回表操作是十分快速的</code>，因为是拿着地址偏移量直接到文件中取数据的，反观InnoDB是通过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。</p>
</li>
</ul>
<h3 id="索引操作">索引操作</h3>
<ul>
<li>
<p><strong>创建</strong></p>
<p>创建表时:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">creat <span class="keyword">table</span> customer(</span><br><span class="line">	id <span class="type">int</span> auto_increment,</span><br><span class="line">    customer_no <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    customer_name <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">primary</span> key(id),</span><br><span class="line">    <span class="keyword">unique</span> index uk_no(customer_no)</span><br><span class="line">    key idx_customer_name(cusomer_name); <span class="operator">/</span><span class="operator">/</span>如果不指定名称,与名明一致</span><br><span class="line">    key idx_customer_no_name(cusomer_no,customer_name)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<ul>
<li>创建表时指定主键,	自动创建主键索引  <code>primay key</code></li>
<li><code>unique index uk_no(customer_no)</code> — 唯一索引( 当<strong>有主键索引</strong>时,为<strong>非聚簇索引</strong>,<strong>没有主键索引</strong>时 ,为<strong>聚簇索引</strong>)</li>
<li><code>Key idx_name (customer_name)</code>   — 普通索引</li>
<li><code>key idx_name_no(,customer_name,customer_no)</code>  — 二级索引</li>
</ul>
<blockquote>
<p>唯一索引:</p>
<p><strong>唯一索引</strong>在 MySQL 的 <strong>InnoDB</strong> 引擎中仍然<strong>可以包含 <code>NULL</code> 值</strong></p>
<p><strong>没有主键时的聚簇索引</strong>：</p>
<ul>
<li>如果表没有主键，但有一个唯一索引，InnoDB 会选择该唯一索引作为聚簇索引。虽然唯一索引允许多个 <code>NULL</code> 值，但如果该唯一索引被选为聚簇索引，InnoDB 会要求该索引列中所有值必须是唯一且<strong>不能为 <code>NULL</code></strong>。</li>
</ul>
</blockquote>
<p>创建表后:</p>
<p><code>creat</code>:</p>
<ul>
<li><code>create index 索引名 on 表名(colum_name_list)</code></li>
<li><code>create unique index 索引名 on 表名(colum_name_list)</code></li>
</ul>
<p><code>alter</code>:</p>
<ul>
<li><code>alter table customer add index idx_cusomer_name(cusomer_name)</code></li>
<li><code>alter table customer add unique idx_cusomer_name(cusomer_name)</code></li>
<li><code>alter table customer add primary key(cusomer_name)</code></li>
<li><code>alter table customer add index idx_cusomer_name_no(cusomer_name,cusomer_no)</code></li>
</ul>
</li>
<li>
<p><strong>查看</strong></p>
<ul>
<li><code>show index from 表名</code></li>
</ul>
</li>
<li>
<p><strong>删除</strong></p>
<blockquote>
<p>注意: 删除主键索引  ,当主键有自增时, 不能删除, 必须去掉自增 (自增的必须为主键)</p>
</blockquote>
<ul>
<li>
<p><code>alter table customer drop index</code> 普通索引 | 唯一索引</p>
</li>
<li>
<p><code>alter table customer drop primary key</code>;</p>
</li>
<li>
<p><code>drop index 索引名 on 表名</code>  不能删除主键索引</p>
</li>
</ul>
</li>
<li>
<p><strong>总结</strong>:</p>
<table>
<thead>
<tr>
<th><strong>操作类型</strong></th>
<th><strong>操作</strong></th>
<th><strong>SQL 语句</strong></th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>创建索引</strong></td>
<td>创建主键索引</td>
<td><code>PRIMARY KEY (id)</code></td>
<td>创建表时自动创建，且为聚簇索引</td>
</tr>
<tr>
<td></td>
<td>创建唯一索引</td>
<td><code>UNIQUE INDEX uk_no (customer_no)</code></td>
<td>唯一索引，若无主键时可能作为聚簇索引</td>
</tr>
<tr>
<td></td>
<td>创建普通索引</td>
<td><code>KEY idx_customer_name (customer_name)</code></td>
<td>普通索引</td>
</tr>
<tr>
<td></td>
<td>创建复合索引</td>
<td><code>KEY idx_customer_no_name (customer_no, customer_name)</code></td>
<td>复合索引，二级索引</td>
</tr>
<tr>
<td></td>
<td>使用 <code>CREATE INDEX</code> 创建普通索引</td>
<td><code>CREATE INDEX idx_customer_name ON customer (customer_name)</code></td>
<td>创建后可以通过 <code>SHOW INDEX</code> 查看</td>
</tr>
<tr>
<td></td>
<td>使用 <code>CREATE INDEX</code> 创建唯一索引</td>
<td><code>CREATE UNIQUE INDEX idx_customer_name ON customer (customer_name)</code></td>
<td>唯一索引允许 <code>NULL</code> 值</td>
</tr>
<tr>
<td></td>
<td>使用 <code>ALTER TABLE</code> 添加普通索引</td>
<td><code>ALTER TABLE customer ADD INDEX idx_customer_name (customer_name)</code></td>
<td>使用 <code>ALTER TABLE</code> 添加索引</td>
</tr>
<tr>
<td></td>
<td>使用 <code>ALTER TABLE</code> 添加唯一索引</td>
<td><code>ALTER TABLE customer ADD UNIQUE idx_customer_name (customer_name)</code></td>
<td>添加唯一索引</td>
</tr>
<tr>
<td></td>
<td>使用 <code>ALTER TABLE</code> 添加主键索引</td>
<td><code>ALTER TABLE customer ADD PRIMARY KEY (customer_name)</code></td>
<td>添加主键索引</td>
</tr>
<tr>
<td></td>
<td>使用 <code>ALTER TABLE</code> 添加复合索引</td>
<td><code>ALTER TABLE customer ADD INDEX idx_customer_name_no (customer_name, customer_no)</code></td>
<td>复合索引</td>
</tr>
<tr>
<td><strong>查看索引</strong></td>
<td>查看表的所有索引</td>
<td><code>SHOW INDEX FROM customer</code></td>
<td>查看表 <code>customer</code> 中的所有索引信息</td>
</tr>
<tr>
<td><strong>删除索引</strong></td>
<td>删除普通索引或唯一索引</td>
<td><code>ALTER TABLE customer DROP INDEX idx_customer_name</code></td>
<td>删除普通索引或唯一索引</td>
</tr>
<tr>
<td></td>
<td>删除主键索引</td>
<td><code>ALTER TABLE customer DROP PRIMARY KEY</code></td>
<td>如果主键有自增属性，需要先去掉自增</td>
</tr>
<tr>
<td></td>
<td>删除索引</td>
<td><code>DROP INDEX 索引名 ON 表名</code></td>
<td>不能删除主键索引</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="索引使用场景">索引使用场景 :</h3>
<p><strong>适合使用索引的清空</strong>:</p>
<ul>
<li>频繁作为where条件的字段</li>
<li>经常group by 和 order by的列</li>
<li>有唯一性的限制的列</li>
<li>多表join ,对连接字段创建索引</li>
<li>使用频繁的</li>
<li>区分度高的</li>
<li>使用字符串前缀创建索引(节省空间) : 前缀索引
<ul>
<li><code>alter table 表名 add index idx_d(address(20))</code> 以前20字符作为索引</li>
</ul>
</li>
</ul>
<p><strong>不适合创建索引的情况:</strong></p>
<ul>
<li><code>where</code>  <code> group by</code>   <code>order by</code>  里面用不到的</li>
<li>表的数据<strong>记录太少</strong></li>
<li>有大量重复数据的列  (<strong>区分度不高</strong>)</li>
<li>经常增删改的表(<strong>查询少</strong> , <strong>增删改 多</strong>)</li>
<li>不用定义冗余或重复的索引 (已经创建过的)</li>
</ul>
<h2 id="索引优化">索引优化</h2>
<h3 id="数据库优化">数据库优化</h3>
<ul>
<li>
<p>索引失效:  索引建立</p>
</li>
<li>
<p>关联查询太多JOIN（设计缺陷或不得已的需求）：<code>SQL优化</code></p>
</li>
<li>
<p>数据过多500W，2GB：分库分表</p>
</li>
<li>
<p>服务器调优及各个参数设置（缓冲、线程数等）：调整my.cnf</p>
</li>
</ul>
<h3 id="性能分析-EXPLAN">性能分析(EXPLAN)</h3>
<ul>
<li>explain : 使用EXPLAIN关键字可以<code>模拟优化器执行SQL查询语句</code>，从而知道MySQL是如何处理你的SQL语句的。<code>分析你的查询语句或是表结构的性能瓶颈</code>。</li>
<li>用发:<code> EXPLAIN + SQL语句</code></li>
</ul>
<h4 id="explain-各字段解释">explain 各字段解释</h4>
<h5 id="id">**id: **</h5>
<ul>
<li>
<p>在一个完整的查询语句中，每个SELECT关键字，都对应一个唯一的id。同时通过id也可以知道操作表的顺序。</p>
</li>
<li>
<p>id 一样:</p>
<p>对于涉及子查询的,  查询优化器可能对子查询进行优化,<strong>转为连接查询</strong>,变为一个select</p>
</li>
<li>
<p>id为null:</p>
<p>当对两张表进行  union  合并时, 会生成一张<strong>临时表</strong>,然后去重</p>
<p>对于union all 因为不会生成临时表,就不会有这个null 的id</p>
</li>
<li>
<p>执行的顺序:</p>
<ul>
<li>id如果相同，可以认为是一组，<code>从上往下顺序执行</code></li>
<li>在所有组中，<code>id值越大，越先执行</code></li>
<li>关注点：每个id号码，表示一趟独立的查询, <code>一个sql的查询趟数越少越好</code></li>
</ul>
</li>
</ul>
<h5 id="table"><strong>table:</strong></h5>
<ul>
<li>
<p>意义:</p>
<p>显示这一行的数据是关于哪张表的</p>
</li>
<li>
<p>驱动表:</p>
<p>在<strong>多表联查</strong>中,若id相同,则在前面的为<strong>驱动表(<strong>驱动表一般会进行</strong>全表查询或全索引</strong>)</p>
</li>
</ul>
<h5 id="type"><strong>type:</strong></h5>
<ul>
<li>
<p>结果值从最好到最坏依次是:</p>
<p><code>system &gt; const &gt; eq_ref &gt; ref</code> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; <code>range &gt; index &gt; ALL</code></p>
</li>
<li>
<p>比较重要的是:``system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL`</p>
</li>
<li>
<p>SQL 性能优化的目标：至少要达到 <code>range</code> 级别，要求是 <code>ref</code> 级别，最好是 <code>const</code>级别。（阿里巴巴开发手册要求）</p>
</li>
<li>
<p>结果值:</p>
<ul>
<li>**ALL: **全表扫描</li>
<li>**index:**全索引扫描。当使用<code>覆盖索引</code>，但需要扫描<code>全部的索引记录</code>时</li>
<li>**range：**只检索给定范围的行，使用一个索引来选择行。key 列显示使用了哪个索引，一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询。这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</li>
<li>**ref：**通过普通二级索引列与常量进行等值匹配时</li>
<li>**eq_ref：**连接查询时通过<code>主键</code>或不允许NULL值的<code>唯一二级索引</code>列进行等值匹配时 <strong>?</strong> 数据量级，可能会影响索引的使用！ mysql 内部的优化器！</li>
<li>**const：**根据<code>主键</code>或者<code>唯一二级索引</code>列与<code>常数</code>进行匹配时</li>
<li>**system：**MyISAM引擎中，当表中只有一条记录时。<code>（这是所有type的值中性能最高的场景）</code></li>
</ul>
</li>
</ul>
<h5 id="possible-keys-和-key"><strong>possible_keys 和 key</strong></h5>
<ul>
<li><code>possible_keys</code>表示执行查询时<code>可能用到的索引</code>，一个或多个。 查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。</li>
<li><code>keys</code>表示<code>实际使用的索引</code>。如果为NULL，则没有使用索引。</li>
</ul>
<h5 id="key-len">key_len</h5>
<p>表示索引使用的字节数，根据这个值可以判断索引的使用情况，<code>检查是否充分利用了索引，针对联合索引值越大越好。</code></p>
<ul>
<li>如何计算</li>
</ul>
<ol>
<li>先看索引上字段的类型+长度。比如：int=4 ; varchar(20) =20 ; char(20) =20</li>
<li>如果是varchar或者char这种字符串字段，视字符集要乘不同的值，比如utf8要乘 3(MySQL5.7)，如果是utf8mb4要乘4，GBK要乘2</li>
<li>varchar这种动态字符串要加2个字节</li>
<li>允许为空的字段要加1个字节</li>
</ol>
<h5 id="ref">ref</h5>
<p>显示与key中的索引进行比较的列或常量。</p>
<ul>
<li><strong>const：</strong>  与索引列进行等值比较的东西是啥，const表示一个常数</li>
<li><strong><a href="http://ref=atguigudb.t1.id">ref=atguigudb.t1.id</a></strong>   另外一个表的列</li>
</ul>
<h5 id="rows">rows</h5>
<ul>
<li>MySQL认为它执行查询时实际从索引树中查找到的行数。<code>值越小越好。</code></li>
</ul>
<h5 id="filtered">filtered</h5>
<ul>
<li>最后查询出来的数据占所有服务器端（server）检查行数（rows）的<code>百分比</code>。<code>值越大越好</code>。</li>
</ul>
<p>例如上一个例子。</p>
<h5 id="Extra">Extra</h5>
<p>包含不适合在其他列中显示但十分重要的额外信息。通过这些额外信息来<code>理解MySQL到底将如何执行当前的查询语句</code>。MySQL提供的额外信息有好几十个，这里只挑比较重要的介绍。</p>
<ul>
<li>**Using where：**使用了where，但在where上有字段没有创建索引。也可以理解为如果数据从引擎层被返回到server层进行过滤，那么就是Using where。</li>
<li>**Using filesort：**如果出现了Using filesort 说明排序没有使用上索引</li>
<li><strong>Using index：</strong><code>使用了覆盖索引</code>，表示直接访问索引就足够获取到所需要的数据，不需要通过索引回表</li>
<li>**Using index condition：**叫作  <code>Index Condition Pushdown Optimization （索引下推优化）</code>
<ul>
<li><code>如果没有索引下推（ICP）</code>，那么MySQL在存储引擎层找到满足<code>content1 &gt; 'z'</code>条件的第一条二级索引记录。<code>主键值进行回表</code>，返回完整的记录给server层，server层再判断其他的搜索条件是否成立。如果成立则保留该记录，否则跳过该记录，然后向存储引擎层要下一条记录。</li>
<li><code>如果使用了索引下推（ICP）</code>，那么MySQL在存储引擎层找到满足<code>content1 &gt; 'z'</code>条件的第一条二级索引记录。<code>不着急执行回表</code>，而是在这条记录上先判断一下所有关于<code>idx_content1</code>索引中包含的条件是否成立，也就是<code>content1 &gt; 'z' AND content1 LIKE '%a'</code>是否成立。如果这些条件不成立，则直接跳过该二级索引记录，去找下一条二级索引记录；如果这些条件成立，则执行回表操作，返回完整的记录给server层。</li>
</ul>
</li>
<li>**Using join buffer：**在连接查询时，当<code>被驱动表（t2）不能有效的利用索引时</code>，MySQL会提前申请一块内存空间（join buffer）存储驱动表的数据，来加快查询速度</li>
</ul>
<h3 id="单表索引失效">单表索引失效</h3>
<h4 id="1-计算-函数导致索引失效">1. 计算  函数导致索引失效</h4>
<p>在函数中使用索引,  索引不会生效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 显示查询分析</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> <span class="keyword">LEFT</span>(emp.name,<span class="number">3</span>) <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span>; <span class="comment">--索引失效</span></span><br></pre></td></tr></table></figure>
<h4 id="2-like以-开头索引失效">2. like以%开头索引失效</h4>
<blockquote>
<p>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。 电商中全文检索es 不应该mysql</p>
</blockquote>
<p>在使用模糊查找时,如果以%开头,索引失效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%ab%&#x27;</span>; <span class="comment">--索引失效</span></span><br></pre></td></tr></table></figure>
<h4 id="3-不等于-或者-索引失效">3. 不等于(!= 或者&lt;&gt;)索引失效</h4>
<p>否定开头,导致索引失效</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">!=</span>  <span class="operator">||</span>   <span class="operator">&lt;&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-IS-NOT-NULL-和-IS-NULL">4. IS NOT NULL 和 IS NULL</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.name <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>; <span class="comment">--索引失效</span></span><br></pre></td></tr></table></figure>
<p>**注意：**当数据库中的数据的索引列的<code>NULL值达到比较高的比例的时候</code>，即使在IS NOT NULL 的情况下 MySQL的查询优化器会选择使用索引，<code>此时type的值是range（范围查询）</code></p>
<h4 id="5-类型转换导致索引失效">5. 类型转换导致索引失效</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;123&#x27;</span>; </span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> name<span class="operator">=</span> <span class="number">123</span>; <span class="comment">--索引失效</span></span><br></pre></td></tr></table></figure>
<h4 id="6-全值匹配我最爱">6. 全值匹配我最爱</h4>
<p><strong>准备：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 首先删除之前创建的索引</span></span><br><span class="line"><span class="keyword">CALL</span> proc_drop_index(&quot;atguigudb&quot;,&quot;emp&quot;);</span><br><span class="line"><span class="keyword">drop</span> index idx_name <span class="keyword">on</span> emp;</span><br></pre></td></tr></table></figure>
<p>**问题：**为以下查询语句创建哪种索引效率最高</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询分析</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">and</span> deptid <span class="operator">=</span> <span class="number">4</span> <span class="keyword">AND</span> emp.name <span class="operator">=</span> <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line"><span class="comment">-- 执行SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">and</span> deptid <span class="operator">=</span> <span class="number">4</span> <span class="keyword">AND</span> emp.name <span class="operator">=</span> <span class="string">&#x27;abcd&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查看执行时间</span></span><br><span class="line"><span class="keyword">SHOW</span> PROFILES;</span><br></pre></td></tr></table></figure>
<p><strong>创建索引并重新执行以上测试：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建索引：分别创建以下三种索引的一种，并分别进行以上查询分析</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age <span class="keyword">ON</span> emp(age);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_deptid <span class="keyword">ON</span> emp(age,deptid);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_deptid_name <span class="keyword">ON</span> emp(age,deptid,`name`);</span><br></pre></td></tr></table></figure>
<p>**结论：**可以发现最高效的查询应用了联合索引 <code>idx_age_deptid_name</code></p>
<h4 id="7-最佳左前缀法则">7. 最佳左前缀法则</h4>
<ul>
<li>如果索引了多列，要遵守最左前缀法则。即查询从<code>索引的最左前列</code>开始并且不跳过索引中的列。</li>
<li>过滤条件要使用索引，必须按照<code>索引建立时的顺序，依次满足</code>，一旦跳过某个字段，索引后面的字段都无法被使用。</li>
</ul>
<h4 id="8-索引中范围条件右边的列失效">8.索引中范围条件右边的列失效</h4>
<ul>
<li>场景:
<ul>
<li>有三个索引    a,b,c,当进行查询时,b索引使用了范围条件,  那么查询中就算使用了c索引,还是会失效</li>
<li>解决: 定义索引时,将需要范围判断的 放在最后,例如,定义索引: a,c,b</li>
</ul>
</li>
</ul>
<h3 id="关联查询优化">关联查询优化</h3>
<p><strong>左连接:</strong></p>
<p>针对两张表的连接条件涉及的列，索引要创建在被驱动表上，驱动表尽量是小表</p>
<ul>
<li>如果驱动表上没有where过滤条件
<ul>
<li>当驱动表的连接条件没有索引时，驱动表是全表扫描</li>
<li>当针对驱动表的连接条件建立索引时，驱动表依然要进行全索引扫描</li>
<li>因此，此时建立在驱动表上的连接条件上的索引是没有太大意义的</li>
</ul>
</li>
<li>如果驱动表上有where过滤条件，那么针对过滤条件创建的索引是有必要的</li>
</ul>
<p><strong>内连接:</strong></p>
<p>在内连接中, 两表都可以做主表</p>
<p>发现即使交换表的位置，MySQL优化器也会自动选择驱动表，自动选择驱动表的原则是：索引创建在被驱动表上，驱动表是小表。</p>
<p>总结</p>
<ul>
<li>上来就给连表字段创建索引</li>
<li>优化器在选择驱动表和被驱动表的时候，是优先根据索引确定，再跟据数据量</li>
<li>能连表的就直接连表查询，尽量不要使用子查询。</li>
</ul>
<h3 id="子查询优化">子查询优化</h3>
<p>尽量不要使用NOT IN 或者 NOT EXISTS，用LEFT JOIN xxx ON xx = xx WHERE xx IS NULL替代</p>
<h3 id="排序优化">排序优化</h3>
<h4 id="索引失效">索引失效</h4>
<ul>
<li>
<p>无过滤,不索引</p>
<p>没有过滤limit或where 条件判断,索引失效</p>
</li>
<li>
<p>顺序错,不索引 ,</p>
<p>定义索引顺序与使用索引顺序不一致</p>
</li>
<li>
<p>反向反,不索引 ,</p>
<p>不同字段排序,一个升序,一个降序</p>
</li>
</ul>
<p>优化思路:</p>
<p>尽量让where的过滤条件和排序使用上索引</p>
<h4 id="双路排序和单路排序">双路排序和单路排序</h4>
<p>如果排序没有使用索引，引起了filesort（手工排序），那么filesort有两种算法</p>
<ul>
<li>双路排序:两次IO</li>
<li>单路排序:一次IO</li>
</ul>
<p><strong>双路排序（慢）</strong></p>
<p><code>MySQL 4.1之前是使用双路排序，</code>字面意思就是<code>两次扫描磁盘</code>，最终得到数据。</p>
<ul>
<li>
<p>首先，根据行指针<code>从磁盘</code>取<code>排序字段,主键</code>，在buffer进行排序。</p>
</li>
<li>
<p>再按照排序字段的顺序<code>从磁盘</code>取<code>其他字段</code>。</p>
</li>
</ul>
<p><code>取一批数据，要对磁盘进行两次扫描。</code>众所周知，IO是很耗时的，所以在mysql4.1之后，出现了第二种改进的算法，就是单路排序。</p>
<p><strong>单路排序（快）</strong></p>
<ul>
<li>
<p>从磁盘读取查询需要的<code>所有字段</code>，按照order by列在buffer对它们进行排序。</p>
</li>
<li>
<p>然后扫描排序后的列表进行输出。</p>
</li>
</ul>
<p>它的效率更快一些，因为<code>只读取一次磁盘</code>，避免了第二次读取数据。<code>并且把随机IO变成了顺序IO</code>。但是它会<code>使用更多的空间</code>， 因为它把每一行都保存在内存中了。</p>
<p><strong>结论及引申出的问题</strong></p>
<ul>
<li>单路比多路要多占用更多内存空间</li>
<li>因为单路是把所有字段都取出，所以有可能取出的数据的总大小超出了<code>sort_buffer_size</code>的容量，导致每次只能取<code>sort_buffer_size</code>容量大小的数据，进行排序（创建tmp文件，多路合并），排完再取sort_buffer容量大小，再排……从而多次I/O。</li>
<li><code>单路本来想省一次I/O操作，反而导致了大量的I/O操作，反而得不偿失。</code></li>
</ul>
<p><strong>优化策略</strong></p>
<ul>
<li>
<p><code>减少select 后面的查询的字段：</code>Order by时<code>select * 是一个大忌</code>。查询字段过多会占用sort_buffer_size的容量。</p>
</li>
<li>
<p><code>增大sort_buffer_size参数的设置：</code>当然，要根据系统的能力去提高，因为这个参数是针对每个进程（connection）的 1M-8M之间调整。 MySQL8.0，InnoDB存储引擎默认值是1048576字节，1MB。</p>
</li>
<li>
<p><code>增大max_length_for_sort_data参数的设置：</code>MySQL根据max_length_for_sort_data变量来确定使用哪种算法，默认值是4096字节，如果需要返回的列的总长度大于max_length_for_sort_data，使用双路排序算法，否则使用单路排序算法。但是如果设的太高，数据总容量超出sort_buffer_size的概率就增大，明显症状是高的磁盘I/O活动和低的处理器使用率。1024-8192之间调整。</p>
</li>
</ul>
<h3 id="分组优化">分组优化</h3>
<ul>
<li><code>group by 使用索引的原则几乎跟order by一致</code>。但是group by 即使没有过滤条件用到索引，也可以直接使用索引（Order By 必须有过滤条件才能使用上索引）</li>
<li>包含了order by、group by、distinct这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</li>
</ul>
<h4 id="覆盖索引优化">覆盖索引优化</h4>
<ul>
<li>禁止使用select *，禁止查询与业务无关字段</li>
<li>尽量利用覆盖索引</li>
</ul>
<h4 id="优化口诀">优化口诀</h4>
<p>全值匹配我最爱，最左前缀要遵守；<br>
带头大哥不能死，中间兄弟不能断；<br>
索引列上少计算，范围之后全失效；<br>
like百分写最右，覆盖索引不写*；</p>
<p>不等空值还有or，索引失效要少用；<br>
var引号不能丢，sql高级也不难；</p>
<h2 id="慢查询日志">慢查询日志</h2>
<ul>
<li>
<p><strong>介绍:</strong> 一种日志, 记录有哪些sql执行超出了阈值.</p>
</li>
<li>
<p><strong>开启慢查询日志</strong></p>
<p>默认情况下数据库没有开启 慢查询日志.</p>
<p>慢查询日志对性能有一定影响</p>
<ul>
<li>
<p>开启慢查询日志:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log<span class="operator">=</span><span class="number">1</span>; </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置文件设置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">slow_query_log</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">slow_query_log_file</span>=<span class="string">slow-query.log</span></span><br><span class="line"><span class="attr">long-query_time</span>=<span class="string">0.1#慢查询日志的时间定义（秒），默认为10秒，多久就算慢查询的日志</span></span><br><span class="line"><span class="attr">log_queries_not_using_indexes</span>=<span class="string">1#将所有没有使用带索引的查询语句全部写到慢查询日志中</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查询是否开启,以及日志位置:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%slow_query_log%&#x27;</span>; </span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><strong>修改阈值</strong></p>
<ul>
<li>默认阈值为10秒</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%long_query_time%&#x27;</span>; <span class="comment">-- 查看值：默认10秒</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> long_query_time<span class="operator">=</span><span class="number">0.1</span>; <span class="comment">-- 设置一个比较短的时间，便于测试</span></span><br></pre></td></tr></table></figure>
<p>​	<strong>注意：</strong></p>
<ul>
<li><strong>需要重新登录客户端</strong>使上面的设置生效</li>
<li>假如运行时间正好等于long_query_time的情况，并不会被记录下来。</li>
<li>也就是说，在mysql源码里是判断大于long_query_time，而非大于等于。</li>
</ul>
</li>
<li>
<p><strong>查询慢查询日志数:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;%Slow_queries%&#x27;</span>; </span><br></pre></td></tr></table></figure>
<p>存储路径: <code>vim /var/lib/mysql/atguigu-slow.log</code></p>
</li>
</ul>
<h3 id="日志分析工具-mysqldumpslow">日志分析工具(mysqldumpslow)</h3>
<p>在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow。退出mysql命令行，执行以下命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看mysqldumpslow的帮助信息</span></span><br><span class="line">mysqldumpslow <span class="comment">--help</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 工作常用参考</span></span><br><span class="line"><span class="comment">-- 1.得到返回记录集最多的10个SQL</span></span><br><span class="line">mysqldumpslow <span class="operator">-</span>s r <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>atguigu<span class="operator">-</span>slow.log</span><br><span class="line"><span class="comment">-- 2.得到访问次数最多的10个SQL</span></span><br><span class="line">mysqldumpslow <span class="operator">-</span>s c <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>atguigu<span class="operator">-</span>slow.log</span><br><span class="line"><span class="comment">-- 3.得到按照时间排序的前10条里面含有左连接的查询语句</span></span><br><span class="line">mysqldumpslow <span class="operator">-</span>s t <span class="operator">-</span>t <span class="number">10</span> <span class="operator">-</span>g &quot;left join&quot; <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>atguigu<span class="operator">-</span>slow.log</span><br><span class="line"><span class="comment">-- 4.另外建议在使用这些命令时结合 | 和more 使用 ，否则语句过多有可能出现爆屏情况</span></span><br><span class="line">mysqldumpslow <span class="operator">-</span>s r <span class="operator">-</span>t <span class="number">10</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>mysql<span class="operator">/</span>atguigu<span class="operator">-</span>slow.log <span class="operator">|</span> more</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>-a: 不将数字抽象成N，字符串抽象成S</p>
</li>
<li>
<p>-s: 是表示按照何种方式排序；</p>
<ul>
<li>
<p>c: sql语句的访问次数</p>
</li>
<li>
<p>l: 锁定时间</p>
</li>
<li>
<p>r: 返回数据记录集的总数量</p>
</li>
<li>
<p>t: 查询时间</p>
</li>
<li>
<p>al:平均锁定时间</p>
</li>
<li>
<p>ar:平均返回记录数</p>
</li>
<li>
<p>at:平均查询时间</p>
</li>
</ul>
</li>
<li>
<p>-t: 即为返回前面多少条的数据；</p>
</li>
<li>
<p>-g: 后边搭配一个正则匹配模式，大小写不敏感的；</p>
</li>
</ul>
<h2 id="视图">视图</h2>
<ul>
<li>
<p><strong>介绍:</strong></p>
<p>视图是建立在表之上的伪表，视图本身<strong>不存储数据</strong>，视图中的数据都是视图底层表中的数据,<strong>存储的是sql逻辑</strong>。</p>
</li>
<li>
<p><strong>作用:</strong></p>
<ul>
<li>保证数据的安全</li>
<li>存储复杂的业务逻辑</li>
</ul>
</li>
<li>
<p><strong>使用场景:</strong></p>
<ul>
<li>共用查询结果</li>
<li>报表</li>
<li>复杂sql使用</li>
</ul>
</li>
<li>
<p><strong>语法:</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">视图的语法：</span><br><span class="line">视图的创建：</span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">or</span> replace] <span class="keyword">view</span> 视图名  <span class="keyword">as</span> <span class="keyword">select</span>查询语句<span class="operator">!</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t5 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br><span class="line">  </span><br><span class="line">视图的修改：</span><br><span class="line"><span class="keyword">update</span> 视图名 <span class="keyword">set</span> 列名<span class="operator">=</span>列值,列名<span class="operator">=</span>列值 <span class="keyword">where</span> 条件</span><br><span class="line">  </span><br><span class="line">视图删除：</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 视图名 <span class="keyword">where</span> 条件</span><br><span class="line">    </span><br><span class="line">视图的查询：</span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> 视图名 <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="创建">创建</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name </span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例如：求所有人物对应的掌门名称</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_ceo <span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> emp.name, ceo.name <span class="keyword">AS</span> ceoname </span><br><span class="line"><span class="keyword">FROM</span> t_emp emp</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_dept dept <span class="keyword">ON</span> emp.deptid <span class="operator">=</span> dept.id </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t_emp ceo <span class="keyword">ON</span> dept.ceo <span class="operator">=</span> ceo.id;</span><br></pre></td></tr></table></figure>
<h4 id="使用">使用</h4>
<p><strong>查询</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> view_name; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例如：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v_ceo; </span><br></pre></td></tr></table></figure>
<p><strong>更新</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> view_name </span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建议直接删除重新创建</span></span><br></pre></td></tr></table></figure>
<p><strong>删除</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例如：</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> v_ceo;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: 修改 视图的信息 ,源表的信息也会变,  修改源表,视图的也会更新.</p>
</blockquote>
<h2 id="MVCC-略讲">MVCC (略讲)</h2>
<ul>
<li>
<p><em>MVCC</em>，是Multiversion Concurrency Control的缩写，翻译过来是多版本并发控制，他也是一种并发控制的解决方案。</p>
</li>
<li>
<p>在数据的并发场景中:  MVCC是用来解决<strong>读-写并发</strong>的</p>
</li>
<li>
<p><strong>只工作在可重复读和读已提交场景下</strong></p>
<ul>
<li>
<p>读-读并发</p>
</li>
<li>
<p>写-写并发: 锁（悲观锁+乐观锁）</p>
</li>
<li>
<p>读-写并发: MVCC</p>
</li>
</ul>
</li>
</ul>
<h3 id="快照读和当前读">快照读和当前读</h3>
<h4 id="当前读">当前读</h4>
<ul>
<li>
<p>读取的是记录的最新数据(不是历史版本)</p>
</li>
<li>
<p>要保证其他并发事务不能修改当前记录,所以<strong>会对当前记录加锁</strong>.</p>
</li>
<li>
<p>所以当前读就是<strong>加锁的读操作</strong></p>
</li>
<li>
<p>加锁的select 或者对数据进行增删改都会进行当前读</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xx_table LOCK <span class="keyword">IN</span> SHARE MODE;  # 共享锁</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> xx_table <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;			# 排它锁</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> xx_table ...					# 排它锁</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> xx_table ...					# 排它锁</span><br><span class="line"><span class="keyword">UPDATE</span> xx_table ...							# 排它锁</span><br></pre></td></tr></table></figure>
<h4 id="快照读">快照读</h4>
<ul>
<li>
<p><strong>不加锁的简单的 SELECT 都属于快照读</strong>，即不加锁的非阻塞</p>
</li>
<li>
<p><strong>场景:</strong></p>
<p>基于提高并发性能的考虑,  快照读是基于MVCC,  在很多情况下,避免了加锁, 减低了开销</p>
<p>多版本，那么<strong>快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</strong>。 快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读。</p>
</li>
</ul>
<h4 id="MVCC读取分析-读已提交、可重复读">MVCC读取分析[读已提交、可重复读]</h4>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/d424fd65c0ac5134a531e1262e41084e.png" alt=""></p>
<ol>
<li>在<strong>读已提交</strong>的隔离级别下: select 名称 查找的都是最新的数据,此时如果有新事务更新数据且提交,  在此期间的 select 读取到的同一条数据可能不同</li>
<li>在<strong>可重复读</strong>隔离级别下: 当第一次提交select 之后, MVCC会生成一个当前查找的快照, 当再次select 时,会返回这个快照, 无论是否有其他事务提交, 此时在同一个事务下的两次select的数据一定一样,但不一定是最新数据.</li>
</ol>
<p><strong>注意</strong>：</p>
<p>1.在读已提交（Read Committed:简称RC）隔离级别下,一个事务中的每一次 SELECT 查询都会重新获取一次 Read View【读视图】。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/c8a74c4f4bfc4df90c8824e53ed81947.png" alt=""></p>
<p>2.在可重复读（Repeatable Read:简称RR）隔离级别下,一个事务中只在第一次 SELECT 的时候会 获取一次 Read View，而后面所有的 SELECT</p>
<p>都会复用这个 Read View。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/a46d3d6e688932d2ed0608386e4b54b4.png" alt=""></p>
<h4 id="无索引索引失效情况">无索引索引失效情况</h4>
<ul>
<li>当对InnoDB引擎下的表进行更新,  如果 索引失效, 此时 就不会加 行锁,而是 加表锁 .</li>
</ul>
<h3 id="各种日志说明">各种日志说明</h3>
<p>1.慢查询日志（Slow Query Log）：记录执行时间超过指定阈值的查询语句。慢查询日志可以帮助你找出执行时间较长的查询，以便进行性能优化。</p>
<p>2.二进制日志（Binary Log）：记录所有对数据库的更改操作，包括数据修改、表结构变更等。二进制日志可以用于数据恢复、主从复制等场景。</p>
<p>relay log: 中继日志</p>
<p>3.事务日志：</p>
<p>也称为重做日志（Redo Log）,保证事务的持久性：记录正在进行的事务的更改操作。事务日志用于保证数据库的ACID特性，并支持崩溃恢复。</p>
<p>ACID: 原子性  一致性  隔离性  持久性</p>
<p>undo log：保证事务的原子性 和 一致性</p>
<p>隔离性：</p>
<p>MVCC:undo log+ReadView(视图快照)</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Orange blog 项目需求文档</title>
    <url>/2025/09/15/Orange%20blog%20%E9%A1%B9%E7%9B%AE%E9%9C%80%E6%B1%82%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1>blog</h1>
<h2 id="需求">需求</h2>
<ol>
<li>密码修改功能，个人信息详情，浏览量，点赞量,阅读量数据</li>
</ol>
<h2 id="bug">bug</h2>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Python3初始化工作空间</title>
    <url>/2025/09/23/Python3%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h1>Python3初始化工作空间</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建虚拟环境</span><br><span class="line">python3 -m venv venv</span><br><span class="line"></span><br><span class="line"># 激活虚拟环境</span><br><span class="line"># Linux/Mac:</span><br><span class="line">source venv/bin/activate</span><br><span class="line"># Windows:</span><br><span class="line">venv\Scripts\activate</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">pip install requests pandas numpy  # 示例包</span><br><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Nacos源码解析</title>
    <url>/2025/09/15/Nacos%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<ol>
<li>
<p>jar包指定配置文件</p>
<p>–spring.config.location=/ect/server/application.yml</p>
<p>优先级, --spring.config.location大于jar包中的配置</p>
</li>
<li>
<p>spring boot 的项目</p>
</li>
<li>
<p>通信都是使用Rest API通信</p>
</li>
<li>
<p>注册的单位是实例, 最小单元是实例</p>
</li>
<li>
<p>单集群的nacos 的功能</p>
<ul>
<li>服务发现</li>
<li>心跳检测</li>
<li>服务注册</li>
</ul>
</li>
<li>
<p>实例:<code> isemphere: true /false</code></p>
<ul>
<li>临时实例 :AP架构(注册中心)</li>
<li>永久实例 :CP架构(配置中心)</li>
</ul>
</li>
<li>
<p>服务注册的请求方式:</p>
<ul>
<li>1.x版本使用http / https请求</li>
<li>2.x版本及以后: grpc请求</li>
</ul>
</li>
<li>
<p>AutoConfigreAfter ( {xxxx.class ,xxx.class}) 在在这写配置加载之后再加载 顺序</p>
</li>
<li>
<p>实例注册请求发送时机:</p>
<p>Spring 监听器ApplicationListener 监听WenInit 初始化完成后 发送请求;</p>
</li>
<li>
<p>spring boot web 容器</p>
<ul>
<li>tomcat : 默认</li>
<li>undertow</li>
<li>jetty</li>
</ul>
</li>
<li>
<p>nacos注册表结构</p>
</li>
</ol>
<ul>
<li>Nacos 注册表结构的核心是一个双层 <code>Map</code> 结构，具体如下：
<ul>
<li>
<p><strong>最外层 Map</strong>:</p>
<ul>
<li><strong>Key</strong>: <code>nameSpace</code> (命名空间)</li>
<li><strong>Value</strong>: 一个 <code>Map</code></li>
</ul>
</li>
<li>
<p><strong>第二层 Map</strong>: ConcurrentHashMap</p>
<ul>
<li><strong>Key</strong>:  <code> ServiceName</code> (组::服务名称)</li>
<li><strong>Value</strong>: <code>Service</code> 对象，该对象包含了一些关键属性。</li>
</ul>
</li>
<li>
<p><strong>Service 对象的属性</strong>:</p>
<ul>
<li><strong><code>clusterMap</code></strong>: 一个 <code>Map</code>，用于管理不同的集群
<ul>
<li><strong>Key</strong>: 集群名称 (<code>clusterName</code>)</li>
<li><strong>Value</strong>: 一个 <code>Set</code>，包含集群内的 <code>Instance</code> 对象集合</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Instance 对象</strong>:</p>
<ul>
<li>表示具体的服务实例，包含实例的 IP 地址、端口、权重、健康状态等信息。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">+----------------------------------------------------------+</span><br><span class="line">|                        NameSpace                        |</span><br><span class="line">|                    (最外层 Map)                          |</span><br><span class="line">| +-----------------------------------------------------+  |</span><br><span class="line">| |               groupName::ServiceName (组::服务名称)   |  |</span><br><span class="line">| | +-------------------------------------------------+ |  |</span><br><span class="line">| | |               clusterMap (集群管理)              | |  |</span><br><span class="line">| | | +---------------------------------------------+ | |  |</span><br><span class="line">| | | |         clusterName (集群名称)              | | |  |</span><br><span class="line">| | | | +-----------------------------------------+ | | |  |</span><br><span class="line">| | | | |           InstanceSet (实例集合)         | | | |  |</span><br><span class="line">| | | | |  +-----------------------------------+  | | | |  |</span><br><span class="line">| | | | |  | Instance (实例)                  |  | | | |  |</span><br><span class="line">| | | | |  | - IP 地址                         |  | | | |  |</span><br><span class="line">| | | | |  | - 端口                             |  | | | |  |</span><br><span class="line">| | | | |  | - 权重                             |  | | | |  |</span><br><span class="line">| | | | |  | - 健康状态                         |  | | | |  |</span><br><span class="line">| | | | |  +-----------------------------------+  | | | |  |</span><br><span class="line">| | | | +-----------------------------------------+ | | |  |</span><br><span class="line">| | | +---------------------------------------------+ | |  |</span><br><span class="line">| | +-------------------------------------------------+ |  |</span><br><span class="line">| +-----------------------------------------------------+  |</span><br><span class="line">+----------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>一 Nacos 的核心功能</h1>
<h2 id="通信机制">通信机制</h2>
<ul>
<li>
<ol>
<li>在<code>1.x</code>版本中, Nacos 的服务端和客户端之间的通信是通过Restful风格的请求通信的</li>
<li>在<code>2.x</code>版本之后, 改用了grpc的方式</li>
</ol>
</li>
</ul>
<h2 id="服务注册">服务注册</h2>
<blockquote>
<p>naocs 服务客户端,在启动时, 会根据配置文件中的nacos 的服务端配置信息, 向服务端发送一个请求, 将客户端的元数据发送给服务端, 比如: ip \  port \ 服务名  等信息.</p>
<p>服务端接收到数据后, 会将客户端的元数据存储在一个双层map中</p>
</blockquote>
<p>服务注册的时间: 在客户端启动时, nacos客户端使用了spring的监听器ApplicaitonListener,监听WebServerInitializedEvent 是事件, 当web服务器启动后, 发送一个请求给服务端注册服务.</p>
<p>发送的请求地址 : Http: nacosip:nacos端口号/nacos/v1/ns/instance 发送一个Post请求, 带上请求头和请求参数 : 元数据 \ Ip \ 端口 \ 服务名 \ namspace 等</p>
<h2 id="服务心跳检测">服务心跳检测</h2>
<blockquote>
<p>在客服端服务注册成功之后, Nacos 的客户端会维护一个定时任务 , 来持续的发送请求给服务端 ,告诉服务端自己还活着 ,默认是每5秒发送一次, 防止服务在注册中心被剔除</p>
</blockquote>
<h2 id="服务的健康检查">服务的健康检查</h2>
<blockquote>
<p>Nacos的服务端也会维护一个定时任务, 通过判断当前时间和实例最后一次的检测时间, 如果超过了15秒, 就将该实例的健康状态改为false ,默认是true, 如果超过了30 秒, 则直接将该服务从nacos中剔除</p>
</blockquote>
<h2 id="服务发现">服务发现</h2>
<blockquote>
<p>服务端在注册到nacos后, 在调用服务注册中心的服务时, 会发送请求给服务端, 拉取服务端中所注册的服务清单,并且缓存在客户端本地,同时会开启一个定时任务,定时从服务端拉取最新服务清单</p>
<p>所以在第一次调用时, 速度会相对慢有点 , 后续主要通过查找缓存中的服务列表来调用, 靠定时任务来定时更新缓存中的服务列表</p>
</blockquote>
<h2 id="Nacos服务注册表结构">Nacos服务注册表结构</h2>
<ul>
<li>
<p>双Map结构:<code>HashMap&lt;String,CurrentHashMap&lt;String,Service&gt;&gt; </code></p>
<ul>
<li>
<p>第一层是一个HashMap ,Key 是 <code>nameSpace</code>, Value 是一个CurrentHashMap&lt;Service,&gt;</p>
</li>
<li>
<p>第二层的CurrentHashMap的 Key 是 <code>GroupName::ServiceName</code>, Value 是 Service 对象</p>
<p>Group本身没有单独的一个层级, 通常是直接携带在ServiceName后面,在查找时就可以判断属于哪个组了</p>
</li>
<li>
<p>Service对象: Service 对象中又有一个<code>custerMap</code> 集群map</p>
</li>
<li>
<p>custerMap的 Key 是custerName , Value 是一个Cluster 对象</p>
</li>
<li>
<p>在Cluster 对象中, 存在一个set集合, 里面存放的元素就是实例Instance对象 , Instance 对象中的属性存放着客户端传的元数据</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">+----------------------------------------------------------+</span><br><span class="line">|                        NameSpace                        |</span><br><span class="line">|                    (最外层 Map)                          |</span><br><span class="line">| +-----------------------------------------------------+  |</span><br><span class="line">| |               GroupName::ServiceName (服务名称)      |  |</span><br><span class="line">| | +-------------------------------------------------+ |  |</span><br><span class="line">| | |               clusterMap (集群管理)              | |  |</span><br><span class="line">| | | +---------------------------------------------+ | |  |</span><br><span class="line">| | | |         clusterName (集群名称)              | | |  |</span><br><span class="line">| | | | +-----------------------------------------+ | | |  |</span><br><span class="line">| | | | |           InstanceSet (实例集合)         | | | |  |</span><br><span class="line">| | | | |  +-----------------------------------+  | | | |  |</span><br><span class="line">| | | | |  | Instance (实例)                  |  | | | |  |</span><br><span class="line">| | | | |  | - IP 地址                         |  | | | |  |</span><br><span class="line">| | | | |  | - 端口                             |  | | | |  |</span><br><span class="line">| | | | |  | - 权重                             |  | | | |  |</span><br><span class="line">| | | | |  | - 健康状态                         |  | | | |  |</span><br><span class="line">| | | | |  +-----------------------------------+  | | | |  |</span><br><span class="line">| | | | +-----------------------------------------+ | | |  |</span><br><span class="line">| | | +---------------------------------------------+ | |  |</span><br><span class="line">| | +-------------------------------------------------+ |  |</span><br><span class="line">| +-----------------------------------------------------+  |</span><br><span class="line">+----------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>二 OpenFeign  + Nacos 调用流程</h1>
<ol>
<li>Nacos客户端在启动时,根据服务注册机制将服务注册到Nacos注册中心.</li>
<li>nacos客户端会通过心跳检测机制定时在Nacos的服务端更新当前实例的健康状态, 防止被Nacos服务端剔除, Nacos服务端则根据当前时间和实例最后一次的报告时间做对比, 如果超过了15秒,则将该实例的健康状态标记为false, 如果超过了30 秒, 则直接将该服务剔除掉</li>
<li>nacos客户端通过服务发现机制, 拉取Nacos服务端中的服务列表, 然后根据Ribbon的负载均衡机制, 选择一个服务的ip和端口号进调用</li>
</ol>
<h1>三 Nacos服务端具体处理注册流程</h1>
<h2 id="1-功能">1. <strong>功能</strong> :</h2>
<p>Nacos在进行服务注册时, 主要的工作就是将实例添加到注册表中对应服务的对应Cluster下的set中, 里面存放着当前服务下所有集群下的所有服务</p>
<h2 id="2-主要实现">2. **主要实现: **</h2>
<p><strong>思想:</strong>  Nacos在进行处理时 , 采用同步加异步思想,</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/792414e7235dd9299f62725cfd8febe5.png" alt=""></p>
<h3 id="2-1-在同步中做的事">2.1 在同步中做的事</h3>
<ol>
<li>
<p>解析客户端注册服务时发送的请求中的数据</p>
</li>
<li>
<p>如果该服务是第一次注册, 首先会先创建一个空的Service对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">createEmptyService(namespaceId, serviceName, instance.isEphemeral());</span><br><span class="line"><span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> getService(namespaceId, serviceName);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>构建一个双层Map结构, 将Service放进去</p>
</li>
<li>
<p>初始化该服务</p>
<p>在初始化该服务时,</p>
<ol>
<li>
<p>使用定时任务的线程池开启了一个定时任务, 对实例做心跳检测,</p>
<p>心跳检测:  通过判断实例的最后一次的报告时间 和当前时间的差值, 如果大于15秒 则将该实例的健康状态改为false. 如果不大于 ,则不变为true ,</p>
<p>如果大于 30 秒, 则将该实例从服务中移除 , 如果不大于就不移除</p>
</li>
</ol>
</li>
<li>
<p>做完这些后, 将该实例对象 存放在一个临时的Map中.</p>
</li>
<li>
<p>最后再将实例对象从临时map取出, 添加到阻塞队列中, task.add(Pair.with)</p>
<p>该阻塞队列为LinedBlockingQueue阻塞队列, 默认大小为1024 * 1024</p>
</li>
</ol>
<h3 id="2-2-异步线程做的事-notifiyer">2.2 异步线程做的事(notifiyer)</h3>
<ol>
<li>异步线程notiyer 从阻塞队列出Pair对象, 使用<code>Task.take()</code>获取, 并将该实例存放到Cluster对象中 ,</li>
<li>更新Cluster对象中的数据的操作</li>
<li>进行各种实例的CRUD比对</li>
<li>得到最终要注册的实例对象</li>
<li>最后将该实例存放在在注册表中的该service下的Cluster 对象中set集合中</li>
</ol>
<p>这样, 实例就相当于存放在了注册表中.  并且这个线程是在服务启动时一种存在的, Nacos使用的@PostConstrct注解和@Service 来让该线程在服务启动时就运行 .</p>
<p>对于这种需要一直执行的任务,  既需要让这个任务一直执行下去, 又要防止 这个任务大量的消耗CPU资源</p>
<p>我在Nacos中就学到了一种很好的解决办法, 它首先通过在该任务中加入while (true) <code>循环</code>, 来确保该线程可以一直执行下去, 并且,为了防止该线程一直循环消耗资源, 所以Nacos在这里它使用的是一个<code>阻塞队列,</code> 当该任务 获取不实例对象时,会进入阻塞状态, 只有当新的实例对象被添加进来, 该线程才会继续执行. 这样就很好的解决了消耗CPU资源的问题. 然后,while 循环其实并不能百分百保证该线程能一直循环下去, 当该任务在执行的过程中发生了<code>异常</code>, 该任务也会停止  , 因此, 在这个任务的while循环中,还通过<code>try-catch</code>包围, 将异常直接处理, 这样, 就算发生了异常, 该任务也不会停止了.</p>
<h1>注册表实列的多线程读取的问题和解决办法</h1>
<h2 id="❔问题">❔问题</h2>
<p>在对注册表中的实例的操作, 在Nacos中主要就两种,存和取, 这样就有一个问题, 如果有多个线程对该set集合进行操作, 一个线程读数据, 另外一个线程来存数据,</p>
<ol>
<li>当写线程还没有写进去, 读线程就读完了, 就会造成<code>数据不一致</code></li>
<li>在存的过程中,如果其他线程同时取, 那么读取到的数据就可能是错误的一个数据,  <code>读写冲突问题</code></li>
</ol>
<h2 id="💡解决办法">💡解决办法</h2>
<p>对于这种多线程同时存储的问题, 一般的解决办法就是加锁 , 但是加锁的弊端太大了, 虽然加锁能很好的解决<code>读写冲突问题</code>  和 <code>数据不一致的问题</code>. 但是,在Nacos源码中, 它并没有去使用加锁, 而是采用了写时复制的解决办法. 因为在Nacos的官网中也介绍了,Nacos 的TPS能达到13000 ,如果使用锁, 那么对于并发的性能就会很差, TPS很难达到13000, 采用写时复制, 虽然还是存在数据一致性问题, 但是确保了最终一致性, 而且还拥有很好的并发性能.</p>
<p><code>写时复制: </code></p>
<p><strong>原理:</strong></p>
<p>就是在一个容器中存在两种操作, 写和读时, 当只有读时 , 所有的读线程都是操作的同一个容器,</p>
<p>但是,如果是写操作, 它不会去操作原容器, 而是先将原容器中复制一份, 操作那个复制出的新容器, 当写操作完成后, 再将旧的容器替换成新的容器.</p>
<p>这样,就能很好的解决并发读写问题</p>
<p><strong>但是:</strong></p>
<p>虽然写时复制虽然读与读, 读与写之间没有冲突, 但是写于写之间还是会存在并发的冲突, 如果存在并发的环境, 还是得通过加锁来解决. 不过,在Nacos的服务注册中并不存在并发的写, 因为该任务只有一个线程, 并且是通过拿取阻塞队列中的数据来一个个写的.谁先存谁就先写</p>
<h2 id="❓阻塞队列对堆积吗">❓阻塞队列对堆积吗?</h2>
<p>一般情况下不会堆积, Nacos本身处理这个逻辑就很快, 但是也可能发生人为的攻击 ,</p>
<p>程序员通过编写脚本, 一次性发送大量的注册请求, 除此之外,不会出现堆积问题</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>MyBatis</title>
    <url>/2025/09/15/MyBatis/</url>
    <content><![CDATA[<h1>MyBatis</h1>
<h2 id="设置类型别名">设置类型别名:</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认为别名为类名（不区分大小写--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;online.zorange.entity.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span>  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--通过包来设置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;online.zorange.entity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="默认类型别名">默认类型别名</h3>
<table>
<thead>
<tr>
<th style="text-align:left">别名</th>
<th style="text-align:left">映射的类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">_byte</td>
<td style="text-align:left">byte</td>
</tr>
<tr>
<td style="text-align:left">_long</td>
<td style="text-align:left">long</td>
</tr>
<tr>
<td style="text-align:left">_short</td>
<td style="text-align:left">short</td>
</tr>
<tr>
<td style="text-align:left">_int</td>
<td style="text-align:left">int</td>
</tr>
<tr>
<td style="text-align:left">_integer</td>
<td style="text-align:left">int</td>
</tr>
<tr>
<td style="text-align:left">_double</td>
<td style="text-align:left">double</td>
</tr>
<tr>
<td style="text-align:left">_float</td>
<td style="text-align:left">float</td>
</tr>
<tr>
<td style="text-align:left">_boolean</td>
<td style="text-align:left">boolean</td>
</tr>
<tr>
<td style="text-align:left">string</td>
<td style="text-align:left">String</td>
</tr>
<tr>
<td style="text-align:left">byte</td>
<td style="text-align:left">Byte</td>
</tr>
<tr>
<td style="text-align:left">long</td>
<td style="text-align:left">Long</td>
</tr>
<tr>
<td style="text-align:left">short</td>
<td style="text-align:left">Short</td>
</tr>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">Integer</td>
</tr>
<tr>
<td style="text-align:left">integer</td>
<td style="text-align:left">Integer</td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left">Double</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">Float</td>
</tr>
<tr>
<td style="text-align:left">boolean</td>
<td style="text-align:left">Boolean</td>
</tr>
<tr>
<td style="text-align:left">date</td>
<td style="text-align:left">Date</td>
</tr>
<tr>
<td style="text-align:left">decimal</td>
<td style="text-align:left">BigDecimal</td>
</tr>
<tr>
<td style="text-align:left">bigdecimal</td>
<td style="text-align:left">BigDecimal</td>
</tr>
<tr>
<td style="text-align:left">object</td>
<td style="text-align:left">Object</td>
</tr>
<tr>
<td style="text-align:left">map</td>
<td style="text-align:left">Map</td>
</tr>
<tr>
<td style="text-align:left">hashmap</td>
<td style="text-align:left">HashMap</td>
</tr>
<tr>
<td style="text-align:left">list</td>
<td style="text-align:left">List</td>
</tr>
<tr>
<td style="text-align:left">arraylist</td>
<td style="text-align:left">ArrayList</td>
</tr>
<tr>
<td style="text-align:left">collection</td>
<td style="text-align:left">Collection</td>
</tr>
<tr>
<td style="text-align:left">iterator</td>
<td style="text-align:left">Iterator</td>
</tr>
</tbody>
</table>
<h2 id="sql参数赋值">sql参数赋值</h2>
<ol>
<li>#{}   : ？占位符,	会自动添加单引号</li>
<li>${}   :  字符串拼接        不会自动添加</li>
</ol>
<h3 id="单个简单参数">单个简单参数</h3>
<p>在#{}中可以任意填入参数。不必与参数名相同。</p>
<p>在${}中也可以任意填入，但是如果要加单引号，这种方法要手动加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByName</span><span class="params">(String username)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;online.zorange.entity&quot;</span>&gt;</span></span><br><span class="line">  select * from user where username= #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="复杂类型参数">复杂类型参数</h3>
<h4 id="多个参数传入">多个参数传入</h4>
<p>将User放入Map集合,通过key获取.</p>
<p>将key设置为arg1, arg0…, param1, param2…为键添加到Map集合中.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(String usrame, String password)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from user where username=#&#123;param0|arg0&#125; and password=#&#123;param1|arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="以Map集合传入">以Map集合传入</h4>
<p>此时参数以key获取，自定义设置的key</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(Map&lt;String,String&gt; map)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,String&gt; map=<span class="keyword">new</span> <span class="title class_">Map</span>&lt;&gt;;</span><br><span class="line">map.put(<span class="string">&quot;username&quot;</span>,user.username);</span><br><span class="line">map.put(<span class="string">&quot;password&quot;</span>,user.password);</span><br><span class="line">UserMapper.login(map)</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from user where username= #&#123;&#125; and password = #&#123;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="注解标记">注解标记</h4>
<p>@Param</p>
<ol>
<li>
<p>在参数上加@Param</p>
<p>key为@param中的value 和  以param1，param2…为key</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                  <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure>
<h4 id="实体类传入">实体类传入</h4>
<p>key为实体的属性名，值为属性值.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> USer <span class="title function_">login</span><span class="params">(User user)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span> &gt;</span></span><br><span class="line">    select * from user where username=#&#123;username&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据输出">数据输出</h2>
<h3 id="实体类">实体类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">	select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span> &gt;</span></span><br><span class="line">	select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="单行单列">单行单列</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">	select count(id) from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多表联查返回结果">多表联查返回结果</h3>
<p>使用map集合或 自定义返回类</p>
<p>使用Map:</p>
<p>单条数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">findArticleAndUserType</span><span class="params">(Integer userId,Integer ArticleId)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findArticleAndUserType&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	select article.*,user.type from user </span><br><span class="line">    inner join aritcle</span><br><span class="line">    on article.userId=user.id</span><br><span class="line">    where user.id=#&#123;userId&#125; and article.id=#&#123;articleId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>多条数据类型为Map的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">findAll</span><span class="params">(Integer userId,Integer articleid)</span></span><br></pre></td></tr></table></figure>
<h3 id="获取自增的主键">获取自增的主键</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertEmployee</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int insertEmployee(Employee employee); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- useGeneratedKeys属性字面意思就是“使用生成的主键” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- keyProperty属性可以指定主键在实体类对象中对应的属性名，Mybatis会将拿到的主键值存入这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;empId&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp(emp_name,emp_salary)</span><br><span class="line">  values(#&#123;empName&#125;,#&#123;empSalary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="全局配置自动识别驼峰式命名规则">全局配置自动识别驼峰式命名规则</h2>
<p>在Mybatis全局配置文件加入如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用settings对Mybatis全局进行设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 将xxx_xxx这样的列名自动映射到xxXxx这样驼峰式命名的属性名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>SQL语句中可以不使用别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Employee selectEmployee(Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  select emp_id,emp_name,emp_salary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="模糊查询">模糊查询</h2>
<p>Concat(’%‘，#{}，’%‘)     ===   ”%”#{}“%“   =     ‘%${}%’</p>
<p>问题：</p>
<ol>
<li>
<p>in  (#{})  时 #{} 会添加单引号====in(‘1,2,3’) 会报错.</p>
<p>？ :是不是可以 in (#{},#{})</p>
</li>
</ol>
<h2 id="自定义映射">自定义映射</h2>
<p>resultMap结果映射，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">	select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>关联关系</th>
<th>配置项关键词</th>
<th>所在配置文件和具体位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>对一</td>
<td>association标签/javaType属性 <strong>实体类</strong></td>
<td>Mapper配置文件中的resultMap标签内</td>
</tr>
<tr>
<td>对多</td>
<td>collection标签/ofType属性 <strong>集合</strong></td>
<td>Mapper配置文件中的resultMap标签内</td>
</tr>
</tbody>
</table>
<h3 id="一对一：">一对一：</h3>
<p>一个用户对应一个身份证:</p>
<p>在用户类，每个用户都有一个身份证，所以在用户类中设置一个字段为身份证类，</p>
<p>在查找用户时，将用户所在的身份证也查找出来。</p>
<p>但是在查找时，获得的是身份证的id和班级的属性，而用户的类中只有身份证的对象，</p>
<p>这时，查找到的结果集就不能一一对应，所以，就需要我们自定义一个结果集，将班级的属性赋值给身份证对象。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建resultMap实现“对一”关联关系映射 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：通常设置为这个resultMap所服务的那条SQL语句的id加上“ResultMap” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- type属性：要设置为这个resultMap所服务的那条SQL语句最终要返回的类型 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderWithCustomerResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 先设置Order自身属性和字段的对应关系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用association标签配置“对一”关联关系 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- property属性：在Order类中对一的一端进行引用时使用的属性名 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- javaType属性：一的一端类的全类名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Customer类的属性和字段名之间的对应关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Order selectOrderWithCustomer(Integer orderId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderWithCustomer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;selectOrderWithCustomerResultMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  SELECT order_id,order_name,c.customer_id,customer_name</span><br><span class="line">  FROM t_order o</span><br><span class="line">  LEFT JOIN t_customer c</span><br><span class="line">  ON o.customer_id=c.customer_id</span><br><span class="line">  WHERE o.order_id=#&#123;orderId&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="一对多：">一对多：</h3>
<p>一个用户对应多个课程，即在用户类中定义一个课程类的集合类型。</p>
<p>在查找用户时，查找用户的所有课程。</p>
<p>即查找出来的数据，存在相同的用户数据对应不同的课程数据。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置resultMap实现从Customer到OrderList的“对多”关联关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;selectCustomerWithOrderListResultMap&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 映射Customer本身的属性 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- collection标签：映射“对多”的关联关系 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- property属性：在Customer类中，关联“多”的一端的属性名 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ofType属性：集合属性中元素的类型 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 映射Order的属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Customer selectCustomerWithOrderList(Integer customerId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectCustomerWithOrderList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;selectCustomerWithOrderListResultMap&quot;</span>&gt;</span></span><br><span class="line">  SELECT c.customer_id,c.customer_name,o.order_id,o.order_name</span><br><span class="line">  FROM t_customer c</span><br><span class="line">  LEFT JOIN t_order o</span><br><span class="line">  ON c.customer_id=o.customer_id</span><br><span class="line">  WHERE c.customer_id=#&#123;customerId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多对多：">多对多：</h3>
<p>与多对一的区别：</p>
<p>sql语句需要查找三张表，resultMap处理与多对一一样。</p>
<h3 id="分部查询：">分部查询：</h3>
<h2 id="多表映射优化">多表映射优化</h2>
<table>
<thead>
<tr>
<th>setting属性</th>
<th>属性含义</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>autoMappingBehavior</td>
<td>指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td>
<td>NONE, PARTIAL, FULL</td>
<td>PARTIAL</td>
</tr>
</tbody>
</table>
<p>我们可以将autoMappingBehavior设置为full,进行多表resultMap映射的时候，可以省略符合列和属性命名映射规则（列名=属性名，或者开启驼峰映射也可以自动映射）的result标签！</p>
<p>修改mybati-sconfig.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启resultMap自动映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;FULL&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改teacherMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;tId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;t_id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启自动映射,并且开启驼峰式支持!可以省略 result!--&gt;</span>    id不能省</span><br><span class="line"><span class="comment">&lt;!--        &lt;result property=&quot;tName&quot; column=&quot;t_name&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;s_id&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;result property=&quot;sName&quot; column=&quot;s_name&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="动态语句">动态语句</h2>
<h3 id="多条件判断">多条件判断</h3>
<h4 id="if标签">if标签</h4>
<p>根据条件判断是否拼接</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selecct</span> &gt;</span></span><br><span class="line">select * from user where </span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null and id!=&#x27;&#x27;&quot;</span>&gt;</span>id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span>name=#&#123;&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password!=null and password!=&#x27;&#x27;&quot;</span>&gt;</span>password=#&#123;&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selecct</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>问题:当第一个if不成立时，会去掉多余where，and</p>
<p>解决:加上恒成立条件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selecct</span> &gt;</span></span><br><span class="line">select * from user where and 1=1</span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null and id!=&#x27;&#x27;&quot;</span>&gt;</span>id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span>name=#&#123;&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password!=null and password!=&#x27;&#x27;&quot;</span>&gt;</span>password=#&#123;&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selecct</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="where标签">where标签</h4>
<p>自动生成where条件，自动删除多余的and和or</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selecct</span> &gt;</span></span><br><span class="line">select * from user </span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null and id!=&#x27;&#x27;&quot;</span>&gt;</span>id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span>and name=#&#123;&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password!=null and password!=&#x27;&#x27;&quot;</span>&gt;</span>and password=#&#123;&#125;			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">selecct</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="trim标签">trim标签</h4>
<p>使用trim标签控制条件部分两端是否包含某些字符</p>
<ul>
<li>prefix属性：指定要动态添加的前缀</li>
<li>suffix属性：指定要动态添加的后缀</li>
<li>prefixOverrides属性：指定要动态去掉的前缀，使用“|”分隔有可能的多个值</li>
<li>suffixOverrides属性：指定要动态去掉的后缀，使用“|”分隔有可能的多个值</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=null and id!=&#x27;&#x27;&quot;</span>&gt;</span>id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27;&quot;</span>&gt;</span>and name=#&#123;&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password!=null and password!=&#x27;&#x27;&quot;</span>&gt;</span>and password=#&#123;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="set">set</h4>
<p>动态去掉多余的逗号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span></span><br><span class="line">            emp_salary=#&#123;empSalary&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="choose-when-otherwise">choose/when/otherwise</h4>
<p>相当于if…else   if…else</p>
<p>switch…case…default，按顺序查，满足一个直接退出</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span>emp_name=#&#123;empName&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span>emp_salary <span class="symbol">&amp;lt;</span> 3000<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>1=1<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     第一种情况：第一个when满足条件 where emp_name=?</span></span><br><span class="line"><span class="comment">     第二种情况：第二个when满足条件 where emp_salary &lt; 3000</span></span><br><span class="line"><span class="comment">     第三种情况：两个when都不满足 where 1=1 执行了otherwise</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="foreach">foreach</h4>
<ol>
<li>
<p>批量插入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    collection属性：要遍历的集合</span></span><br><span class="line"><span class="comment">    item属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象</span></span><br><span class="line"><span class="comment">    separator属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符</span></span><br><span class="line"><span class="comment">    open属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串</span></span><br><span class="line"><span class="comment">    close属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串</span></span><br><span class="line"><span class="comment">    index属性：这里起一个名字，便于后面引用</span></span><br><span class="line"><span class="comment">        遍历List集合，这里能够得到List集合的索引值</span></span><br><span class="line"><span class="comment">        遍历Map集合，这里能够得到Map集合的key</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;values&quot;</span> <span class="attr">index</span>=<span class="string">&quot;myIndex&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在foreach标签内部如果需要引用遍历得到的具体的一个对象，需要使用item属性声明的名称 --&gt;</span></span><br><span class="line">    (#&#123;emp.empName&#125;,#&#123;myIndex&#125;,#&#123;emp.empSalary&#125;,#&#123;emp.empGender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>批量更新</p>
<p>上面批量插入的例子本质上是一条SQL语句，而实现批量更新则需要多条SQL语句拼起来，用分号分开。也就是一次性发送多条SQL语句让数据库执行。此时需要在数据库连接信息的URL地址中设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">atguigu.dev.url=jdbc:mysql:///mybatis-example?allowMultiQueries=true</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int updateEmployeeBatch(@Param(&quot;empList&quot;) List&lt;Employee&gt; empList) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeBatch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        update t_emp set emp_name=#&#123;emp.empName&#125; where emp_id=#&#123;emp.empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="sql片段">sql片段</h4>
<p>抽取重复的sql</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用sql标签抽取重复出现的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;mySelectSql&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引用已抽取的SQL片段</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用include标签引用声明的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;mySelectSql&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="MyBatis高级扩展（分页插件）">MyBatis高级扩展（分页插件）</h2>
<p>具体来说，MyBatis 的插件机制包括以下三个组件：</p>
<ol>
<li><code>Interceptor</code>（拦截器）：定义一个拦截方法 <code>intercept</code>，该方法在执行 SQL 语句、执行查询、查询结果的映射时会被调用。</li>
<li><code>Invocation</code>（调用）：实际上是对被拦截的方法的封装，封装了 <code>Object target</code>、<code>Method method</code> 和 <code>Object[] args</code> 这三个字段。</li>
<li><code>InterceptorChain</code>（拦截器链）：对所有的拦截器进行管理，包括将所有的 Interceptor 链接成一条链，并在执行 SQL 语句时按顺序调用。</li>
</ol>
<p>插件的开发非常简单，只需要实现 Interceptor 接口，并使用注解 <code>@Intercepts</code> 来标注需要拦截的对象和方法，然后在 MyBatis 的配置文件中添加插件即可。</p>
<ol>
<li>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在mybatis配置文件中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTeacherRelationshipToMulti</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">TeacherMapper</span> <span class="variable">teacherMapper</span> <span class="operator">=</span> session.getMapper(TeacherMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启分页</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 查询Customer对象同时将关联的Order集合查询出来</span></span><br><span class="line">    List&lt;Teacher&gt; allTeachers = teacherMapper.findAllTeachers();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    PageInfo&lt;Teacher&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(allTeachers);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;pageInfo = &quot;</span> + pageInfo);</span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> pageInfo.getTotal(); <span class="comment">// 获取总记录数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pages</span> <span class="operator">=</span> pageInfo.getPages();  <span class="comment">// 获取总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + pages);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> pageInfo.getPageNum(); <span class="comment">// 获取当前页码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pageNum = &quot;</span> + pageNum);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> pageInfo.getPageSize(); <span class="comment">// 获取每页显示记录数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pageSize = &quot;</span> + pageSize);</span><br><span class="line">    List&lt;Teacher&gt; teachers = pageInfo.getList(); <span class="comment">//获取查询页的数据集合</span></span><br><span class="line">    System.out.println(<span class="string">&quot;teachers = &quot;</span> + teachers);</span><br><span class="line">    teachers.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="逆向工程-代码生成器">逆向工程 (代码生成器)</h2>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Redisson</title>
    <url>/2025/09/15/Redisson/</url>
    <content><![CDATA[<h1>Redisson实现</h1>
<h2 id="1-导入依赖">1.导入依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- redisson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-配置类">2. 配置类</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.data.redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">3000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">ADDRESS_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;redis://&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动装配</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    RedissonClient <span class="title function_">redissonSingle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(host))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;host is  empty&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  redis://192.168.6.133:6379</span></span><br><span class="line">        <span class="type">SingleServerConfig</span> <span class="variable">serverConfig</span> <span class="operator">=</span> config.useSingleServer()</span><br><span class="line">                .setAddress(ADDRESS_PREFIX + <span class="built_in">this</span>.host + <span class="string">&quot;:&quot;</span> + port)</span><br><span class="line">                .setTimeout(<span class="built_in">this</span>.timeout);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(<span class="built_in">this</span>.password)) &#123;</span><br><span class="line">            serverConfig.setPassword(<span class="built_in">this</span>.password);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-锁使用">3. 锁使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getAlbumInfoById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//............</span></span><br><span class="line">    <span class="comment">//创建锁</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">&quot;:lock&quot;</span>;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(lockKey);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ifAbsent</span> <span class="operator">=</span> lock.tryLock(<span class="number">3</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">if</span>(ifAbsent) &#123; <span class="comment">//加锁成功</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//..............</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//解锁，释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-布隆过滤器的使用">4. 布隆过滤器的使用</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化布隆过滤器</span></span><br><span class="line">      RBloomFilter&lt;Object&gt; bloomFilter = redissonClient.getBloomFilter(<span class="string">&quot;sku:bloom:filter&quot;</span>);</span><br><span class="line">      <span class="comment">//设置数据规模 误判率 预计统计元素数量为100000，期望误差率为0.01</span></span><br><span class="line">      bloomFilter.tryInit(<span class="number">100000</span>, <span class="number">0.01</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//测试使用，快速自动加入</span></span><br><span class="line">      List&lt;ProductSku&gt; productSkuList = productSkuMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">      productSkuList.forEach(item -&gt; &#123;</span><br><span class="line">          bloomFilter.add(item.getId());</span><br><span class="line">      &#125;);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		----------------------------------------------------------------------------------------------------------</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//远程调用商品微服务接口之前 提前知道用户访问商品SKUID是否存在与布隆过滤器</span></span><br><span class="line">  RBloomFilter&lt;Object&gt; bloomFilter = redissonClient.getBloomFilter(<span class="string">&quot;sku:bloom:filter&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!bloomFilter.contains(skuId)) &#123;</span><br><span class="line">      log.error(<span class="string">&quot;用户查询商品sku不存在：&#123;&#125;&quot;</span>, skuId);</span><br><span class="line">      <span class="comment">//查询数据不存在直接返回空对象</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;用户查询商品sku不存在&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Result包装</title>
    <url>/2025/09/15/Result%E5%8C%85%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Result包装">Result包装</h2>
<h3 id="Result-java">Result.java</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.orange.blog.common.base;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> online.orange.blog.common.constants.ResponseCode;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        result.setCode(ResponseCode.SUCCESS);</span><br><span class="line">        result.setMsg(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        result.setData(data);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result&lt;Void&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(String code, String message)</span> &#123;</span><br><span class="line">        Result&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMsg(message);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">error</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error(ResponseCode.FAIL, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Constant-java">Constant.java</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> zorange.online.blogserver.common;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 用于存放常量</span></span><br><span class="line"><span class="comment"> * 常量接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="comment">//操作成功</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CODE_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;200&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;操作成功&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统错误</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CODE_ERROR</span> <span class="operator">=</span> <span class="string">&quot;500&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_ERROR</span> <span class="operator">=</span> <span class="string">&quot;系统错误&quot;</span>;</span><br><span class="line">    <span class="comment">//参数错误</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CODE_PARAM_ERROR</span> <span class="operator">=</span> <span class="string">&quot;400&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_PARAM_ERROR</span> <span class="operator">=</span> <span class="string">&quot;参数错误&quot;</span>;</span><br><span class="line">    <span class="comment">//其他业务异常</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CODE_OTHER_ERROR</span> <span class="operator">=</span> <span class="string">&quot;501&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_OTHER_ERROR</span> <span class="operator">=</span> <span class="string">&quot;其他业务异常&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">CODE_NOT_LOGIN</span> <span class="operator">=</span> <span class="string">&quot;401&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_NOT_LOGIN</span> <span class="operator">=</span> <span class="string">&quot;权限不足&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String DICT_TYPE_ICON= <span class="string">&quot;icon&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2025/09/15/RabbitMQ/</url>
    <content><![CDATA[<h1>RabbitMQ</h1>
<h2 id="消息中间件概述">消息中间件概述</h2>
<h3 id="消息队列简介">消息队列简介</h3>
<p>消息队列(message queue)简称MQ，是一种以“<strong>先进先出</strong>”的数据结构为基础的消息服务器。</p>
<p><strong>消息</strong>：在两个系统要传输的数据</p>
<p><strong>作用</strong>：实现消息的传递</p>
<ul>
<li>原始的数据传递方式：</li>
</ul>
<p>​	数据传输方式为同步传输【作为调用方必须等待被调用方执行完毕以后，才可以继续传递消息】，同步传输存在的弊端：<strong>传输效率较低</strong>。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/fe5597106ce041f456bdc068384ce642.png" alt=""></p>
<ul>
<li>
<p>基于MQ实现消息的传输，如下图所示：</p>
<p>数据的传输方式属于异步传输【作为调用方法不用等待被调用方执行完毕就可以接续传递消息】，数据传输的消息较高。<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/48ba16c53c56d8c7a4e007eeb808bc88.png" alt=""></p>
</li>
</ul>
<h3 id="消息队列应用场景">消息队列应用场景</h3>
<p>主要的作用：</p>
<p><strong>[1]系统解耦</strong></p>
<p><strong>[2]流量消锋</strong></p>
<p><strong>[3]数据分发</strong></p>
<h4 id="系统解耦">系统解耦</h4>
<p>系统的耦合性越高，<strong>容错性</strong>【是指<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F/479832">系统</a>在部分组件（一个或多个）发生故障时仍能正常运作的能力】就越低</p>
<p>如下下图所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/7868449995fae7881f2672c63876d93c.png" alt=""></p>
<p>使用消息队列以后，整个下单操作的架构如下图所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/165b6acc3cda5a1005a436e0048e44f4.png" alt=""></p>
<p>使用消息队列解耦合，系统的耦合性就会降低了，容错性就提高了。比如物流系统发生故障，需要几分钟才能来修复，在这段时间内，物流系统要处理的数据被缓存</p>
<p>到消息队列中，用户的下单操作正常完成。当物流系统回复后，补充处理存在消息队列中的订单消息即可，终端系统感知不到物流系统发生过几分钟故障。</p>
<h4 id="流量消锋">流量消锋</h4>
<p>流量消锋：消除系统中的高峰值流量(流量可以理解为就是请求):削峰填谷</p>
<p>假设用户每秒需要发送5k个请求，而我们的A系统每秒只能处理2K个请求，这样就会导致大量的下单请求失败。而且由于实际请求的数量远远超过系统的处理能力，</p>
<p>此时也有可能导致系统宕机。</p>
<p>用户每秒发送5k个请求，我们可以先将下单请求数据存储到MQ中，此时在MQ中就缓存了很多的下单请求数据，而A系统根据自己的处理能力从MQ中获取数据进行</p>
<p>下单操作，有了MQ的缓存层以后，就可以保证每一个用户的下单请求可以得到正常的处理，并且这样可以大大提到系统的稳定性和用户体验。</p>
<h4 id="数据分发">数据分发</h4>
<p>假设A系统进行了某一个业务操作以后，需要将这个业务操作结果通知给其他的系统，原始的架构如下所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/5fb3b19ac11b587efc2412658c74e6df.png" alt=""></p>
<p>此时B系统、C系统、D系统就需要提供对应的接口，然后让A系统进行调用。如果此时不需要通知D系统了，那么就需要更改A系统的代码，将调用D系统的代码删除</p>
<p>掉。并且如此时项目中添加了一个新的系统E，A系统也需要将处理结构通知给E系统，那么同时也需要更改A系统的代码。这样就不利于后期的维护。</p>
<p>使用MQ改进以后的架构如下所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/8845dbb5a4f0228e9ee80f311d97b587.png" alt=""></p>
<p>A系统需要将业务操作结果通知给其他的系统时，A系统只需要将结构发送到MQ中。其他的系统只需要从MQ中获取结果即可，如果不需要结果了，此时只需要取消</p>
<p>从MQ中获取结果的操作即可。并且如果新增了一个系统需要获取结果，只需要从MQ中获取结果数据就可以了，A系统的代码不需要进行改动。这样就大大的提高了</p>
<p>系统的维护性。</p>
<h2 id="MQ的优缺点">MQ的优缺点</h2>
<p>优点：</p>
<p>1、应用解耦提高了系统的容错性</p>
<p>2、异步通讯提高了系统的响应速度</p>
<p>3、流量消锋提高了系统的并发能力</p>
<p>缺点：</p>
<p>1、系统可用性降低：系统引入的外部依赖越多，系统稳定性越差。一旦MQ宕机，就会对业务造成影响。</p>
<p>2、系统复杂度提高：MQ的加入大大增加了系统的复杂度。</p>
<h3 id="MQ的选择依据是什么">MQ的选择依据是什么?</h3>
<p>调用方是否需要获取到被调用方的执行结果，如果需要获取到结果，那么就需要使用同步通讯，如果不需要就可以使用异步通讯。</p>
<h2 id="Rabbitmq简介">Rabbitmq简介</h2>
<p>RabbitMQ是由erlang【二郎神】语言开发，基于AMQP（Advanced Message Queue Protocol 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方</p>
<p>法，消息队列在分布式系统开发中应用非常广泛。</p>
<p>RabbitMQ官方地址：<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p>
<p>RabbitMQ常见的消息模型：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/14f8cabcbf5d82a15aa6f8afdf96ec6d.png" alt=""></p>
<p>RabbitMQ提供了<strong>7种模式</strong>：简单模式，work模式 ，Publish/Subscribe发布与订阅模式，Routing路由模式，Topics主题模式，RPC远程调用模式(远程调用)，生产者</p>
<p>确认。</p>
<h2 id="常见的消息队列产品">常见的消息队列产品</h2>
<p>1、ActiveMQ</p>
<p>2、Rabbitmq</p>
<p>3、RocketMQ</p>
<p>4、Kafka</p>
<p>常见特性比对：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/eb529511edab3809605f48c830d56c28.png" alt=""></p>
<h2 id="Rabbitmq环境搭建">Rabbitmq环境搭建</h2>
<h3 id="部署Rabbitmq">部署Rabbitmq</h3>
<ul>
<li>
<p>使用docker部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取rabbitmq的镜像</span></span><br><span class="line">docker pull rabbitmq:3.8-management</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器</span></span><br><span class="line">docker run -d --name rabbit01 -e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">-p 15672:15672 -p 5672:5672 \</span><br><span class="line">--hostname rabbit01 --restart=always \</span><br><span class="line">-v rabbit01_data:/var/lib/rabbitmq \</span><br><span class="line">-v rabbit01_conf:/etc/rabbitmq \</span><br><span class="line">rabbitmq:3.8-management</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>访问地址：<a href="http://xn--ip-im8ckcv93fffgt74d:15672">http://虚拟机ip地址:15672</a></p>
</li>
<li>
<p>用户名和密码：admin/admin</p>
</li>
</ul>
<h3 id="架构介绍">架构介绍</h3>
<p>Rabbitmq的架构图如下所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/d0597cfc562e019bc52b57d2fc200423.png" alt=""></p>
<p><strong>Broker</strong>：接收和分发消息的应用，RabbitMQ Server就是 Message Broker</p>
<p><strong>Virtual host</strong>:出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个</p>
<p>RabbitMQ server 提供的服务时，可以划分出多个vhost，每个用户在自己的 vhost 创建 exchange／queue 等</p>
<p><strong>Connection</strong>：publisher／consumer 和 broker 之间的 TCP 连接</p>
<p><strong>Channel</strong>：如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection的开销将是巨大的，效率也较低。Channel 是在 connection</p>
<p>内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread创建单独的 channel 进行通讯，AMQP method 包含了channel id 帮助客户端和message broker</p>
<p>识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销</p>
<p><strong>Exchange</strong>：message 到达 broker 的第一站，根据分发规则，匹配查询表中的 routing key，分发消息到queue 中去。常用的类型有：direct (point-to-point)，</p>
<p>topic (publish-subscribe) and fanout (multicast)</p>
<p><strong>Queue</strong>：存储消息的容器，消息最终被送到这里，等待 consumer 取走</p>
<p><strong>Binding</strong>：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key。Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</p>
<h3 id="管理界面使用">管理界面使用</h3>
<p>各个选项卡的说明：</p>
<p>1、overview：概览</p>
<p>2、connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才可以完成消息的生产和消费，在这里可以查看连接情况</p>
<p>3、channels：通道，建立连接后，会形成通道，消息的投递获取依赖通道。</p>
<p>4、Exchanges：交换机，用来实现消息的路由</p>
<p>5、Queues：队列，即消息队列，消息存放在队列中，等待消费，消费后被移除队列</p>
<p>Rabbitmq常见端口号：</p>
<p>5672：RabbitMQ的编程语言客户端连接端口</p>
<p>15672：RabbitMQ管理界面端口</p>
<h3 id="用户管理">用户管理</h3>
<p>常见的角色说明：</p>
<p>1、 超级管理员(administrator)：可登录管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p>
<p>2、 监控者(monitoring)：可登录管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p>
<p>3、 策略制定者(policymaker)：可登录管理控制台， 同时可以对policy进行管理。但无法查看节点的相关信息。</p>
<p>4、 普通管理者(management)：仅可登录管理控制台，无法看到节点信息，也无法对策略进行管理。</p>
<p>5、 其他：无法登录管理控制台，通常就是普通的生产者和消费者。</p>
<h3 id="虚拟主机管理">虚拟主机管理</h3>
<ul>
<li>在哪个用户创建的虚拟主机，这个用户就拥有权限，超级管理员也可以设置权限</li>
</ul>
<h3 id="Rabbitmq入门">Rabbitmq入门</h3>
<h4 id="父工程">父工程</h4>
<p>具体步骤如下所示：</p>
<p>1、创建一个父工程：rabbitmq-parent</p>
<p>2、在pom.xml文件中加入如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring boot和rabbitmq整合的时候所需要的起步依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring boot和junit整合的起步依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 类似于指定父工程 上述继承了父工程之后，这里就可以不用这个dependencyManagement这一项了,这两项选择一项即可。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Spring Boot Dependencies --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="生产者">生产者</h4>
<p>具体步骤如下所示：</p>
<p>1、在rabbitmq-parent工程下创建一个子工程rabbitmq-producer</p>
<p>2、创建对应的启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.atguigu.rabbit.producer;</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication.class , args) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、在application.yml文件中加入如下配置信息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.136</span><span class="number">.145</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
<p>4、编写测试类使用<strong>RabbitTemplate</strong>发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.atguigu.rabbit.producer.test;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = ProducerApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;simple_queue&quot;</span> , <span class="string">&quot;hello rabbitmq...&quot;</span>);		<span class="comment">// 第一个参数表示的就是队列名称</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动程序进行测试，需要先将队列创建出来(创建队列的三种方式：1、使用后台管理系统  2、使用Java Api    3、使用@RabbitListener注解)。</p>
<h4 id="消费者工程">消费者工程</h4>
<p>具体步骤如下所示：</p>
<p>1、在rabbitmq-parent工程下创建一个子工程rabbitmq-consumer</p>
<p>2、创建对应的启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.atguigu.rabbit.consumer;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class , args) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、在application.yml文件中加入如下配置信息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.136</span><span class="number">.145</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
<p>4、编写消费者监听方法，监听指定的队列获取队列中的消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.atguigu.rabbit.consumer.listener01;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer01Listener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple_queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumer01</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] body = message.getBody();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">        System.out.println(<span class="string">&quot;msg ----&gt; &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Rabbitmq消息模型">Rabbitmq消息模型</h2>
<h3 id="简单队列模式">简单队列模式</h3>
<p>一个生产者直接将消息发送到队列，一个消费者消费</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/1ab5749dc0621c719f1347eadf30e4ff.png" alt=""></p>
<h3 id="工作队列">工作队列</h3>
<p>一个生产者将消息发送到队列，多个消费者共同消费一个队列中的消息</p>
<p>**应用场景：**对于任务过重或任务较多情况使用</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/01acea803a2212c25ea2af973e6dbf20.png" alt=""></p>
<h2 id="发布订阅模型">发布订阅模型</h2>
<ul>
<li>在简单队列模型的基础上，又多了一个角色：交换机exchange</li>
<li>生产者通过将消息发送给交换机，由交换机将消息转发给队列</li>
</ul>
<h3 id="交换机类型">交换机类型</h3>
<ol>
<li>Fanot：广播，没有binding-key，将消息转发给所有绑定的队列</li>
<li>Direct：路由，把消息交给符合指定routing-key的队列</li>
<li>topic：主题，把消息交给符合routing pattern （路由规则）的队列</li>
</ol>
<p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p>
<h3 id="Fanout">Fanout</h3>
<p>简介：fanout类型的交换机会将将消息交给所有与之绑定队列</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/e364b37ba6a70a58c8cb7bd3c14b9c79.png" alt=""></p>
<h4 id="通过java-api创建exchange、queue和绑定信息">通过java api创建exchange、queue和绑定信息</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.atguigu.rabbit.producer.config;</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqFanoutExchangeConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Exchange</span> <span class="variable">fanoutExchange</span> <span class="operator">=</span> ExchangeBuilder.fanoutExchange(<span class="string">&quot;fanout_exchange&quot;</span>).durable(<span class="literal">true</span>).build();</span><br><span class="line">        <span class="keyword">return</span> fanoutExchange ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(<span class="string">&quot;fanout_queue_01&quot;</span>).build();</span><br><span class="line">        <span class="keyword">return</span> queue ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(<span class="string">&quot;fanout_queue_02&quot;</span>).build();</span><br><span class="line">        <span class="keyword">return</span> queue ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明队列和交换机的绑定信息</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutQueue01Binding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Binding</span> <span class="variable">binding</span> <span class="operator">=</span> BindingBuilder.bind(fanoutQueue01()).to(fanoutExchange()).with(<span class="string">&quot;&quot;</span>).noargs();</span><br><span class="line">        <span class="keyword">return</span> binding ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutQueue02Binding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Binding</span> <span class="variable">binding</span> <span class="operator">=</span> BindingBuilder.bind(fanoutQueue02()).to(fanoutExchange()).with(<span class="string">&quot;&quot;</span>).noargs();</span><br><span class="line">        <span class="keyword">return</span> binding ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Direct">Direct</h3>
<p>路由模式特点：</p>
<p>1、队列与交换机的绑定的时候需要指定一个或者多个bindingKey(routingKey)</p>
<p>2、生产者发送消息的时候需要指定一个消息的routingKey</p>
<p>3、交换机获取到消息以后需要使用消息的routingKey和bindingKey比对，如果相等就会把消息转发给对应的队列</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/86281c4c3b0304636bacd01c978f2173.png" alt=""></p>
<h3 id="Topic">Topic</h3>
<p>主题模式特点：</p>
<p>1、队列与交换机的绑定的时候需要指定一个或者多个bindingKey(routingKey) ， <strong>在bindingKey可以使用通配符</strong></p>
<p>2、生产者发送消息的时候需要指定一个消息的routingKey</p>
<p>3、交换机获取到消息以后需要使用消息的routingKey和bindingKey规则进行比对，如果routingKey满足bindingKey的规则就会把消息转发给对应的队列</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/5ac74b2b60cf06b7d4b2a671af6b384e.png" alt=""></p>
<p>通配符介绍：</p>
<p><strong>#</strong>：匹配零个或多个词</p>
<p>*<strong><strong>：匹配不多不少</strong>恰好1</strong>个词</p>
<h2 id="RabbitListener注解">@RabbitListener注解</h2>
<ul>
<li>第三种设置队列，交换机和绑定关系的方式</li>
</ul>
<p>RabbitListener注解用来声明消费者监听器，可以监听指定的队列，同时也可以声明队列、交换机、队列和交换机绑定信息。</p>
<p>代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.atguigu.rabbit.consumer.listener04;</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer02Listener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = &quot;direct_queue_02&quot; , durable = &quot;true&quot;) ,</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;direct_exchange&quot; , durable = &quot;true&quot; , type = ExchangeTypes.DIRECT) ,</span></span><br><span class="line"><span class="meta">            key = &#123; &quot;error&quot; , &quot;info&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumer01</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] body = message.getBody();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">        System.out.println(<span class="string">&quot;consumer02Listener....msg ----&gt; &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="消息的可靠性保证">消息的可靠性保证</h2>
<p><strong>概述</strong>：指的就是在整个消息的传输过程中如何保证消息不丢失！</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/67b4c75c443fda45deff151218017432.png" alt=""></p>
<ul>
<li>
<p>消息传输三个阶段</p>
<p>1、生产者发送消息到MQ</p>
<p>2、MQ服务端存储消息</p>
<p>3、消费者从MQ中消费消息</p>
</li>
<li>
<p>在整个消息的传输过程中哪些地方可能会导致消息的丢失呢?</p>
</li>
</ul>
<p>1、生产者发送消息到MQ：交换机的名字写错了、routingKey写错了</p>
<p>2、MQ服务端存储消息: MQ服务器宕机了(默认情况下消息是存储于内存中)</p>
<p>3、消费者从MQ中消费消息：消费者获取到消息以后还没有及时处理，消费者服务宕机了</p>
<h3 id="消息可靠性投递">消息可靠性投递</h3>
<p>生产者发送消息的时候有两个阶段：</p>
<p>1、生成者发生消息到exchange</p>
<p>2、交换机获取到消息以后把消息转发到队列中</p>
<p>针对上的两个阶段Rabbitmq提供了两种机制保障消息的可靠性投递：</p>
<p><strong>confirm</strong> <strong>确认模式：可以通过该机制确认消息是否可以正常发送到exchange</strong>：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/430a8675ec6578e5f5789ef7dca5148e.png" alt=""></p>
<p><strong>return</strong> <strong>退回模式：可以通过该机制确认消息是否可以正常发送到队列中</strong></p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/d2e066c7675f7e7433af1c9516ead9a0.png" alt=""></p>
<h4 id="confirm">confirm</h4>
<p>如下所示：</p>
<p>1、在配置文件中开启生产者确认机制</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span>      <span class="comment"># 开启生产者确认机制</span></span><br></pre></td></tr></table></figure>
<p>2、自定义RabbitTemplate，并为其绑定确认机制的回调函数，让生产者可以感知到消息是否正常投递给了交换机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.atguigu.rabbit.producer.config;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitTemplateConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate <span class="title function_">rabbitTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建RabbitTemplate对象</span></span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>(connectionFactory) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定生产者确认机制回调函数</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ack) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;消息正常发给交换机了...&quot;</span>);</span><br><span class="line">                    <span class="comment">// 修改数据库中消息的发送状态</span></span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> correlationData.getId();</span><br><span class="line">                    System.out.println(<span class="string">&quot;消息发送给交互机失败了...msgId ---&gt; &quot;</span> + msgId);</span><br><span class="line">                    <span class="comment">// 根据msgId从数据库中查询出消息，然后尝试重新进行发送，可以指定一个重新发送的最大次数，如果实际重试次数超过了最大此时就不需要在进行</span></span><br><span class="line">                    <span class="comment">// 重新发送，后期通过人工处理</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>3、发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在发送消息之前，将消息的内容写入到数据库中，并且为消息分配一个唯一的id，通过CorrelationData对象进行封装</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(msgId) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;direct_exchange2&quot;</span> , <span class="string">&quot;error&quot;</span> , <span class="string">&quot;hello direct exchange....&quot;</span> , correlationData);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="return机制">return机制</h4>
<p>如下所示：</p>
<p>1、在配置文件中开启生产者回退机制</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span>                 <span class="comment"># 开启生产者回退机制</span></span><br></pre></td></tr></table></figure>
<p>2、自定义RabbitTemplate，并为其绑定回退机制的回调函数，让生产者可以感知到消息是否正常投递给了队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定生产者回退机制回调函数</span></span><br><span class="line">rabbitTemplate.setMandatory(<span class="literal">true</span>);  <span class="comment">// 让rabbitmq将失败的消息的信息再次返回给生产者</span></span><br><span class="line">rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returnedMessage)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">exchange</span> <span class="operator">=</span> returnedMessage.getExchange();</span><br><span class="line">        <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> returnedMessage.getRoutingKey();</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> returnedMessage.getMessage();</span><br><span class="line">        <span class="type">int</span> <span class="variable">replyCode</span> <span class="operator">=</span> returnedMessage.getReplyCode();</span><br><span class="line">        <span class="type">String</span> <span class="variable">replyText</span> <span class="operator">=</span> returnedMessage.getReplyText();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">correlationId</span> <span class="operator">=</span> (String)message.getMessageProperties().getHeaders().get(<span class="string">&quot;spring_returned_message_correlation&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;correlationId：&quot;</span>+correlationId);</span><br><span class="line">        System.out.println(<span class="string">&quot;消息投递给队列失败了， msg ---&gt; &quot;</span> + msg);</span><br><span class="line">        System.out.println(<span class="string">&quot;replyCode ---&gt; &quot;</span> + replyCode);</span><br><span class="line">        System.out.println(<span class="string">&quot;replyText ---&gt; &quot;</span> + replyText);</span><br><span class="line">        System.out.println(<span class="string">&quot;exchange ---&gt; &quot;</span> + exchange);</span><br><span class="line">        System.out.println(<span class="string">&quot;routingKey ---&gt; &quot;</span> + routingKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>3、发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在发送消息之前，将消息的内容写入到数据库中，并且为消息分配一个唯一的id，通过CorrelationData对象进行封装</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(msgId) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;direct_exchange&quot;</span> , <span class="string">&quot;error2&quot;</span> , <span class="string">&quot;hello direct exchange....&quot;</span> , correlationData);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="消息可靠性存储">消息可靠性存储</h3>
<p>针对MQ服务端存储消息导致消息丢失的情况，那么此时只需要对如下的对象进行持久化即可。</p>
<p>1、消息开启持久化</p>
<p>2、队列开启持久化</p>
<p>3、交换机开启持久化</p>
<p>注意：Spring boot整合RabbitMQ默认的情况下创建的队列以及发送的消息都是持久化的。</p>
<p>设置消息为非持久化消息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在发送消息之前，将消息的内容写入到数据库中，并且为消息分配一个唯一的id，通过CorrelationData对象进行封装</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">msgId</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(msgId) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建消息的后置处理器对象</span></span><br><span class="line">    <span class="type">MessagePostProcessor</span> <span class="variable">messagePostProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>()&#123;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">            <span class="comment">//在springboot整合rabbitmq这里，默认发送到队列中的消息就是支持持久化的。</span></span><br><span class="line">            message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);  <span class="comment">// 设置该消息为非持久化消息</span></span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;direct_exchange&quot;</span> ,</span><br><span class="line">                                  <span class="string">&quot;error&quot;</span> ,</span><br><span class="line">                                  <span class="string">&quot;hello direct exchange....&quot;</span> ,</span><br><span class="line">                                  messagePostProcessor , correlationData );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="消息可靠性消费">消息可靠性消费</h3>
<p>消费者获取到消息以后需要给RabbitMQ服务端进行应答，RabbitMQ根据消费者的应答信息决定是否需要将消息从RabbitMQ的服务端删除掉。</p>
<p>应答模式：</p>
<p>1、none： 进行自动应答，消费者获取到消息以后直接给RabbitMQ返回ack，RabbitMQ直接将消息从队列中删除掉</p>
<p>2、manual： 手动应答，消费者可以根据消息消费的实际情况给RabbitMQ进行应答</p>
<p>3、auto(默认值)：由Spring容器来根据业务的执行特点进行对应的应答，如果业务执行正常，返回ack，业务执行异常，返回unack。</p>
<h4 id="none模式">none模式</h4>
<p>在消费者的application.yml文件中，设置消息者应答模式为none模式，如下所示：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">none</span></span><br></pre></td></tr></table></figure>
<h4 id="auto模式-默认模式">auto模式(默认模式)</h4>
<p>在消费者的application.yml文件中，设置消息者应答模式为auto模式，如下所示：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">auto</span>    <span class="comment"># 更改消费者应答模式为自动模式</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>1、测试重试的时候不能通过异常的输出次数来判断方法调用了几次。</p>
<p>2、重试次数耗尽以后会调用MessageRecoverer中的recover方法对消息进行处理掉。</p>
<ul>
<li>RejectAndDontRequeueRecoverer：拒绝而且不把消息重新放入队列（默认）</li>
<li>RepublishMessageRecoverer：重新发布消息</li>
</ul>
<h4 id="manual模式">manual模式</h4>
<p>auto模式当重试次数耗尽以后，消息的处理还是失败，直接将消息从RabbitMQ服务端删除掉，相当于消息丢失。那么针对这种情况最好使用manual模式。</p>
<p>在消费者的application.yml文件中，设置消息者应答模式为manual模式，如下所示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span>      <span class="comment"># 更改消费者应答模式为manual模式</span></span><br></pre></td></tr></table></figure>
<p>代码测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer01Listener</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = &quot;direct_queue_01&quot; , durable = &quot;true&quot;) ,</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;direct_exchange&quot; , durable = &quot;true&quot; , type = ExchangeTypes.DIRECT) ,</span></span><br><span class="line"><span class="meta">            key = &quot;error&quot;</span></span><br><span class="line"><span class="meta">    ))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumer01</span><span class="params">(Message message , Channel channel)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取消息相关信息</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();     <span class="comment">// 消息标签，标识消息的唯一性</span></span><br><span class="line">        <span class="type">byte</span>[] body = message.getBody();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">correlationId</span> <span class="operator">=</span> message.getMessageProperties().getCorrelationId();</span><br><span class="line">            System.out.println(<span class="string">&quot;consumer01Listener ...msg ----&gt; &quot;</span> + msg);</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span> ;</span><br><span class="line">            channel.basicAck(deliveryTag , <span class="literal">true</span>);           <span class="comment">// 正常消费返回应答ack</span></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//第一个参数表示拒绝 deliveryTag 对应的消息</span></span><br><span class="line">                <span class="comment">//第二个参数是表示否应用于多消息，</span></span><br><span class="line">                <span class="comment">//第三个参数表示是否 requeue，</span></span><br><span class="line">                <span class="comment">//与 basicReject 区别就是同时支持多个消息，可以 拒绝签收 该消费者先前接收未 ack 的所有消息。拒绝签收后的消息也会被自己消费到。</span></span><br><span class="line">                channel.basicNack(deliveryTag , <span class="literal">true</span> , <span class="literal">true</span>);      <span class="comment">// 非正常消费返回应答ack</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：业务代码产生了异常，消息不会从RabbitMQ服务端删除掉，但是出现了无限次消费的情况。</p>
<p>解决方案：设置最大重试次数(手动实现)、需要配合Redis。</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 解决死循环：指定最大的重试次数</span><br><span class="line"> * 消息的实际消费次数该怎么计算？借助于redis</span><br><span class="line"> * 一旦消息的实际消费次数  大于  指定的最大的重试次数，那么此时需要给rabbitmq返回ack, 在返回之前需要把消息写入到数据库中，后期人工处理。</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<h2 id="消费者限流">消费者限流</h2>
<p>具体实现：在消费者的application.yml配置文件中加入如下的配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span>      <span class="comment"># 更改消费者应答模式为自动模式</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">10</span>                  <span class="comment"># Rabbitmq服务端一次投递10个消息给消费者，当10个消息应答完毕以后在投递10个消息过来</span></span><br></pre></td></tr></table></figure>
<h2 id="消息存活时间">消息存活时间</h2>
<p>TTL 全称 Time To Live（存活时间/过期时间）。</p>
<p>当消息在队列中时间到达存活时间后，还没有被消费，会被自动清除。</p>
<p>RabbitMQ可以<strong>对消息设置过期时间</strong>，也可以<strong>对整个队列（Queue）设置过期时间</strong>。</p>
<p>给消息设置存活时间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MessagePostProcessor messagePostProcessor=<span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">        message.getMessageProperties().setExpiration(<span class="string">&quot;10000&quot;</span>);  <span class="comment">//单位是毫秒</span></span><br><span class="line">        message.getMessageProperties().setDeliveryMode(MessageDeliveryMode.NON_PERSISTENT);</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;fanout_exchange&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;1213&quot;</span>,messagePostProcessor);</span><br></pre></td></tr></table></figure>
<p><strong>注意：MQ默认只会把队列首部的消息进行是否过期验证，如果一条消息已经过期，但是不在队列首部，队列也不会将其移除出去。</strong></p>
<p>给队列设置消息存储时间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">Queue <span class="title function_">ttlQueue01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(<span class="string">&quot;ttl_queue01&quot;</span>).</span><br><span class="line">        ttl(<span class="number">10000</span>).    <span class="comment">//队列消息存活时间</span></span><br><span class="line">        build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queuesToDeclare= @Queue(value = &quot;ttl_queue02&quot;,</span></span><br><span class="line"><span class="meta">                                        arguments = @Argument(name = &quot;x-message-ttl&quot;, value = &quot;10000&quot;, type = &quot;java.lang.Long&quot;)</span></span><br><span class="line"><span class="meta">                                       ))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ttlQueue02</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">    String msg=<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody());</span><br><span class="line">    System.out.println(<span class="string">&quot;msg = &quot;</span> + msg);</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>
<h2 id="死信队列">死信队列</h2>
<p>死信：死掉的消息</p>
<p><strong>消息成为死信的三种情况</strong></p>
<p>1、队列消息数量到达限制；比如队列最大只能存储10条消息，而发了11条消息，根据先进先出，最先发的消息成为死信。</p>
<p>2、消费者拒接消费消息，basicNack/basicReject，并且不把消息重新放入原目标队列，requeue=false；</p>
<p>3、原队列存在消息存活时间设置，消息到达存活时间未被消费；</p>
<p>注意：默认情况下Rabbitmq会直接将死信丢弃掉，但是如果在系统中提供了死信队列，那么此时就会把消息投递给死信队列。</p>
<p>在存储死信到死信队列的时候，需要使用到死信交换机：</p>
<p>DeadLetter Exchange（死信交换机），英文缩写：DLX 。当消息成为Dead message后，可以被重新发送到另一个交换机，这个交换机就是DLX。后期这个交换机</p>
<p>就可以将消息投递到与之绑定的死信队列中。</p>
<p>如下图所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/ddfba4c665c00c85222e698362591dc0.png" alt=""></p>
<p>代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明死信交换机</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Exchange <span class="title function_">dlxExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Exchange</span> <span class="variable">dlx</span> <span class="operator">=</span> ExchangeBuilder.directExchange(<span class="string">&quot;dlx_exchange&quot;</span>).durable(<span class="literal">true</span>).build();</span><br><span class="line">    <span class="keyword">return</span> dlx ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明死信队列</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">dlxQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(<span class="string">&quot;dlx_queue&quot;</span>).build();</span><br><span class="line">    <span class="keyword">return</span> queue ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明死信交换机和死信队列绑定信息</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">dlxQueueBinding</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Binding</span> <span class="variable">binding</span> <span class="operator">=</span> BindingBuilder.bind(dlxQueue()).to(dlxExchange())</span><br><span class="line">        .with(<span class="string">&quot;dlx&quot;</span>).noargs();</span><br><span class="line">    <span class="keyword">return</span> binding ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明队列，并且绑定死信交换机</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">directQueue01</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(<span class="string">&quot;direct_queue_01&quot;</span>)</span><br><span class="line">        .maxLength(<span class="number">10</span>)</span><br><span class="line">        .deadLetterExchange(<span class="string">&quot;dlx_exchange&quot;</span>)</span><br><span class="line">        .deadLetterRoutingKey(<span class="string">&quot;dlx&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">return</span> queue ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="延迟队列">延迟队列</h2>
<p>延迟队列存储的对象肯定是对应的延时消息，<strong>所谓延时消息是指当消息被发送以后，并不想让消费者立即拿到消息，而是等待指定时间后，消费者才拿到这个消息进行消费。</strong></p>
<p>场景：在订单系统中，一个用户下单之后通常有30分钟的时间进行支付，如果30分钟之内没有支付成功，那么这个订单将进行取消处理。这时就可以使用延时队列将</p>
<p>订单信息发送到延时队列。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/0351ea53595b135a2a797be3678b9a59.png" alt=""></p>
<p><strong>在RabbitMQ中并未提供延迟队列功能</strong>。但是可以使用：<strong>ttl +死信队列</strong> 组合实现延迟队列的效果。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/21234614547b24848bfabec61b87c25d.png" alt=""></p>
<p>当然延迟队列还有其他应用场景：</p>
<p>1.公众号文章的延迟发布</p>
<p>2.邮件的延迟发送</p>
<p>3.订单超时30分钟未支付自动取消订单</p>
<h2 id="消息的重复消费问题">消息的重复消费问题</h2>
<h3 id="消息百分百成功投递架构">消息百分百成功投递架构</h3>
<p>针对一些特殊的业务，要严格保证消息能够进行正常传输。那么此时在进行消息投递的时候，就可以使用如下的架构保证消息百分百成功投递：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/8f8898b0d20d0463641888af97add27d.png" alt=""></p>
<p>Step 1： 首先把消息信息(业务数据）存储到数据库中，紧接着，我们再把这个消息记录也存储到一张消息记录表里（或者另外一个同源数据库的消息记录表），并且</p>
<p>在消息数据库表中需要指定一个状态字段<strong>status</strong>来记录消息的投递状态。</p>
<p>Step 2：发送消息到MQ Broker节点（采用confirm方式发送，会有异步的返回结果）</p>
<p>Step 3、4：生产者端接受MQ Broker节点返回的Confirm确认消息结果，然后进行更新消息记录表里的消息状态。比如默认Status = 0 当收到消息确认成功后，更</p>
<p>新为1即可！</p>
<p>Step 5：但是在消息确认这个过程中可能由于网络闪断、MQ Broker端异常等原因导致 回送消息失败或者异常。这个时候就需要发送方（生产者）对消息进行可靠</p>
<p>性投递了，保障消息不丢失，100%的投递成功！（有一种极限情况是闪断，Broker返回的成功确认消息，但是生产端由于网络闪断没收到，这个时候重新投递可能</p>
<p>会造成消息重复，需要消费端去做幂等处理）所以我们需要有一个定时任务，（比如每5分钟拉取一下处于中间状态的消息，当然这个消息可以设置一个超时时间，比</p>
<p>如超过1分钟 Status = 0 ，也就说明了1分钟这个时间窗口内，我们的消息没有被确认，那么会被定时任务拉取出来）</p>
<p>Step 6：接下来我们把中间状态的消息进行重新投递 <strong>retry send</strong>，继续发送消息到MQ ，当然也可能有多种原因导致发送失败</p>
<p>Step 7：我们可以采用设置最大努力尝试次数，比如投递了3次，还是失败，那么我们可以将最终状态设置为Status = 2 ，最后 交由人工解决处理此类问题（或者把</p>
<p>消息转储到失败表中）。</p>
<p><strong>情况一</strong>：投递过程中产生了网络抖动不会导致消息丢失(因为消息已经入库)</p>
<p><strong>情况二</strong>：confirm回执的时候产生了网络抖动不会导致消息丢失(因为消息已经入库)</p>
<blockquote>
<p>具体思路：如果想实现消息的百分百投递:</p>
<ol>
<li>就需解决在投递过程中如果消息丢失，这时就需要在发送消息的一端将消息持久化保存，记录状态，只有消息成功执行之后执行回调时改变状态，代表消息是否已经被消费，如果没有，则可以采用定时任务去执行那些状态为未被消化的消息</li>
<li>如果在执行回调时丢失，说明消息已经被消费，但是状态未成功改变，此时就可能发生消息 的重复消费</li>
</ol>
</blockquote>
<p>数据库表设计：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `broker_message_log`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `broker_message_log` (</span><br><span class="line">  `message_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;消息唯一ID&#x27;</span>,</span><br><span class="line">  `message` <span class="type">varchar</span>(<span class="number">4000</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;消息内容&#x27;</span>,</span><br><span class="line">  `try_count` <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;重试次数&#x27;</span>,</span><br><span class="line">  `status` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;消息投递状态 0投递中,1投递成功,2投递失败&#x27;</span>,</span><br><span class="line">  `next_retry` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0000-00-00 00：00：00&#x27;</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;下一次重试时间&#x27;</span>,</span><br><span class="line">  `create_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0000-00-00 00：00：00&#x27;</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0000-00-00 00：00：00&#x27;</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`message_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_order</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_order`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `message_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2018091102</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<h3 id="消息的重复消费问题-v2">消息的重复消费问题</h3>
<p>采用上述架构实现消息的投递，那么此时就会出现消息的重复消费问题。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/3ae48ef943494a8aa938995e3b2d8ccd.png" alt=""></p>
<p>MQ中出现了重复消息，那么此时就会导致重复消费问题。在有一些特殊的业务场景下，是不允许出现重复消息的，比如扣减库存。</p>
<h4 id="幂等性处理">幂等性处理</h4>
<p>**幂等性指一次和多次请求某一个资源对于资源本身应该具有同样的结果。**也就是说,其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p>
<p>在MQ中指,消费多条相同的消息,得到与消费该消息一次相同的结果。</p>
<p>消息幂等性保障 ：<strong>数据库唯一字段</strong></p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/57d9c0ecf7179c42dc8c44d5710756e4.png" alt=""></p>
<blockquote>
<p>具体思路： 为了实现消息的百分百成功投递，就可能会发生消息的重复消费，</p>
<p>解决思路: 幂等性处理,具体实现就是在消息的消费方，将所有消费的消息进行持久化记录，每一个消息都有它的唯一的id，当有重复的消息传递过来时，先去查找，如果存在相同id，就不进行消费。</p>
</blockquote>
<h2 id="消息的重发">消息的重发</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spzx.common.rabbit.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.spzx.common.rabbit.domain.CorrelationRetryData;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.event.ApplicationReadyEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.spzx.common.rabbit.Constants.MqConstants.RABBIT_MQ_KEY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/10/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfig</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationReadyEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationReadyEvent event)</span> &#123;</span><br><span class="line">        setConfirm();</span><br><span class="line">        setReturn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setConfirm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.rabbitTemplate.setConfirmCallback(((correlationData, ack, cause) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;消息发送到交换机&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;消息没有发送到交换机:&#123;&#125;&quot;</span>,cause);</span><br><span class="line">                retrySend(correlationData);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setReturn</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.rabbitTemplate.setReturnsCallback(returned -&gt; &#123;</span><br><span class="line">            log.error(<span class="string">&quot;消息没有发送到队列:&#123;&#125;&quot;</span>,returned);</span><br><span class="line">            <span class="type">String</span> <span class="variable">retryDataId</span> <span class="operator">=</span> returned.getMessage().getMessageProperties().getHeader(<span class="string">&quot;spring_returned_message_correlation&quot;</span>);</span><br><span class="line">            <span class="type">CorrelationRetryData</span> <span class="variable">retryData</span> <span class="operator">=</span> (CorrelationRetryData) redisTemplate.opsForValue().get(RABBIT_MQ_KEY+retryDataId);</span><br><span class="line">            <span class="keyword">if</span> (retryData.isDelay()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;延迟消息&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            retrySend(retryData);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">retrySend</span><span class="params">(CorrelationData correlationData)</span>&#123;</span><br><span class="line">        CorrelationRetryData retryData= (CorrelationRetryData) correlationData;</span><br><span class="line">        <span class="type">int</span> <span class="variable">retryCount</span> <span class="operator">=</span> retryData.getRetryCount();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exchange</span> <span class="operator">=</span> retryData.getExchange();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">message</span> <span class="operator">=</span> retryData.getMessage();</span><br><span class="line">        <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> retryData.getRoutingKey();</span><br><span class="line">        <span class="type">int</span> <span class="variable">delayTime</span> <span class="operator">=</span> retryData.getDelayTime();</span><br><span class="line">        <span class="type">String</span> <span class="variable">retryDataId</span> <span class="operator">=</span> retryData.getId();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (retryCount &gt;=<span class="number">3</span>) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;管理员介入:&#123;&#125;&quot;</span>,retryData);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(retryData.isDelay())&#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(exchange,routingKey,message,message1 -&gt; &#123;</span><br><span class="line">                message1.getMessageProperties().setDelay((<span class="type">int</span>) (delayTime*<span class="number">1000</span>));</span><br><span class="line">                <span class="keyword">return</span> message1;</span><br><span class="line">            &#125;,retryData);</span><br><span class="line">            redisTemplate.opsForValue().set(RABBIT_MQ_KEY+retryDataId,retryData,<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        retryData.setRetryCount(++retryCount);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchange,routingKey,message,retryData);</span><br><span class="line">        redisTemplate.opsForValue().set(RABBIT_MQ_KEY+retryDataId,retryData,<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">        log.info(<span class="string">&quot;重发,第&#123;&#125;次&quot;</span>,retryCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Sentinel</title>
    <url>/2025/09/15/Sentinel/</url>
    <content><![CDATA[<h1>Sentinel</h1>
<h2 id="服务雪崩">服务雪崩</h2>
<p>概述：在微服务系统架构中，服务间调用关系错综复杂，一个微服务往往依赖于多个其它微服务。一个服务的不可用导致整个系统的不可用的现象就被称之为雪崩效应。</p>
<p>如下图所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/47ec9b7d45b743de84822380f7348e7d.png" alt="image.png"></p>
<h3 id="解决方案">解决方案</h3>
<h4 id="超时处理">超时处理</h4>
<p>超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待</p>
<h4 id="隔离处理">隔离处理</h4>
<p>隔离处理：将错误隔离在可控的范围之内，不要让其影响到其他的程序的运行。</p>
<h4 id="熔断处理">熔断处理</h4>
<p>熔断处理：由<strong>断路器</strong>统计业务执行的异常比例，如果超出阈值则会<strong>熔断</strong>该业务，拦截访问该业务的一切请求。</p>
<h4 id="流量控制">流量控制</h4>
<p>流量控制：限制业务访问的QPS(每秒的请求数)，避免服务因流量的突增而故障。</p>
<h2 id="整合sentinel">整合sentinel</h2>
<p>我们在spzx-cloud-user中整合sentinel，并连接sentinel的控制台，步骤如下：</p>
<p>1、引入sentinel依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、配置控制台</p>
<p>修改application.yaml文件，添加下面内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span>  <span class="comment"># 配置sentinel控制台地址</span></span><br></pre></td></tr></table></figure>
<p>3、访问spzx-cloud-user的任意接口</p>
<p>打开浏览器，访问<a href="http://localhost:10100/api/user/findUserByUserId/1%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%89%8D%E8%83%BD%E8%A7%A6%E5%8F%91sentinel%E7%9A%84%E7%9B%91%E6%8E%A7%E3%80%82%E7%84%B6%E5%90%8E%E5%86%8D%E8%AE%BF%E9%97%AEsentinel%E7%9A%84%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%95%88%E6%9E%9C%EF%BC%9A">http://localhost:10100/api/user/findUserByUserId/1，这样才能触发sentinel的监控。然后再访问sentinel的控制台，查看效果：</a></p>
<h2 id="流控模式">流控模式</h2>
<h3 id="控模式简介">控模式简介</h3>
<p>在添加限流规则时，点击高级选项，可以选择三种<strong>流控模式</strong>：</p>
<p>1、直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</p>
<p>2、关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</p>
<p>3、链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</p>
<h4 id="关联模式">关联模式</h4>
<p>关联模式：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</p>
<p><strong>语法说明</strong>：对/api/user/updateUserById资源的请求进行统计，当访问流量超过阈值时，就对/api/user/findUserByUserId/{userId}进行限流，避免影响/api/user/updateUserById资源。</p>
<p>使用场景：比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是优先支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。</p>
<h5 id="关联流控模式的使用场景：">关联流控模式的使用场景：</h5>
<p>1、两个有竞争关系的资源</p>
<p>2、一个优先级较高，一个优先级较低</p>
<p>对高优先级的资源的流量进行统计，当超过阈值对低优先级的资源进行限流。</p>
<h4 id="链路模式">链路模式</h4>
<p>链路模式：只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值，如果超过阈值对从该链路请求进行限流。</p>
<p>配置方式：</p>
<p>1、/api/user/save --&gt; users</p>
<p>2、/api/user/query --&gt; users</p>
<h5 id="实际场景">实际场景</h5>
<p>当多个cantoller访问同一个资源时（自定义名称，在service上），实现对其中某些请求路径做流控，</p>
<ol>
<li>
<p>在需要进行流控的资源上标记资源名称</p>
<p>通过**@SentinelResource**标记UserService中的queryUsers方法为一个sentinel监控的资源(默认情况下，sentinel只监控controller方法)</p>
</li>
<li>
<p>更改application.yml文件中的sentinel配置</p>
<p>链路模式中，是对不同来源的两个链路做监控。但是sentinel默认会给进入spring mvc的所有请求设置同一个root资源，会导致链路模式失效。因此需要关闭这种资源整合。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment"># 关闭context整合</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>对资源进行流控，添加流控规则</p>
</li>
</ol>
<h3 id="流控效果">流控效果</h3>
<p>流控效果是指请求达到流控阈值时应该采取的措施，包括三种：</p>
<p>1、快速失败：达到阈值后，新的请求会被立即拒绝并抛出FlowException异常，是默认的处理方式</p>
<p>2、warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常，但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值</p>
<p>3、排队等待：让所有的请求按照先后次序进入到一个队列中进行排队，当某一个请求最大的预期等待时间超过了所设定的超时时间时同样是拒绝并抛出异常</p>
<h4 id="warm-up">warm up</h4>
<p>阈值一般是一个微服务能承担的最大QPS，但是一个服务刚刚启动时，一切资源尚未初始化（<strong>冷启动</strong>），如果直接将QPS跑到最大值，可能导致服务瞬间宕机。</p>
<p>warm up也叫<strong>预热模式</strong>，是应对服务冷启动的一种方案。<strong>阈值会动态变化</strong>，从一个较小值逐渐增加到最大阈值。</p>
<p><strong>工作特点</strong>：请求阈值初始值是 maxThreshold / coldFactor, 持续指定时长(预热时间)后，逐渐提高到maxThreshold值，而coldFactor的默认值是3。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/78d8e6e08ce44c6bbb4195be6a188b3e.png" alt="image.png"></p>
<h4 id="排队等待">排队等待</h4>
<p><strong>排队等待</strong>：让所有的请求按照先后次序进入到一个队列中进行排队，当某一个请求最大的预期等待时间超过了所设定的超时时间时同样是拒绝并抛出异常</p>
<p>例如：QPS = 5，意味着每200ms处理一个队列中的请求；timeout = 2000，意味着<strong>预期等待时长</strong>超过2000ms的请求会被拒绝并抛出异常。</p>
<p>那什么叫做预期等待时长呢？</p>
<p>比如现在一下子来了12 个请求，因为每200ms执行一个请求，那么：</p>
<p>1、第6个请求的<strong>预期等待时长</strong> =  200 * （6 - 1） = 1000ms</p>
<p>2、第12个请求的预期等待时长 = 200 * （12-1） = 2200ms</p>
<h3 id="热点参数限流">热点参数限流</h3>
<h4 id="配置介绍">配置介绍</h4>
<p>之前的限流是统计访问某个资源的所有请求，判断是否超过QPS阈值。而热点参数限流是<strong>分别统计参数值相同的请求</strong>，判断是否超过QPS阈值。</p>
<blockquote>
<p>对同一个接口，不同的参数进行限流</p>
</blockquote>
<p>实现步骤：</p>
<p>1、标记资源</p>
<p>给UserController中的/api/user/findUserByUserId/{userId}资源添加注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(&quot;hot&quot;)</span>  <span class="comment">// 声明资源名称</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/findUserByUserId/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findUserByUserId</span><span class="params">(<span class="meta">@PathVariable(value = &quot;userId&quot;)</span> Long userId ,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestHeader(name = &quot;Truth&quot; , required = false)</span>String header)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;UserController...findUserByUserId方法执行了... ,header: &#123;&#125; , dateformat: &#123;&#125; &quot;</span> , header , patternProperties.getDateformat());</span><br><span class="line">    <span class="keyword">return</span> userService.findUserByUserId(userId) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、设置热点参数限流规则</p>
<p>可以给资源设置默认的规则，也可以对特殊参数设置对应的规则</p>
<h3 id="服务降级">服务降级</h3>
<p>隔离处理：将错误隔离在可控的范围之内，不要让其影响到其他的程序的运行。</p>
<h4 id="案例演示">案例演示</h4>
<p>为了让测试效果更加明显一点，可以让访问/api/user/findUserByUserId/{userId}接口的线程出异常，然后用jemeter给spzx-cloud-order服务中的调用用户微服务的接口发送请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/findUserByUserId/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findUserByUserId</span><span class="params">(<span class="meta">@PathVariable(value = &quot;userId&quot;)</span> Long userId ,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestHeader(name = &quot;Truth&quot; , required = false)</span>String header)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;UserController...findUserByUserId方法执行了... ,header: &#123;&#125; , dateformat: &#123;&#125; &quot;</span> , header , patternProperties.getDateformat());</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> userService.findUserByUserId(userId) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会发现报错，上述请求失败以后，直接返回返回500的错误状态码给用户,而这个错误请求并不是由于用户访问查询订单信息报错导致的，而是由于根据订单查询用户时报错的。因此直接给用户返回500的错误状态码其实不太友好，友好的做法当远程调用失败以后，返回一个默认的用户信息给前端，这种备用方案就是我们的降级方案。服务降级,如下所示：</p>
<p>实现步骤：</p>
<p>1、在spzx-cloud-order微服务中添加sentinel的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.并spzx-cloud-order微服务的application.yml文件中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 微服务整合sentinel</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure>
<p>实现步骤：</p>
<p>1、在spzx-cloud-order模块中定义一个类让其实现<strong>UserFeignClient</strong>接口，重写queryById方法，在该方法中编写降级逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  com.atguigu.spzx.cloud.feign.fallback;</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFeignClientFallback</span> <span class="keyword">implements</span> <span class="title class_">UserFeignClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryById</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;UserFeignClientFallback...queryById...方法执行了...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、在UserFeignClient接口中注册配置该降级类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;spzx-cloud-user&quot;, fallback = UserFeignClientFallback.class)</span>		</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeignClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/api/user/findUserByUserId/&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> Long userId)</span> ;	<span class="comment">// 根据userId查询用户信息的接口方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、把该降级类纳入到spring容器中</p>
<p>方案一：在spzx-cloud-order的启动类上通过@Import注解进行导入</p>
<p>方案二：使用Spring Boot3的自动化配置原理完成,SPI机制。</p>
<p>即：在resources目录下创建一个META-INF/spring文件夹，在该文件夹下创建一个org.springframework.boot.autoconfigure.AutoConfiguration.imports文件，文件的中的内容如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.atguigu.spzx.feign.order.fallback.UserFeignClientFallback</span><br></pre></td></tr></table></figure>
<p>方案三：直接在UserFeignClientFallback类上加@Component注解。</p>
<p>4、在spzx-cloud-order微服务的application.yml文件中</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># feign整合sentinel:第四步</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>4、重启服务，重新配置隔离规则，并进行测试</p>
<h3 id="熔断处理-v2">熔断处理</h3>
<h4 id="原理">原理</h4>
<p>熔断降级是解决雪崩问题的重要手段。其思路是由<strong>断路器</strong>统计服务调用的异常比例、异常数、慢请求比例，如果超出阈值则会<strong>熔断</strong>该服务。即拦截访</p>
<p>问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。</p>
<p>断路器（熔断器）控制熔断和放行是通过状态机来完成的：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/c98cf25d1dee4f6c911c21597d9d38e2.png" alt="image.png"></p>
<p>状态机包括三个状态：</p>
<p>1、closed：关闭状态，断路器放行所有请求，并开始统计异常比例、异常数、慢请求比例。超过阈值则切换到open状态</p>
<p>2、open：打开状态，服务调用被<strong>熔断</strong>，访问被熔断服务的请求会被拒绝，快速失败，直接走降级逻辑。Open状态5秒后会进入half-open状态</p>
<p>3、half-open：半开状态，放行一次请求，根据执行结果来判断接下来的操作。</p>
<p>① 请求成功：则切换到closed状态</p>
<p>② 请求失败：则切换到open状态</p>
<p>断路器熔断判断策略有三种：慢调用、异常比例、异常数</p>
<h4 id="慢调用比例">慢调用比例</h4>
<p>慢调用**：业务的响应时长（RT）大于指定时长的请求认定为慢调用请求。sentinel会统计指定时间内，请求数量超过设定的最小数量的请求并且慢调</p>
<p>用比例的比例。</p>
<p>如果慢调用比例大于设定的阈值，则触发熔断。</p>
<h4 id="异常比例和异常数">异常比例和异常数</h4>
<p><strong>异常比例或异常数</strong>：统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。</p>
<h3 id="自定义sentinel异常结果">自定义sentinel异常结果</h3>
<p>默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。如果要自定义异常时的返回结果，需要实现BlockExceptionHandler 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">  <span class="comment">//处理请求被限流、降级、授权拦截时抛出的异常：BlockException</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2, BlockException var3)</span> <span class="keyword">throws</span> Exception; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而 BlockException 包含很多个子类，分别对应不同的场景：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/9964b748a4e644f5880e4afbf11d5ba2.png" alt="image.png"></p>
<p>我们在 <strong>用户微服务</strong> 中定义类，实现 BlockExceptionHandler 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.cloud.user.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.BlockExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.system.SystemBlockException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义配置限流降级错误信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBlockExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ResultObject</span> <span class="variable">resultObject</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//根据限流降级的策略规则，不同的异常返回不同的提示语，</span></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FlowException) &#123;</span><br><span class="line">            resultObject = ResultObject.builder().code(<span class="number">100</span>).message(<span class="string">&quot;接口限流了&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DegradeException)&#123;</span><br><span class="line">            resultObject = ResultObject.builder().code(<span class="number">101</span>).message(<span class="string">&quot;服务降级了&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParamFlowException)&#123;</span><br><span class="line">            resultObject = ResultObject.builder().code(<span class="number">102</span>).message(<span class="string">&quot;热点参数限流了&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> SystemBlockException)&#123;</span><br><span class="line">            resultObject = ResultObject.builder().code(<span class="number">103</span>).message(<span class="string">&quot;触发系统保护规则了&quot;</span>).build();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> AuthorityException)&#123;</span><br><span class="line">            resultObject = ResultObject.builder().code(<span class="number">104</span>).message(<span class="string">&quot;授权规则不通过&quot;</span>).build();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValue(response.getWriter(),resultObject);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//如果需要跳转到指定页面使用如下处理：</span></span><br><span class="line">        <span class="comment">//request.getRequestDispatcher(&quot;/index.jsp&quot;).forward(request,response);</span></span><br><span class="line">        <span class="comment">//跳转到网站</span></span><br><span class="line">        <span class="comment">//response.sendRedirect(&quot;https://blog.csdn.net/weixin_44985880&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>注：在上面的自定义类中，如果不需要返回自定义的响应结果，而是跳转到对应页面，可以将返回结果处理换成方法中最后的两种处理方法即可。</strong></p>
<h2 id="规则持久化">规则持久化</h2>
<h3 id="规则持久化概述">规则持久化概述</h3>
<p>默认情况下sentinel没有对规则进行持久化，让对服务进行重启以后，Sentinel规则将消失，生产环境需要将配置规则进行持久化</p>
<p>持久化思想：<strong>将限流配置规则持久化进Nacos保存</strong>，只要刷新spzx-cloud-order某个rest地址，sentinel控制台的流控规则就能看到，只要Nacos里面的配置不删除，针对spzx-cloud-order上Sentinel上的流控规则持续有效</p>
<h3 id="Nacos添加规则配置">Nacos添加规则配置</h3>
<p>在nacos配置中心中添加规则配置</p>
<p>规则配置内容如下所示：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="attr">&quot;resource&quot;:</span> <span class="string">&quot;/testA&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;limitApp&quot;:</span> <span class="string">&quot;default&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;grade&quot;:</span> <span class="number">1</span>,</span><br><span class="line">         <span class="attr">&quot;count&quot;:</span> <span class="number">1</span>,</span><br><span class="line">         <span class="attr">&quot;strategy&quot;:</span> <span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;controlBehavior&quot;:</span> <span class="number">0</span>,</span><br><span class="line">         <span class="attr">&quot;clusterMode&quot;:</span> <span class="literal">false</span> </span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>规则说明：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/94c3ccf37e2441b5b46504f038a31923.png" alt="image.png"></p>
<h3 id="读取nacos规则配置">读取nacos规则配置</h3>
<p>微服务可以从nacos配置中心读取规则配置信息然后进行使用。</p>
<p>具体步骤如下所示：</p>
<p>1、在spzx-cloud-order微服务中的pom.xml文件中添加如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、在spzx-cloud-order微服务的application.yml文件添加如下配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置数据库的连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">serverAddr:</span> <span class="number">192.168</span><span class="number">.136</span><span class="number">.142</span><span class="string">:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">sentinel-rules</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">dataType:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">ruleType:</span> <span class="string">flow</span>  <span class="comment"># 还可以是：degrade、authority、param-flow,system</span></span><br></pre></td></tr></table></figure>
<p>3、重启spzx-cloud-order微服务，访问任意一个接口，此时就可以在sentinel的控制台看到对应的流控规则了</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>ShardingSphere</title>
    <url>/2025/09/15/ShardingSphere/</url>
    <content><![CDATA[<h1>高性能架构模式</h1>
<ul>
<li>
<p>性能数据库集群的方式是:</p>
<ul>
<li>读写分离</li>
<li>数据库分片</li>
</ul>
</li>
</ul>
<h2 id="读写分离架构">读写分离架构</h2>
<ul>
<li><strong>读写分离原理</strong>: 读写分离的基本原理是将数据库读写操作分散到不同的节点上，下面是其基本架构图：<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/5c55180dd754470ba283c0df1470d846.png" alt="image.png"></li>
<li>读写分离的基本实现：
<ul>
<li>主库负责处理事务性的增删改操作，从库负责处理查询操作，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。</li>
<li>读写分离是根据 SQL 语义的分析，将读操作和写操作分别路由至主库与从库。</li>
<li>通过一主多从的配置方式，可以将查询请求均匀的分散到多个数据副本，能够进一步的提升系统的处理能力。</li>
<li>使用多主多从的方式，不但能够提升系统的吞吐量，还能够提升系统的可用性，可以达到在任何一个数据库宕机，甚至磁盘物理损坏的情况下仍然不影响系统的正常运行。</li>
</ul>
</li>
</ul>
<h3 id="CAP-理论">CAP 理论</h3>
<ul>
<li>CAP 定理（CAP theorem）又被称作布鲁尔定理（Brewer’s theorem），是加州大学伯克利分校的计算机科学家埃里克·布鲁尔（Eric Brewer）在 2000 年的 ACM PODC 上提出的一个猜想。对于设计分布式系统的架构师来说，CAP 是必须掌握的理论。</li>
<li>在一个分布式系统中，当涉及读写操作时，只能保证一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三者中的两个，另外一个必须被牺牲。
<ul>
<li>C 一致性（Consistency）：对某个指定的客户端来说，读操作保证能够返回最新的写操作结果</li>
<li>A 可用性（Availability）：非故障的节点在合理的时间内返回合理的响应（不是错误和超时的响应）</li>
<li>P 分区容忍性（Partition Tolerance）：当出现网络分区后（可能是丢包，也可能是连接中断，还可能是拥塞），系统能够继续“履行职责”</li>
</ul>
</li>
</ul>
<h3 id="CAP特点">CAP特点</h3>
<ul>
<li>在实际设计过程中，每个系统不可能只处理一种数据，而是包含多种类型的数据，有的数据必须选择 CP，有的数据必须选择 AP，分布式系统理论上不可能选择 CA 架构。</li>
<li>CP: 在分布式数据库中 , 为了保持<code>一致性</code>,  当一个节点更新了数据之后, 另外一个节点还没来得及更新,但是此时有服务访问, 该服务必须返回错误相关信息, 但是却违背了 可用性. 因此,只能满足 CP</li>
<li>AP: 为了保持<code>可用性</code>, 即使节点还没更新, 当有服务访问时, 服务会返回一个 <code>合理</code>的结果, 但是这个结果可能不是 <code>正确</code>,这就不满足<code>一致性</code>.</li>
</ul>
<p><strong>一致性</strong>:  CAP 理论中的 C 在实践中是不可能完美实现的，在数据复制的过程中，节点N1 和节点 N2 的数据并不一致（强一致性）。即使无法做到强一致性，但应用可以采用适合的方式达到最终一致性。具有如下特点：</p>
<ul>
<li>基本可用（Basically Available）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li>
<li>软状态（Soft State）：允许系统存在中间状态，而该中间状态不会影响系统整体可用性。这里的中间状态就是 CAP 理论中的数据不一致。</li>
<li>最终一致性（Eventual Consistency）：系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。</li>
</ul>
<h2 id="数据库分片架构">数据库分片架构</h2>
<p><strong>读写分离的问题</strong>：</p>
<p>读写分离分散了数据库读写操作的压力，但没有分散存储压力，为了满足业务数据存储的需求，就需要将存储分散到多台数据库服务器上。</p>
<p><strong>数据分片</strong>：</p>
<p>将存放在单一数据库中的数据分散地存放至多个数据库或表中，以达到提升性能瓶颈以及可用性的效果。 数据分片的有效手段是对关系型数据库进行分库和分表。数据分片的拆分方式又分为<strong>垂直分片</strong>和<strong>水平分片</strong>。</p>
<h3 id="垂直分片">垂直分片</h3>
<h4 id="垂直分库">垂直分库</h4>
<ul>
<li>将不同的表存储在不同的数据库中</li>
<li>按照业务拆分的方式称为垂直分片，又称为纵向拆分，它的核心理念是专库专用。 在拆分之前，一个数据库由多个数据表构成，每个表对应着不同的业务。而拆分之后，则是按照业务将表进行归类，分布到不同的数据库中，从而将压力分散至不同的数据库。</li>
<li>垂直拆分可以缓解数据量和访问量带来的问题，但无法根治。如果垂直拆分之后，表中的数据量依然超过单节点所能承载的阈值，则需要水平分片来进一步处理。</li>
</ul>
<h4 id="垂直分表：">垂直分表：</h4>
<p><code>垂直分表适合将表中某些不常用的列，或者是占了大量空间的列拆分出去。</code></p>
<ul>
<li>拆分一个表中的常用字段和 不常用字段, 这样在查找时, 就只用查找常用的字段,如果需要其他不常用的, 则可以在另外一张表中查找.</li>
</ul>
<h3 id="水平分片">水平分片</h3>
<p>水平分片又称为横向拆分。 相对于垂直分片，它不再将数据根据业务逻辑分类，而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中，每个分片仅包含数据的一部分。 例如：根据主键分片，偶数主键的记录放入 0 库（或表），奇数主键的记录放入 1 库（或表），</p>
<ul>
<li>
<p>单表进行切分后，是否将多个表分散在不同的数据库服务器中，可以根据实际的切分效果来确定。</p>
</li>
<li>
<p>水平分表：单表切分为多表后，新的表即使在同一个数据库服务器中，也可能带来可观的性能提升，如果性能能够满足业务要求，可以不拆分到多台数据库服务器，毕竟业务分库也会引入很多复杂性；</p>
</li>
<li>
<p>水平分库：如果单表拆分为多表后，单台服务器依然无法满足性能要求，那就需要将多个表分散在不同的数据库服务器中。</p>
</li>
</ul>
<blockquote>
<p>阿里巴巴Java开发手册：<br>
【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。<br>
说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。</p>
</blockquote>
<h1>解决方案</h1>
<h2 id="程序代码封装">程序代码封装</h2>
<p>程序代码封装指在代码中抽象一个数据访问层（或中间层封装），实现读写操作分离和数据库服务器连接的管理。</p>
<p>其基本架构是：以读写分离为例<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/d628ef662dd54e1f80385800f594f9ba.png" alt="image.png"></p>
<h2 id="中间件封装">中间件封装</h2>
<p>中间件封装指的是独立一套系统出来，实现读写操作分离和数据库服务器连接的管理。对于业务服务器来说，访问中间件和访问数据库没有区别，在业务服务器看来，中间件就是一个数据库服务器。</p>
<p>基本架构是：以读写分离为例</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/9183594276f6454fa4f70387b7d06341.png" alt="image.png"></p>
<h2 id="常用解决方案">常用解决方案</h2>
<ul>
<li>
<p>Apache ShardingSphere</p>
<ul>
<li>程序代码封装：ShardingSphere-JDBC</li>
<li>中间件封装：ShardingSphere-Proxy</li>
</ul>
<p>官网：<a href="https://shardingsphere.apache.org/index_zh.html">https://shardingsphere.apache.org/index_zh.html</a><br>
文档：<a href="https://shardingsphere.apache.org/document/5.4.0/cn/overview/">https://shardingsphere.apache.org/document/5.4.0/cn/overview/</a></p>
</li>
<li>
<p>MyCat：数据库中间件</p>
</li>
</ul>
<h1>MySQL主从同步</h1>
<h2 id="MySQL主从同步原理">MySQL主从同步原理</h2>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/d6fda58abba1499db3feb43c9717be84.png" alt="image.png"></p>
<p><strong>基本原理</strong>：</p>
<p>slave会从master读取binlog来进行数据同步</p>
<p><strong>具体步骤：</strong></p>
<ul>
<li>step1：master将数据改变记录到二进制日志（binary log）中。</li>
<li>step2： 当slave上执行 start slave 命令之后，slave会创建一个 IO 线程用来连接master，请求master中的binlog。</li>
<li>step3：当slave连接master时，master会创建一个 log dump 线程，用于发送 binlog 的内容。在读取 binlog 的内容的操作中，会对主节点上的 binlog 加锁，当读取完成并发送给从服务器后解锁。</li>
<li>step4：IO 线程接收主节点 binlog dump 进程发来的更新之后，保存到 中继日志（relay log） 中。</li>
<li>step5：slave的SQL线程，读取relay log日志，并解析成具体操作，从而实现主从操作一致，最终数据一致。</li>
</ul>
<h2 id="一主多从配置">一主多从配置</h2>
<ul>
<li><strong>mysql 实现主从复制</strong></li>
</ul>
<h3 id="准备主服务器">准备主服务器</h3>
<h4 id="1-开启binlog日志">1. 开启binlog日志</h4>
<ul>
<li>binlog: 在主节点中,必须开启,  默认情况下是开启的</li>
<li>用于发送增删改的sql记录给从节点进行<strong>增量复制</strong>.</li>
<li>配置文件设置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment"># 服务器唯一id，默认值1</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 设置日志格式，默认值ROW</span></span><br><span class="line"><span class="attr">binlog_format</span>=<span class="string">STATEMENT</span></span><br><span class="line"><span class="comment"># 二进制日志名，默认binlog</span></span><br><span class="line"><span class="comment"># log-bin=binlog</span></span><br><span class="line"><span class="comment"># 设置需要复制的数据库，默认复制全部数据库</span></span><br><span class="line"><span class="comment">#binlog-do-db=mytestdb1</span></span><br><span class="line"><span class="comment">#binlog-do-db=mytestdb2</span></span><br><span class="line"><span class="comment"># 设置不需要复制的数据库</span></span><br><span class="line"><span class="comment">#binlog-ignore-db=mytestdb3</span></span><br><span class="line"><span class="comment">#binlog-ignore-db=mytestdb4</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>binlog格式说明：</p>
</li>
<li>
<p>binlog_format=STATEMENT：日志记录的是主机数据库的写指令，性能高，但是now()之类的函数以及获取系统参数的操作会出现主从数据不同步的问题。</p>
</li>
<li>
<p>binlog_format=ROW（默认）：日志记录的是主机数据库的写后的数据，批量操作时性能较差，解决now()或者  user()或者  @@hostname 等操作在主从机器上不一致的问题。</p>
</li>
<li>
<p>binlog_format=MIXED：是以上两种level的混合使用，有函数用ROW，没函数用STATEMENT</p>
</li>
</ul>
<h5 id="binlog-ignore-db和binlog-do-db的优先级问题：">binlog-ignore-db和binlog-do-db的优先级问题：</h5>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/ceccb614a5ec432d87d8924110cef2b2.png" alt="image.png"></p>
<h4 id="2-在主机中创建salve用户">2. 在主机中创建salve用户</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建slave用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;atguigu_slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 设置密码</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;atguigu_slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 授予复制权限</span></span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;atguigu_slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<ul>
<li>用户从机进行增量复制的用户</li>
</ul>
<h4 id="3-主机中查询master状态">3. 主机中查询master状态</h4>
<p>执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化</p>
<p><code>  SHOW MASTER STATUS;</code></p>
<p>记下File和Position的值。执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化。<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/11992bd177f44247bb8eeff392e05efa.png" alt="image.png"></p>
<h3 id="准备从服务器">准备从服务器</h3>
<h4 id="1-编写配置文件">1. 编写配置文件</h4>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment"># 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"># 中继日志名，默认xxxxxxxxxxxx-relay-bin</span></span><br><span class="line"><span class="comment">#relay-log=relay-bin</span></span><br></pre></td></tr></table></figure>
<h4 id="配置主从关系">配置主从关系</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;192.168.100.101&#x27;</span>,     # 主机的ip</span><br><span class="line">MASTER_USER<span class="operator">=</span><span class="string">&#x27;atguigu_slave&#x27;</span>,MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>, MASTER_PORT<span class="operator">=</span><span class="number">3306</span>,   # 主机的账号和端口号</span><br><span class="line">MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;binlog.000003&#x27;</span>,MASTER_LOG_POS<span class="operator">=</span><span class="number">1357</span>;        # log_file 的文件名        log的起始位置</span><br></pre></td></tr></table></figure>
<h3 id="启动主从同步">启动主从同步</h3>
<p>分别在两台从机上启动从机的复制功能，执行SQL：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">START SLAVE;</span><br><span class="line">-- 查看状态（不需要分号）</span><br><span class="line">SHOW SLAVE STATUS\G</span><br></pre></td></tr></table></figure>
<p>两个关键进程：下面两个参数都是Yes，则说明主从配置成功！<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/a9ab421ee8b74fe6b92e6ed87fdba0da.png" alt="image.png"></p>
<h1>ShardingSphere-JDBC读写分离</h1>
<h2 id="添加依赖">添加依赖</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--兼容jdk17和spring boot3--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yaml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>snakeyaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.jaxb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="配置shardingsphere">配置shardingsphere</h2>
<h3 id="application-yml">application.yml</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置 DataSource Driver</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.apache.shardingsphere.driver.ShardingSphereDriver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:shardingsphere:classpath:shardingsphere.yaml</span></span><br></pre></td></tr></table></figure>
<h3 id="shardingsphere-yaml">shardingsphere.yaml</h3>
<p>模式配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mode:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Standalone</span></span><br><span class="line"><span class="attr">repository:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">JDBC</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>数据源配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dataSources:</span></span><br><span class="line"><span class="attr">write_ds:</span></span><br><span class="line">  <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">  <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://192.168.100.101:3306/db_user</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">read_ds_0:</span></span><br><span class="line">  <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">  <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://192.168.100.101:3307/db_user</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">read_ds_1:</span></span><br><span class="line">  <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">  <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://192.168.100.101:3308/db_user</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>读写分离配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!READWRITE_SPLITTING</span></span><br><span class="line">  <span class="attr">dataSources:</span></span><br><span class="line">    <span class="attr">readwrite_ds:</span></span><br><span class="line">      <span class="attr">writeDataSourceName:</span> <span class="string">write_ds</span></span><br><span class="line">      <span class="attr">readDataSourceNames:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">read_ds_0</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">read_ds_1</span></span><br><span class="line">      <span class="attr">transactionalReadQueryStrategy:</span> <span class="string">PRIMARY</span> <span class="comment"># 事务内读请求的路由策略，可选值：PRIMARY（路由至主库）、FIXED（同一事务内路由至固定数据源）、DYNAMIC（同一事务内路由至非固定数据源）。默认值：DYNAMIC</span></span><br><span class="line">      <span class="attr">loadBalancerName:</span> <span class="string">random</span></span><br><span class="line">  <span class="attr">loadBalancers:</span></span><br><span class="line">    <span class="attr">random:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">RANDOM</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>读写分离配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!READWRITE_SPLITTING</span></span><br><span class="line">  <span class="attr">dataSources:</span></span><br><span class="line">    <span class="attr">readwrite_ds:</span></span><br><span class="line">      <span class="attr">writeDataSourceName:</span> <span class="string">write_ds</span></span><br><span class="line">      <span class="attr">readDataSourceNames:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">read_ds_0</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">read_ds_1</span></span><br><span class="line">      <span class="attr">transactionalReadQueryStrategy:</span> <span class="string">PRIMARY</span> <span class="comment"># 事务内读请求的路由策略，可选值：PRIMARY（路由至主库）、FIXED（同一事务内路由至固定数据源）、DYNAMIC（同一事务内路由至非固定数据源）。默认值：DYNAMIC</span></span><br><span class="line">      <span class="attr">loadBalancerName:</span> <span class="string">random</span></span><br><span class="line">  <span class="attr">loadBalancers:</span></span><br><span class="line">    <span class="attr">random:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">RANDOM</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出sql：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">props:</span></span><br><span class="line"><span class="attr">sql-show:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>负载均衡算法配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!READWRITE_SPLITTING</span></span><br><span class="line">  <span class="attr">loadBalancers:</span></span><br><span class="line">    <span class="attr">random:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">RANDOM</span></span><br><span class="line">    <span class="attr">round_robin:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ROUND_ROBIN</span></span><br><span class="line">    <span class="attr">weight:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">WEIGHT</span></span><br><span class="line">      <span class="attr">props:</span></span><br><span class="line">        <span class="attr">read_ds_0:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">read_ds_1:</span> <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="事务测试">事务测试</h3>
<p>transactionalReadQueryStrategy: PRIMARY</p>
<p>事务内读请求的路由策略，可选值：</p>
<p>PRIMARY（路由至主库）</p>
<p>FIXED（同一事务内路由至固定数据源）</p>
<p>DYNAMIC（同一事务内路由至非固定数据源）。默认值：DYNAMIC</p>
<h1>ShardingSphere-JDBC垂直分片</h1>
<ul>
<li>垂直分库   :  将不同的表存储在不同的数据库中</li>
<li>垂直分表   : 一张表分为多张表,结构不同.</li>
</ul>
<h2 id="垂直分片的配置">垂直分片的配置</h2>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模式配置</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">mode:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Standalone</span></span><br><span class="line">      <span class="attr">repository:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">JDBC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据源配置：</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">dataSources:</span></span><br><span class="line">      <span class="attr">user_ds:</span></span><br><span class="line">        <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://192.168.100.101:3301/db_user</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">order_ds_0:</span></span><br><span class="line">        <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://192.168.100.101:3310/db_order</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">order_ds_1:</span></span><br><span class="line">        <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://192.168.100.101:3311/db_order</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置一个order分片节点：</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">        <span class="attr">tables:</span></span><br><span class="line">          <span class="attr">t_user:</span></span><br><span class="line">            <span class="attr">actualDataNodes:</span> <span class="string">user_ds.t_user</span></span><br><span class="line">          <span class="attr">t_order:</span></span><br><span class="line">            <span class="attr">actualDataNodes:</span> <span class="string">order_ds_0.t_order0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出sql：</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql-show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改Order实体类的主键策略：</span></span><br><span class="line"></span><br><span class="line">    <span class="string">//@TableId(type</span> <span class="string">=</span> <span class="string">IdType.AUTO)//依赖数据库的主键自增策略</span></span><br><span class="line">    <span class="string">@TableId(type</span> <span class="string">=</span> <span class="string">IdType.ASSIGN_ID)//分布式id</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>ShardingSphere-JDBC水平分片</h1>
<ul>
<li>
<p>水平分库:</p>
<ul>
<li>多个数据库实例中:<br>
水平分库是指将同一个数据库的表，按照某种规则（比如根据用户ID或地理区域）分散到不同的数据库实例上。每个数据库实例存储相同的表结构，但表中的数据不同。这样可以减少单个数据库实例的压力，增加系统的吞吐量。</li>
</ul>
</li>
<li>
<p>水平分表:</p>
<ul>
<li>一个数据库实例中:<br>
水平分表是指将同一个表中的数据，按照某种规则划分成多个物理表，但这些表分布在同一个数据库中，逻辑上依然是一个表。水平分表的目的是减少单表的数据量，降低数据库操作的负担。</li>
</ul>
<h3 id="水平分库配置文件">水平分库配置文件</h3>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#模式</span></span><br><span class="line"><span class="attr">mode:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Standalone</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">JDBC</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据源</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_order_01:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://192.168.1.129:3340/db_order_01</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">ds_order_02:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://192.168.1.129:3341/db_order_01</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_order:</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_order_0$&#123;1..2&#125;.t_order_01</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">userid_inline</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span></span><br><span class="line">      <span class="attr">userid_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_order_0$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql 语句输出</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="水平分表配置文件">水平分表配置文件</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">#模式</span></span><br><span class="line"><span class="attr">mode:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Standalone</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">JDBC</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据源</span></span><br><span class="line"><span class="attr">dataSources:</span></span><br><span class="line">  <span class="attr">ds_order_01:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://192.168.1.129:3340/db_order_01</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">ds_order_02:</span></span><br><span class="line">    <span class="attr">dataSourceClassName:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">jdbcUrl:</span> <span class="string">jdbc:mysql://192.168.1.129:3341/db_order_01</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="type">!SHARDING</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">      <span class="attr">t_order:</span></span><br><span class="line">        <span class="attr">actualDataNodes:</span> <span class="string">ds_order_0$&#123;1..2&#125;.t_order_0$&#123;1..2&#125;</span></span><br><span class="line">        <span class="attr">databaseStrategy:</span>    <span class="comment"># 分库策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">user_id</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">userid_inline</span></span><br><span class="line">        <span class="attr">tableStrategy:</span>       <span class="comment"># 分表策略</span></span><br><span class="line">          <span class="attr">standard:</span></span><br><span class="line">            <span class="attr">shardingColumn:</span> <span class="string">id</span></span><br><span class="line">            <span class="attr">shardingAlgorithmName:</span> <span class="string">orderid_inline</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">shardingAlgorithms:</span></span><br><span class="line">      <span class="attr">orderid_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">t_order_0$&#123;id</span> <span class="string">%</span> <span class="number">2</span> <span class="string">+</span> <span class="number">1</span><span class="string">&#125;</span></span><br><span class="line">      <span class="attr">userid_inline:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">INLINE</span></span><br><span class="line">        <span class="attr">props:</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">ds_order_0$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql 语句输出</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line">  <span class="attr">sql-show:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>多表关联</h1>
<p>在server-order0、server-order1服务器中分别创建两张订单详情表t_order_item0、t_order_item1</p>
<p>我们希望同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联，因此这两张表我们使用相同的分片策略。</p>
<p>那么在t_order_item中我们也需要创建order_id和user_id这两个分片键</p>
<ul>
<li>当两个表存在关联,进行分库分表时,有关联的数据需要在同一个数据库的表中,</li>
<li>因此,当对其中一个表进行分库分表时, 另外一个表也需要有相同的分库分表列,且有相同的分库分表策略</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 项目启动时自动执行的方法</title>
    <url>/2025/09/15/Spring%20Boot%20%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Spring-Boot-项目启动时自动执行的方法">Spring Boot 项目启动时自动执行的方法</h2>
<p>在实际项目开发中，有时需要在项目启动时执行特定的方法，比如提前加载数据到缓存、检查运行环境、检查授权信息等。以下是八种实现方式，按照执行顺序介绍。</p>
<h3 id="1-实现-ServletContextListener-接口">1. 实现 ServletContextListener 接口</h3>
<p>通过实现 <code>ServletContextListener</code> 接口的 <code>contextInitialized</code> 方法，可以在 Web 应用程序初始化之前执行代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContextListenerImpl</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;启动时自动执行 静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;启动时自动执行 ServletContextListener 的 contextInitialized 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-静态代码块方式">2. 静态代码块方式</h3>
<p>将要执行的方法所在的类交给 Spring 容器扫描，并在类中添加静态代码块。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticBlockTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;启动时自动执行 静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-PostConstruct-注解方式">3. @PostConstruct 注解方式</h3>
<p>使用 <code>@PostConstruct</code> 注解，可以在 Spring 容器初始化完 Bean 后自动执行指定方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostConstructTest</span> &#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postConstruct</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;启动时自动执行 @PostConstruct 注解方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-实现-ServletContextAware-接口">4. 实现 ServletContextAware 接口</h3>
<p>通过实现 <code>ServletContextAware</code> 接口的 <code>setServletContext</code> 方法，在普通 Bean 属性填充后但在初始化之前执行代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.ServletContextAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContextAwareImpl</span> <span class="keyword">implements</span> <span class="title class_">ServletContextAware</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setServletContext</span><span class="params">(ServletContext servletContext)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;启动时自动执行 ServletContextAware 的 setServletContext 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-EventListener-方式">5. @EventListener 方式</h3>
<p>通过 <code>@EventListener</code> 注解，监听应用程序上下文刷新事件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ContextRefreshedEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventListenerTest</span> &#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;启动时自动执行 @EventListener 注解方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-实现-ApplicationRunner-接口">6. 实现 ApplicationRunner 接口</h3>
<p>实现 <code>ApplicationRunner</code> 接口的 <code>run</code> 方法，可以在 Spring Boot 应用启动后执行特定逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationRunnerImpl</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;启动时自动执行 ApplicationRunner 的 run 方法&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; optionNames = args.getOptionNames();</span><br><span class="line">        <span class="keyword">for</span> (String optionName : optionNames) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;这是传过来的参数[&#123;&#125;]&quot;</span>, optionName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-实现-CommandLineRunner-接口">7. 实现 CommandLineRunner 接口</h3>
<p>实现 <code>CommandLineRunner</code> 接口的 <code>run</code> 方法，可以在应用启动时执行命令行参数的处理逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandLineRunnerImpl</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;启动时自动执行 CommandLineRunner 的 run 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-实现-SpringApplicationListener-接口">8. 实现 SpringApplicationListener 接口</h3>
<p>通过实现 <code>ApplicationListener</code> 接口，你可以监听特定的事件，如 <code>ApplicationEnvironmentPreparedEvent</code>。在 Spring Boot 中，通常在 <code>META-INF/spring.factories</code> 文件中配置监听器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringApplicationListenerImpl</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationEnvironmentPreparedEvent&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEnvironmentPreparedEvent event)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;启动时自动执行 SpringApplicationListener 的 onApplicationEvent 方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="META-INF-spring-factories-配置"><code>META-INF/spring.factories</code> 配置</h3>
<p>在 <code>src/main/resources/META-INF/spring.factories</code> 文件中添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">com.example.SpringApplicationListenerImpl</span><br></pre></td></tr></table></figure>
<h3 id="执行顺序">执行顺序</h3>
<p>以上几种方法的执行顺序如下：</p>
<ol>
<li>静态代码块</li>
<li>ServletContextListener 的 contextInitialized</li>
<li>ServletContextAware 的 setServletContext</li>
<li>@PostConstruct 注解的方法</li>
<li>@EventListener 监听的事件</li>
<li>SpringApplicationListener 的 onApplicationEvent 方法</li>
<li>ApplicationRunner 的 run 方法</li>
<li>CommandLineRunner 的 run 方法</li>
</ol>
<h3 id="执行阶段说明">执行阶段说明</h3>
<ul>
<li>
<p><strong>静态代码块</strong></p>
<ul>
<li><strong>阶段</strong>：类加载阶段</li>
<li><strong>说明</strong>：在类被加载到 JVM 中时，静态代码块会被执行，适用于一些初始化逻辑。</li>
</ul>
</li>
<li>
<p><strong>ServletContextListener 的 contextInitialized 方法</strong></p>
<ul>
<li><strong>阶段</strong>：Web 应用初始化阶段</li>
<li><strong>说明</strong>：在初始化 Web 应用程序中的任何过滤器或 Servlet 之前，<code>contextInitialized</code> 方法会被调用。</li>
</ul>
</li>
<li>
<p><strong>ServletContextAware 的 setServletContext 方法</strong></p>
<ul>
<li><strong>阶段</strong>：Bean 属性填充后</li>
<li><strong>说明</strong>：在填充普通 Bean 属性之后，但在初始化之前，<code>setServletContext</code> 方法会被调用。</li>
</ul>
</li>
<li>
<p><strong>@PostConstruct 注解的方法</strong></p>
<ul>
<li><strong>阶段</strong>：Bean 初始化阶段</li>
<li><strong>说明</strong>：在 Bean 完成属性填充后，<code>@PostConstruct</code> 注解的方法会被调用，用于执行任何必要的初始化逻辑。</li>
</ul>
</li>
<li>
<p><strong>@EventListener 监听的 ContextRefreshedEvent 事件</strong></p>
<ul>
<li><strong>阶段</strong>：应用上下文刷新阶段</li>
<li><strong>说明</strong>：在应用上下文被刷新时，标识应用已完全初始化，此时 <code>@EventListener</code> 方法会被调用。</li>
</ul>
</li>
<li>
<p><strong>SpringApplicationListener 的 onApplicationEvent 方法</strong></p>
<ul>
<li><strong>阶段</strong>：环境准备阶段</li>
<li><strong>说明</strong>：在应用程序环境准备阶段，可以用于执行与环境相关的初始化逻辑。</li>
</ul>
</li>
<li>
<p><strong>ApplicationRunner 的 run 方法</strong></p>
<ul>
<li><strong>阶段</strong>：应用启动后</li>
<li><strong>说明</strong>：在 Spring Boot 应用启动并完成初始化后，<code>run</code> 方法会被调用，适合执行与应用参数相关的逻辑。</li>
</ul>
</li>
<li>
<p><strong>CommandLineRunner 的 run 方法</strong></p>
<ul>
<li><strong>阶段</strong>：应用启动后</li>
<li><strong>说明</strong>：与 <code>ApplicationRunner</code> 类似，<code>run</code> 方法会在应用启动后被调用，通常用于处理命令行参数。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="可以注入Bean的方法">可以注入Bean的方法</h2>
<p>@PostConstruct 注解方式：在 @PostConstruct 注解的方法中，你可以注入其他 Bean，并在该方法中访问它们。</p>
<p>实现 ServletContextAware 接口：通过实现 ServletContextAware 接口，你可以获取到 ServletContext，并在 setServletContext 方法中使用其他 Bean（需要通过依赖注入）。</p>
<p>@EventListener 方式：在被 @EventListener 注解的方法中，你可以注入其他 Bean。</p>
<p>实现 ApplicationRunner 接口：在 ApplicationRunner 的 run 方法中，你可以注入其他 Bean，并在该方法中使用它们。</p>
<p>实现 CommandLineRunner 接口：同样地，在 CommandLineRunner 的 run 方法中，你也可以注入其他 Bean。</p>
<p>不能获取到 Bean 的方法：</p>
<p>ServletContextListener 的 contextInitialized 方法：因为在该方法中，你通常不能直接注入 Spring 管理的 Bean，除非通过其他方式获取到 ApplicationContext。<br>
静态代码块方式：静态代码块是在类加载阶段执行的，无法直接访问 Spring 容器中的 Bean。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Framework</title>
    <url>/2025/09/15/Spring%20Framework/</url>
    <content><![CDATA[<h2 id="Spring-Framework简介">Spring Framework简介</h2>
<h3 id="1-Spring-和-SpringFramework">1. Spring 和 SpringFramework</h3>
<p><a href="https://spring.io/projects">https://spring.io/projects</a></p>
<p><strong>广义的 Spring：Spring 技术栈</strong>（全家桶）</p>
<p>广义上的 Spring 泛指以 Spring Framework 为核心的 Spring 技术栈。</p>
<p>经过十多年的发展，Spring 已经不再是一个单纯的应用框架，而是逐渐发展成为一个由多个不同子项目（模块）组成的成熟技术，例如 Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring Data、Spring Security 等，其中 Spring Framework 是其他子项目的基础。</p>
<p>这些子项目涵盖了从企业级应用开发到云计算等各方面的内容，能够帮助开发人员解决软件发展过程中不断产生的各种实际问题，给开发人员带来了更好的开发体验。</p>
<p><strong>狭义的 Spring：Spring Framework</strong></p>
<p>狭义的 Spring 特指 Spring Framework，通常我们将它称为 Spring 框架。</p>
<p>Spring 框架是一个分层的、面向切面的 Java 应用程序的一站式轻量级解决方案，它是 Spring 技术栈的核心和基础，是为了解决企业级应用开发的复杂性而创建的。</p>
<p>Spring 有两个最核心模块： IoC 和 AOP。</p>
<p><strong>IoC</strong>：Inverse of Control 的简写，译为“控制反转”，指把创建对象过程交给 Spring 进行管理。</p>
<p><strong>AOP</strong>：Aspect Oriented Programming 的简写，译为“面向切面编程”。AOP 用来封装多个类的公共行为，将那些与业务无关，却为业务模块所共同调用的逻辑封装起来，减少系统的重复代码，降低模块间的耦合度。另外，AOP 还解决一些系统层面上的问题，比如日志、事务、权限等。</p>
<p><strong>理解：</strong></p>
<p>Spring类似于腾讯公司</p>
<p>SpringFramework类似于腾讯的发家产品QQ</p>
<p>为了称呼方便，我们后面会将SpringFramework简称为Spring!!!</p>
<h3 id="2-SpringFramework主要功能模块">2. SpringFramework主要功能模块</h3>
<table>
<thead>
<tr>
<th>功能模块</th>
<th>功能介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>Core Container</td>
<td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td>
</tr>
<tr>
<td>AOP&amp;Aspects</td>
<td>面向切面编程</td>
</tr>
<tr>
<td>Testing</td>
<td>提供了对 junit 或 TestNG 测试框架的整合。</td>
</tr>
<tr>
<td>Data Access/Integration</td>
<td>提供了对数据访问/集成的功能。</td>
</tr>
<tr>
<td>Spring MVC</td>
<td>提供了面向Web应用程序的集成功能。</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p><strong>1.4 组件交给Spring管理优势</strong>!</p>
<ol>
<li>降低了组件之间的耦合性：Spring IoC容器通过依赖注入机制，将组件之间的依赖关系削弱，减少了程序组件之间的耦合性，使得组件更加松散地耦合。</li>
<li>提高了代码的可重用性和可维护性：将组件的实例化过程、依赖关系的管理等功能交给Spring IoC容器处理，使得组件代码更加模块化、可重用、更易于维护。</li>
<li>方便了配置和管理：Spring IoC容器通过XML文件或者注解，轻松的对组件进行配置和管理，使得组件的切换、替换等操作更加的方便和快捷。</li>
<li>支持灵活的配置和扩展：Spring IoC容器支持动态配置和灵活扩展，可以根据实际需要添加自定义的Bean，并且支持各种不同的配置方式，使得开发人员能够更加灵活地定制配置。</li>
<li>交给Spring管理的对象（组件），方可享受Spring框架的其他功能（AOP,声明事务管理）等</li>
</ol>
</li>
</ul>
<p><strong>ApplicationContext容器实现类</strong>：</p>
<table>
<thead>
<tr>
<th>类型名</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td>ClassPathXmlApplicationContext</td>
<td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td>
</tr>
<tr>
<td>FileSystemXmlApplicationContext</td>
<td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td>
</tr>
<tr>
<td>ConfigurableApplicationContext</td>
<td>ApplicationContext 的子接口，包含一些扩展方法 refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td>
</tr>
<tr>
<td>WebApplicationContext</td>
<td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td>
</tr>
</tbody>
</table>
<h3 id="SpringIoC容器管理配置方式">SpringIoC容器管理配置方式</h3>
<p>Spring IoC 容器使用一种形式的配置元数据。此配置元数据表示您作为应用程序开发人员如何告诉 Spring 容器实例化、配置和组装应用程序中的对象。</p>
<p>Spring框架提供了多种配置方式：XML配置方式、注解方式和Java配置类方式</p>
<ol>
<li>XML配置方式：是Spring框架最早的配置方式之一，通过在XML文件中定义Bean及其依赖关系、Bean的作用域等信息，让Spring IoC容器来管理Bean之间的依赖关系。该方式从Spring框架的第一版开始提供支持。</li>
<li>注解方式：从Spring 2.5版本开始提供支持，可以通过在Bean类上使用注解来代替XML配置文件中的配置信息。通过在Bean类上加上相应的注解（如@Component, @Service, @Autowired等），将Bean注册到Spring IoC容器中，这样Spring IoC容器就可以管理这些Bean之间的依赖关系。</li>
<li>Java配置类方式：从Spring 3.0版本开始提供支持，通过Java类来定义Bean、Bean之间的依赖关系和配置信息，从而代替XML配置文件的方式。Java配置类是一种使用Java编写配置信息的方式，通过@Configuration、@Bean等注解来实现Bean和依赖关系的配置。<br>
配置方式的使用场景不同，SSM期间，我们使用XML+注解方式为主。SpringBoot期间，我们使用配置类+注解方式为主！</li>
</ol>
<h3 id="3-Spring-IoC-DI概念总结">3. Spring IoC / DI概念总结</h3>
<ul>
<li>
<p><strong>IoC（Inversion of Control）概念</strong></p>
<p>IoC 主要是针对对象的创建和调用控制而言的，也就是说，当应用程序需要使用一个对象时，不再是应用程序直接创建该对象，而是由 IoC 容器来创建和管理，即控制权由应用程序转移到 IoC 容器中，也就是“反转”了控制权。这种方式基本上是通过依赖查找的方式来实现的，即 IoC 容器维护着构成应用程序的对象，并负责创建这些对象。</p>
</li>
<li>
<p><strong>DI (Dependency Injection)概念</strong></p>
<p>DI 是指在组件之间传递依赖关系的过程中，将依赖关系在容器内部进行处理，这样就不必在应用程序代码中硬编码对象之间的依赖关系，实现了对象之间的解耦合。在 Spring 中，DI 是通过 XML 配置文件或注解的方式实现的。它提供了三种形式的依赖注入：构造函数注入、Setter 方法注入和接口注入。</p>
</li>
</ul>
<blockquote>
<p>SPI机制</p>
</blockquote>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/cf640b6856eb43bd89a48d28de7b64b0.png" alt="Clip_2024-10-08_08-29-27.png"></p>
<p>``</p>
<h2 id="XMl配置">XMl配置</h2>
<p>接口注入：需要注入的依赖对象为一个接口，ioc自动为依赖注入实现类。</p>
<p>反射获取对象：</p>
<ol>
<li>
<p>根据构造方法的newInstance()</p>
</li>
<li>
<p>根据字节码对象的newInstance()</p>
</li>
</ol>
<h3 id="FactoryBean">FactoryBean</h3>
<blockquote>
<p>生产一种bean，可以对bean进行处理。</p>
<p><code>BeanFactory</code>是spring IOC的根接口</p>
</blockquote>
<p>FactoryBean与普通工厂的区别：</p>
<ol>
<li>FactorBean工厂：ioc可直接获得工厂提供的bean</li>
<li>普通工厂：ioc需要先获取工厂对象，才能获取工厂提供的bean</li>
</ol>
<h3 id="bean的作用域">bean的作用域</h3>
<p>scope：singLeton|prototype|session|request</p>
<p>单例：每次都是同一个实例</p>
<p>多例：每次都是不同的</p>
<h3 id="bean的生命周期">bean的生命周期</h3>
<ol>
<li>创建对象（默认使用无参构造）</li>
<li>依赖注入</li>
<li>初始化（使用init-method=“”,指定初始化方法)</li>
<li>使用</li>
<li>销毁（使用destory-method=“”,指定销毁方法)   ioc容器关闭时执行bean的销毁    ioc.close()</li>
</ol>
<h3 id="bean的作用域对生命周期的影响">bean的作用域对生命周期的影响</h3>
<p>单例：在初始化ioc时就已经初始化了</p>
<p>多例：只有在获取bean对象时才初始化，且销毁不被ioc管理。</p>
<h3 id="bean的后置处理器">bean的后置处理器</h3>
<ol>
<li>
<p>本质：实现了<code>BeanPostProcessor</code>的类</p>
</li>
<li>
<p>在bean<code>初始化</code>前后加上两个额外的步骤</p>
</li>
<li>
<p>必须配置到ioc容器中，bean的后置处理器会作用于所有组件</p>
</li>
</ol>
<h2 id="注解配置">注解配置</h2>
<p>@Component   @Server @Controller @Resource</p>
<p>在xml中配置扫描的主包：&lt;context:component-scan base-package=“online.zorange.a_scan”/&gt;</p>
<p>获取所有加上注解的组件</p>
<p>配置项扫描，与xml一样&lt;context:property-placeholder location=“application.properties”/&gt;</p>
<p>属性注解：Value(“${jdbc.password}”)</p>
<h2 id="java配置类">java配置类</h2>
<ol>
<li>
<p>在配置类上加@Configuration,标注配置类</p>
<p>扫描包配置注解；@ComponentScan(basePackages = {“online.zorange.define_components”})</p>
<p>扫描配置项注解：@PropertySource(“classpath:jdbc.properties”)</p>
</li>
<li>
<p>在ioc获取时采用AnnotationConfigApplicationContext(配置类.class);</p>
</li>
<li>
<p>注解配置和java配置类的beanName的区别</p>
<table>
<thead>
<tr>
<th>注解配置</th>
<th>Java配置类</th>
</tr>
</thead>
<tbody>
<tr>
<td>类名的首字母小写</td>
<td>方法名</td>
</tr>
</tbody>
</table>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Clould</title>
    <url>/2025/09/15/Spring%20Clould/</url>
    <content><![CDATA[<h1>系统架构演进</h1>
<h2 id="单体架构">单体架构</h2>
<p><strong>单体架构具有以下优点：</strong></p>
<p>1、简单：单体架构模式相对于其他复杂的架构来说，其结构简单易用，便于新手学习和应用。</p>
<p>2、易于维护：由于整个应用程序都在一个代码库中，因此很容易对其进行维护和更新。</p>
<p>3、易于部署：单个可执行文件可以在任何支持运行该语言的环境中运行，并且部署也相对轻松。</p>
<p><strong>然而，单体架构也存在一些缺点：</strong></p>
<p>1、扩展性差：单体应用程序所有功能都在一个程序中实现，因此扩展功能时需要新增或修改源代码，并重新部署整个应用程序，这可能会导致系统不稳定和长时间停机。</p>
<p>2、可靠性低：由于单体应用程序集成了所有的逻辑和组件，因此如果其中有一个非常重要的组件出现故障，则可能导致从整个系统崩溃。</p>
<p>3、风险高：单体应用程序中的错误往往比较难以调试，因为代码复杂度高且耦合度强。 综上所述，单体架构适用于小型、简单的软件系统，但是对于大型、复杂的系统来说，单体架构面临诸多挑战，需要采用其他更加灵活和可扩展的架构模式。</p>
<h2 id="分布式架构">分布式架构</h2>
<p><strong>分布式系统架构</strong>是指将一个软件系统分割成多个独立的服务，并且这些服务可以在不同的计算机或服务器上运行，并通过网络进行通信。</p>
<p><strong>微服务系统架构</strong>：本质上也属于分布式系统架构，在微服务系统架构中，更加重视的是服务拆分粒度。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/534159a0f89449029e583af24ccbe402.png" alt="image.png"></p>
<h3 id="微服务架构的特点：">微服务架构的特点：</h3>
<p>1、单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</p>
<p>2、自治：团队独立、技术独立、数据独立，独立部署和交付</p>
<p>3、面向服务：服务提供统一标准的接口，与语言和技术无关</p>
<h4 id="微服务：">微服务：</h4>
<p>1.每个微服务负载一项业务、独立端口号、进程id(pid):服务的专业化、精细化管理</p>
<p>2.每个微服务语言独立、技术独立、数据独立</p>
<p><strong>微服务系统架构的优点：</strong></p>
<p>1、可扩展性好：由于系统中的不同组件可以独立地进行扩展和升级，从而提高了整个系统的扩展性和可靠性。</p>
<p>2、容错性高：由于系统中的组件可以在不同的计算机或服务器上运行，因此即使某些节点出现故障也不会影响整个系统的运行。</p>
<p>3、高效性强：分布式系统可以将负载和任务分配到不同的节点上，从而提高系统的并发能力和处理速度。</p>
<p>4、灵活性强：分布式系统可以支持多种编程语言和应用程序框架，并且可以利用各种云计算技术，如Docker、Kubernetes等。</p>
<p><strong>微服务系统架构的存在的问题：</strong></p>
<p>1、微服务的管理：这些微服务如果没有进行统一的管理，那么维护性就会极差。</p>
<p>2、服务间的通讯：微服务之间肯定是需要进行通讯，比如购物车微服务需要访问商品微服务。</p>
<p>3、前端访问问题：由于每一个微服务都是部署在独立的一台服务器的，每一个微服务都存在一个对应的端口号，前端在访问指定微服务的时候肯定需要指定微服务的ip地址和端口号，难道需要在前端维护每一个微服务的ip地址和端口号?</p>
<p>4、配置文件管理：当构建服务集群的时候，如果每一个微服务的配置文件还是和微服务进行绑定，那么维护性就极差。</p>
<p>5、微服务的故障排查、调用链路：微服务追踪技术</p>
<h2 id="分布式和集群">分布式和集群</h2>
<p>分布式：由多台服务器构成的网络环境，在分布式环境下每一台服务器的功能是不一样的。</p>
<p>集群：   由多台服务器构成的网络环境，在集群环境下每一台服务器的功能是一样的。</p>
<p>分布式环境中每一台服务器都可以做集群，如下图所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/f6fb573ca2a8430e938436ff026345c7.png" alt="image.png"></p>
<p>实际开发中：分布式+集群</p>
<p>​                        微服务+集群</p>
<p>针对上述微服务架构治理的问题，有一套微服务治理规范！针对微服务治理规范，有好多种实现。最著名的两种实现：</p>
<p>SpringCloud Netflix(SCN): OpenFeign、LoadBalancer、Gateway</p>
<p>SpringCloudAlibaba(SCA): Nacos、sentinel</p>
<p>微服务技术栈：微服务相关技术的统称</p>
<p>​    微服务开发技术：SpringBoot</p>
<p>​    微服务治理、保护技术: SCN+SCA: SpringCloud底层–&gt;-SpringBoot3.x—&gt;Spring6.x（SpringMVC）—&gt;JDK17</p>
<p>​    微服务部署技术:Docker+K8s</p>
<h1>Spring Cloud Alibaba 概述</h1>
<h2 id="Spring-Cloud-简介">Spring Cloud 简介</h2>
<p>1、Spring Cloud 是一系列<strong>框架</strong>的有序<strong>集合</strong>。在Spring Cloud这个项目中包含了很多的组件【子框架】，每一个组件都是用来解决问题系统架构中所遇到的问题，因此Spring Cloud可以看做是一套微服务的解决方案。</p>
<p>2、Spring Cloud中常见的组件：Eureka(服务注册中心)、Openfeign(服务远程调用)、Gateway(服务网关)、Spring Cloud Config(统一配置中心)等。</p>
<p>3、Spring Cloud项目官方网址：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></p>
<p>4、Spring Cloud依赖于Spring Boot，并且有版本的兼容关系</p>
<h2 id="Spring-Cloud-Alibaba简介">Spring Cloud Alibaba简介</h2>
<p>Spring Cloud Alibaba是阿里针对微服务系统架构所存在的问题给出了一套解决方案，该项目包含了微服务系统架构必须的一些组件。</p>
<p>常见的组件可以参看官网地址：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/2021/en-us/index.html">https://spring-cloud-alibaba-group.github.io/github-pages/2021/en-us/index.html</a></p>
<p>注意：</p>
<p>1、Spring Cloud Alibaba中所提供的组件是遵循Spring Cloud规范的，两套技术所提供的组件是可以搭配使用的。</p>
<p>2、在现在企业开发中往往是两套技术组件搭配进行使用：Nacos(服务注册中心和配置中心)、Openfeign(远程调用)、LoadBalancer(客户端负载均衡器)、Gateway(服务网关)、Sentinel(服务保护组件)等。</p>
<h1>微服务环境准备</h1>
<h2 id="过程说明">过程说明</h2>
<p>在创建微服务工程的时候都需要先提供一个父工程，使用父工程来管理多个微服务所需要的依赖。我们的微服务系统结构如下所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/f6641d07bcd14683b3aeaefc40422279.png" alt="image.png"></p>
<h2 id="服务的远程调用">服务的远程调用</h2>
<p>需求：在查询订单时候需要将订单所属用户的信息也一并查询出来。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/6ef20cee90334495941ae5931f3b2c76.png" alt="image.png"></p>
<h3 id="传统调用">传统调用</h3>
<p>要完成上述的需求，我们就需要在order微服务中向user微服务发起一个http的请求，调用</p>
<p><a href="http://localhost:10100/api/user/findUserByUserId/%7BuserId%7D%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E3%80%82">http://localhost:10100/api/user/findUserByUserId/{userId}这个接口。</a></p>
<h3 id="RestTemplate">RestTemplate</h3>
<p>在order微服务的Spring容器中注册一个<strong>RestTemplate</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.atguigu.spzx.cloud.order.config;</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span>          <span class="comment">// 注入RestTemplate远程调用工具</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">findOrderByOrderId</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据id查询订单数据</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findOrderByOrderId(orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发起远程调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:10100/api/user/findUserByUserId/&quot;</span> + order.getUserId(), User.class);</span><br><span class="line">        order.setUser(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回订单数据</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="问题说明">问题说明</h3>
<p>1、维护性差：服务提供方的ip地址发生了改变，那么此时服务的消费方就需要更改代码</p>
<p>2、缺少负载均衡机制：负载均衡就是负载【请求】通过多台服务器进行处理</p>
<h1>Nacos注册中心</h1>
<h2 id="注册中心简介">注册中心简介</h2>
<p>通过注册中心可以对服务提供方和服务消费方进行解耦。具体的工作模式如下图所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/27ff36fe1ab94d5c800c7ecc0ebabe13.png" alt="image.png"></p>
<p>工作流程说明：</p>
<p>1、服务提供方在启动的时候，会向注册中心注册自己服务的详情信息(ip、端口号等)。在注册中心中会维护一张服务清单，保存这些注册信息，注册中心需要以心跳的方式去监测清单中的服务是否可用，如果不可用，需要在服务清单中剔除不可用的服务。</p>
<p>2、服务消费方向服务注册中心咨询服务，并获取所有服务的实例清单，然后按照指定的负载均衡算法从服务清单中选择一个服务实例进行访问。</p>
<h2 id="Nacos">Nacos</h2>
<p>Nacos架构图如下所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/6c0a39c5bc464d3bbf8744e8e0e70035.png" alt="image.png"></p>
<ol>
<li>
<p>Nacos Server：服务注册中心，它是服务，其实例及元数据的数据库。服务实例在启动时注册到服务注册表，并在关闭时注销。服务注册中心可能会调用服务实例的健康检查 API 来验证它是否能够处理请求。Nacos Server需要独立的部署。</p>
</li>
<li>
<p>Nacos Client: Nacos Client负责和Nacos Server进行通讯完成服务的注册和服务的发现。</p>
</li>
<li>
<p>Nacos Console：是Nacos的控制模块，Nacos提供了可视化的后台管理系统，可以很容易的实现服务管理操作。</p>
</li>
</ol>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/8c0d2c0ab6884cd3a4ced31c0151ae46.png" alt="image.png"></p>
<p>Nacos的优点包括：</p>
<p>1、高可用性：Nacos支持多节点部署，通过选举算法实现了高可用和故障转移能力，在节点宕机或网络异常情况下仍能保证整个系统的稳定运行。</p>
<p>2、动态扩展性：Nacos可以根据实际需求进行快速扩展和缩容，支持集群、多数据中心、地域感知等特性。</p>
<p>3、完备的功能支持：Nacos支持服务注册与发现、配置管理、流量管理、DNS解析、存储KV对等功能，并且提供了Web界面和RESTful API等多种方式来使用这些功能。</p>
<p>4、易于集成：Nacos提供了多种语言和框架的集成方案，并且支持Spring Cloud等流行的微服务框架。</p>
<p>总的来说，Nacos是一个功能齐全、易于使用和高可用的分布式服务治理平台，可以为分布式系统提供高效、稳定的运行环境。</p>
<h2 id="微服务集成naocs">微服务集成naocs</h2>
<p>需求：将两个微服务(user、order)注册到nacos中</p>
<p>实现步骤：</p>
<p>1、在两个子工程中引入如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos作为注册中心的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、在application.yml文件中添加如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置nacos注册中心的地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spzx-cloud-user</span>   <span class="comment"># 每一个服务注册到nacos注册中心都需要提供一个服务名称,order微服务注册的时候需要更改微服务名称</span></span><br></pre></td></tr></table></figure>
<p>3、启动两个微服务：就可以在nacos的后台管理系统中，看到如下的注册信息：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/0fb1ecafc81c4aa7b912a71cc33c0a55.png" alt="image.png"></p>
<h2 id="更改远程调用">更改远程调用</h2>
<p>当我们把微服务都注册到注册中心以后，那么此时就可以根据服务的名称从注册中心获取服务的ip地址和端口号了，进而就可以更改远程调用代码！</p>
<p>使用Spring Cloud中所提供的一个组件：<strong>spring-cloud-loadbalancer</strong></p>
<p>使用步骤：</p>
<p>1、在order微服务中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring cloud 所提供的负载均衡器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、在声明RestTemplate的方法上添加**@LoadBalanced**注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span>       <span class="comment">// 让RestTemplate具有负载均衡的能力：轮询</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、更改远程调用代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务提供方的服务ip地址和端口号可以使用服务提供方的服务名称进行替换</span></span><br><span class="line">restTemplate.getForObject(<span class="string">&quot;http://spzx-cloud-user/api/user/findUserByUserId/&quot;</span> + order.getUserId(), User.class);</span><br></pre></td></tr></table></figure>
<p>注意：默认使用的负载均衡算法就是轮询【依次调用对应服务】</p>
<h2 id="高级特性">高级特性</h2>
<h3 id="服务集群">服务集群</h3>
<p>为了保证每一个服务的高可用，那么此时就需要去构建服务集群，但是并不是说把所有的服务都部署在一个机房里。而是将多个服务分散的部署到不同的机房中，每一个机房的服务可以看做成是一个集群</p>
<p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：上海机房内的order微服务应该优先访问同机房的user微服务。</p>
<h4 id="集群配置">集群配置</h4>
<p>添加所属集群名</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">SH</span>		<span class="comment"># 配置服务所属集群</span></span><br></pre></td></tr></table></figure>
<h4 id="集群访问">集群访问</h4>
<p>在同一个集群的微服务，优先访问同一个集群的微服务，除非都不可用</p>
<p>配置微服务所属集群</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">SH</span>		<span class="comment"># 配置服务所属集群</span></span><br></pre></td></tr></table></figure>
<p>开启集群访问：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置nacos注册中心的地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">nacos:</span>    <span class="comment"># 集成nacos的负载均衡算法</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="权重配置">权重配置</h3>
<p>权重修改：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">weight:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p>
<h2 id="环境隔离">环境隔离</h2>
<p>在实际的开发过程中，可能会存在很多个软件环境：开发环境、测试环境、生产环境。</p>
<p>nacos也是支持多环境隔离配置的，在nacos是通过<strong>namespace</strong>来实现多环境的隔离。</p>
<p>完整的服务注册数据存储结构如下所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/8ede372313bc42b6b5851905ad770ec9.png" alt="image.png"></p>
<blockquote>
<p>Group：组，通常来表示不同的项目，不同组之间也存在隔离性的</p>
</blockquote>
<h3 id="配置名称空间">配置名称空间</h3>
<ol>
<li>在nacos页面创建不同的名称空间</li>
<li>复制名称空间id</li>
</ol>
<p>给微服务添加名称空间的配置，来指定该微服务所属环境。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置nacos注册中心的地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">4a88035e-acf3-45a9-924f-2421acbff67a</span>  <span class="comment"># 配置服务实例所属名称空间</span></span><br></pre></td></tr></table></figure>
<p>最佳实践：</p>
<p>1.命名空间表示不同的环境：开发环境、测试环境、生产环境</p>
<p>2.同一个项目分配同一个group</p>
<p>3.同一个名称空间下的同一个group中的微服务可以进行远程通信。</p>
<h2 id="实例类型">实例类型</h2>
<p>Nacos中的服务实例存在两种类型：</p>
<p>1、临时实例：如果实例宕机超过一定时间，会从服务列表剔除，并且实例会定时上报自身的健康状态给Nacos注册中心，默认的类型。</p>
<p>2、非临时实例(永久实例)：如果实例宕机，不会从服务列表剔除，Nacos注册中心会主动询问实例的健康状态，也可以叫永久实例。</p>
<p>配置一个服务实例为永久实例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span>  <span class="comment"># 配置该实例为非临时实例</span></span><br></pre></td></tr></table></figure>
<h1>LoadBalancer</h1>
<p>Spring Cloud LoadBalancer是Spring Cloud中负责客户端负载均衡的模块，其主要原理是通过选择合适的服务实例来实现负载均衡。</p>
<p>客户端负载均衡：就是负载均衡算法由客户端提供</p>
<p>默认的负载均衡算法：RoundRobinLoadBalancer (轮询)</p>
<h2 id="更改负载均衡算法">更改负载均衡算法</h2>
<p>1、在Spring容器中注册一个Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomLoadBalancerConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> environment: 用于获取环境属性配置，其中LoadBalancerClientFactory.PROPERTY_NAME表示该负载均衡器要应用的服务名称。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadBalancerClientFactory: 是Spring Cloud中用于创建负载均衡器的工厂类，通过getLazyProvider方法获取ServiceInstanceListSupplier对象，以提供可用的服务列表。</span></span><br><span class="line"><span class="comment">     * ServiceInstanceListSupplier：用于提供ServiceInstance列表的接口，可以从DiscoveryClient或者其他注册中心中获取可用的服务实例列表。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ReactorLoadBalancer&lt;ServiceInstance&gt; <span class="title function_">randomLoadBalancer</span><span class="params">(Environment environment, LoadBalancerClientFactory loadBalancerClientFactory)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomLoadBalancer</span>(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2、配置负载均衡算法的使用者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@LoadBalancerClients(value = &#123;</span></span><br><span class="line"><span class="meta">        @LoadBalancerClient(name = &quot;spzx-cloud-user&quot; , configuration = CustomLoadBalancerConfiguration.class)// 将负载均衡算法应用到指定的服务提供方中</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>       <span class="comment">// 让RestTemplate具有负载均衡的能力</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>OpenFeign组件</h1>
<p>概述：feign是一个声明式的http客户端，官方地址：<a href="https://github.com/OpenFeign/feign%E5%85%B6%E4%BD%9C%E7%94%A8%E5%B0%B1%E6%98%AF%E5%B8%AE%E5%8A%A9%E6%88%91%E4%BB%AC%E4%BC%98%E9%9B%85%E7%9A%84%E5%AE%9E%E7%8E%B0http%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8F%91%E9%80%81%E3%80%82%E6%9B%BF%E6%8D%A2Resttemplate">https://github.com/OpenFeign/feign其作用就是帮助我们优雅的实现http请求的发送。替换Resttemplate</a></p>
<p><strong>使用OpenFeign远程调用的四步</strong>：</p>
<p>1.导入OpenFeign依赖</p>
<p>2.在主启动类上加@EnableFeignclients,主要作用：用来扫描@FeignClient</p>
<p>3.自定义FeignClient接口</p>
<p>​      3.1.接口上标记@FeignClient(value=“被调用方在注册中心的服务名”)</p>
<p>​      3.2 方法要和被调用方controller层方法保持完全一致。请求方式、请求路径、请求参数[个数、顺序、类型]、返回值类型</p>
<p>4.在远程调用的地方直接注入自定义FeignClient接口的代理类对象。</p>
<p><strong>拓展</strong>：OpenFeign有几个注意点：</p>
<p>1.OpenFeign在远程调用时，最好带着@RequestParam、@PathVariable的value属性值</p>
<p>2.OpenFeign在远程调用的时候，传递是json数据。</p>
<p>3.给微服务A发送的请求方式并不影响微服务A使用OpenFeign远程调用微服务B的请求方式</p>
<h2 id="OpenFeign入门">OpenFeign入门</h2>
<p>OpenFeign的使用步骤如下：</p>
<p>1、我们在spzx-cloud-order服务的pom文件中引入OpenFeign的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加入OpenFeign的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、在启动类上添加**@EnableFeignClients**开启OpenFeign的功能支持</p>
<p>3、编写OpenFeign的客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;spzx-cloud-user&quot;)</span>		<span class="comment">// 声明当前接口是一个访问user-service的feign的客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserFeignClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/api/user/findUserByUserId/&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> User <span class="title function_">queryById</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> Long userId)</span> ;	<span class="comment">// 根据userId查询用户信息的接口方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p>
<p>① 请求方式：GET</p>
<p>② 请求路径：/api/user/findUserByUserId/{userId}</p>
<p>③ 请求参数：Long userId</p>
<p>④ 返回值类型：User</p>
<p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p>
<p>4、修改OrderService中的远程调用代码，使用Feign客户端代替RestTemplate：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserFeignClient userFeignClient ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">findOrderByOrderId</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findOrderByOrderId(orderId);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 远程调用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userFeignClient.queryById(order.getUserId());</span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="keyword">return</span> order ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OpenFeign自定义配置">OpenFeign自定义配置</h2>
<h3 id="日志配置">日志配置</h3>
<p>OpenFeign可以支持很多的自定义配置，如下表所示：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>feign.Logger.Level</strong></td>
<td>修改日志级别</td>
<td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td>
</tr>
<tr>
<td>feign.codec.Decoder</td>
<td>响应结果的解析器</td>
<td>http远程调用的结果做解析，例如解析json字符串为java对象</td>
</tr>
<tr>
<td>feign.codec.Encoder</td>
<td>请求参数编码</td>
<td>将请求参数编码，便于通过http请求发送</td>
</tr>
<tr>
<td>feign.Contract</td>
<td>支持的注解格式</td>
<td>默认是SpringMVC的注解</td>
</tr>
<tr>
<td>feign.Retryer</td>
<td>失败重试机制</td>
<td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td>
</tr>
</tbody>
</table>
<p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p>
<p>查看OpenFeign的远程通信日志：</p>
<p>第一步：把日志级别调节为debug: debug&lt;info&lt;waring&lt;error</p>
<p>第二步：给OpenFeign的日志级别</p>
<p>下面以日志为例来演示如何自定义配置，支持两种方式的配置：</p>
<blockquote>
<h5 id="基于配置文件的方式">基于配置文件的方式</h5>
</blockquote>
<p>基于配置文件修改feign的日志级别可以针对单个服务：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将feign包下产生的日志的级别设置为debug</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.atguigu.spzx.cloud.order.feign:</span> <span class="string">debug</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># openfeign日志级别配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">openfeign:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">config:</span> </span><br><span class="line">          <span class="attr">spzx-cloud-user:</span>  </span><br><span class="line">            <span class="attr">loggerLevel:</span> <span class="string">full</span></span><br></pre></td></tr></table></figure>
<p>也可以针对所有服务：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将feign包下产生的日志的级别设置为debug</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.atguigu.spzx.cloud.order.feign:</span> <span class="string">debug</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># openfeign日志级别配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">openfeign:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">config:</span> </span><br><span class="line">          <span class="attr">default:</span>  <span class="comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">            <span class="attr">loggerLevel:</span> <span class="string">full</span></span><br></pre></td></tr></table></figure>
<p>而日志的级别分为四种：</p>
<p>① NONE：不记录任何日志信息，这是默认值。</p>
<p>② BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</p>
<p>③ HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</p>
<p>④ FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</p>
<h3 id="超时配置">超时配置</h3>
<p><strong>超时机制概述</strong>：Feign 的超时机制是指在使用 Feign 进行服务间的 HTTP 调用时，设置请求的超时时间。当请求超过设定的超时时间后，Feign 将会中断该请求并抛出相应的异常。</p>
<p><strong>超时机制的意义</strong>：</p>
<p>1、防止长时间等待：通过设置适当的超时时间，可以避免客户端在请求服务时长时间等待响应而导致的性能问题。如果没有超时机制，客户端可能会一直等待，从而影响整个系统的吞吐量和响应时间。</p>
<p>2、避免资源浪费：超时机制可以帮助及时释放占用的资源，例如连接、线程等。如果请求一直处于等待状态而不超时，将导致资源的浪费和系统的负载增加。</p>
<p>3、优化用户体验：超时机制可以防止用户长时间等待无响应的情况发生，提供更好的用户体验。当请求超时时，可以及时给出错误提示或进行相应的处理，以提醒用户或采取其他措施。</p>
<p>超时时间越长，资源浪费的时间就越长，系统的稳定性就越差，因此需要设置为一个较为合理的超时时间，设置防止如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    openfeign:</span><br><span class="line">      client:</span><br><span class="line">        config:</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            loggerLevel: full	</span><br><span class="line">            read-timeout: <span class="number">2000</span>			# 读取数据的超时时间设置为2s</span><br><span class="line">            connect-timeout: <span class="number">2000</span>		# 建立连接的超时时间设置为2s</span><br></pre></td></tr></table></figure>
<h3 id="重试配置">重试配置</h3>
<p>feign一旦请求超时了，那么此时就会直接抛出<strong>SocketTimeoutException</strong>: Read timed out的异常。请求超时的原因有很多种，如网络抖动、服务不可用等。如果由于网络暂时不可用导致触发了超时机制，那么此时直接返回异常信息就并不是特别的合理，尤其针对查询请求，肯定希望得到一个结果。合理的做法：<strong>触发超时以后，让feign进行重试</strong>。</p>
<p>具体步骤：</p>
<p>1、自定义重试器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignClientRetryer</span> <span class="keyword">implements</span> <span class="title class_">Retryer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义两个成员变量来决定重试次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">3</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">continueOrPropagate</span><span class="params">(RetryableException e)</span> &#123;     <span class="comment">// 是否需要进行重试取决于该方法是否抛出异常，如果抛出异常重试结束</span></span><br><span class="line">        <span class="keyword">if</span>(start &gt;= end) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e) ;</span><br><span class="line">        &#125;</span><br><span class="line">        start++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Retryer <span class="title function_">clone</span><span class="params">()</span> &#123;    <span class="comment">// 框架底层调用该方法得到一个重试器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FeignClientRetryer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、配置重试器</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">openfeign:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">default:</span></span><br><span class="line">            <span class="attr">loggerLevel:</span> <span class="string">full</span></span><br><span class="line">            <span class="attr">read-timeout:</span> <span class="number">2000</span></span><br><span class="line">            <span class="attr">connect-timeout:</span> <span class="number">2000</span></span><br><span class="line">            <span class="attr">retryer:</span> <span class="string">com.atguigu.spzx.cloud.order.feign.FeignClientRetryer</span>		<span class="comment"># 配置自定义重试器</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Spring MVC</title>
    <url>/2025/09/15/Spring%20MVC/</url>
    <content><![CDATA[<h2 id="Spring-MVC">Spring MVC</h2>
<blockquote>
<p>Spring MVC是控制层框架</p>
</blockquote>
<p>表述层：控制层和视图ui</p>
<p>服务层</p>
<p>持久化层</p>
<p>基于Servelet API构建的原始Web框架</p>
<h4 id="使用spring-MVC-步骤">使用spring MVC 步骤</h4>
<ol>
<li>
<p><strong>配置前端控制器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- DispatcherServlet的全类名 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">     <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">   <span class="comment">&lt;!--默认Spring MVC的配置文件配置</span></span><br><span class="line"><span class="comment">	位置：WEB-INFO下</span></span><br><span class="line"><span class="comment">	名称：DispatcherServlet的name-servelet.</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件位置 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 如果不记得contextConfigLocation配置项的名称，可以到DispatcherServlet的父类FrameworkServlet中查找 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 使用classpath:说明这个路径从类路径的根目录开始才查找 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">   <span class="comment">&lt;!-- 作为框架的核心组件，在启动过程中有大量的初始化操作要做，这些操作放在第一次请求时才执行非常不恰当 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 我们应该将DispatcherServlet设置为随Web应用一起启动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--将jsp请求交给jspservelt处理，因为DispatchServelet不能处理jsp--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 对DispatcherServlet来说，url-pattern有两种方式配置 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 方式一：配置“/”，表示匹配整个Web应用范围内所有请求。这里有一个硬性规定：不能写成“/*”。</span></span><br><span class="line"><span class="comment">     只有这一个地方有这个特殊要求，以后我们再配置Filter还是可以正常写“/*”。 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 方式二：配置“*.扩展名”，表示匹配整个Web应用范围内部分请求 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring mvc的配置文件</p>
<p>​	默认位置：WEB-INFO下</p>
<p>​	名称：DispatchServelet的name；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servelet-name</span>&gt;</span>name<span class="tag">&lt;/<span class="name">servelet-name</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置spring mvc的ioc容器</p>
<p>在配置文件中扫描bean</p>
</li>
<li>
<p>注解</p>
<ol>
<li>配置路径：@RequestMapping(“/user”)</li>
<li>将返回值以返回体的方式返回 @ResponseBody</li>
</ol>
</li>
</ol>
<h4 id="访问路径设置">访问路径设置</h4>
<ol>
<li>支持ant风格的路径</li>
</ol>
<p>​		<code>？</code>：表示任意单个字符 <code>&quot;/a?a&quot;,</code>除了<code>？</code>和<code>/</code></p>
<p>​        <code>*</code>：表示任意个数的字符,除了<code>?</code>和<code>/</code></p>
<p>​		<code>**</code>:表示任意层数的任意目录，<code>/** </code> ,不能有其他字符 如<code>/a**a</code></p>
<p>@RequestMapping</p>
<ol>
<li>
<p>属性</p>
<p>method=RequestMethod[]   可以匹配多个方法，默认全部都可以匹配</p>
</li>
</ol>
<p>@RestController</p>
<p>默认为每个方法加上@ResponseBody注解，将返回值作为返回体返回</p>
<h2 id="接收参数">接收参数</h2>
<p>自动进行类型转换：若无法转换报400.</p>
<ol>
<li>
<p><strong>RequestParam 参数</strong>：localhost:8080/login?<code>username=&quot;zsw&quot;&amp;password=&quot;123&quot;</code></p>
<p>接收时可以使用@RequestParam注解接收，也可以不使用注解，但是形参名要与param名一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, </span></span><br><span class="line"><span class="params">                  <span class="meta">@RequestParam</span> String password)</span></span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>如果有多个同名的参数</p>
<p>localhost:8080/login?<code>hobby=唱&amp;hobby=跳</code></p>
<ol>
<li>数组</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String [] hobby)</span> <span class="comment">//[唱,跳]</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>字符串</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String  hobby)</span>  <span class="comment">//唱,跳</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>list集合获取，必须使用注解</li>
</ol>
</li>
</ol>
</li>
<li>
<p><strong>路径中的参数</strong>：localhost:8080/book/1/3</p>
<p>这个参数需要使用注解@PathVariable来接收。</p>
<p>将参数放入请求域中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(/book/&#123;id&#125;/&#123;uid&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">book</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                 <span class="meta">@PathVariable(&quot;uid&quot;)</span> Integer uid)</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>请求体中的参数</strong><code>json格式</code></p>
<ol>
<li>开启mvc的注解驱动</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>注解：@RequestBody</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(/data)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">data</span><span class="params">(<span class="meta">@RequestBody(&quot;data&quot;)</span> Data data)</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="获取Cookie数据">获取Cookie数据</h2>
<ol>
<li>
<p>获取HttServeletRequest对象和HttpServeletResponse,直接在形参类名声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cookie</span><span class="params">(HttpServeletRequest req</span></span><br><span class="line"><span class="params">                  HttpServeletResponse resp</span></span><br><span class="line"><span class="params">                  HttpSeeion session</span></span><br><span class="line"><span class="params">                  <span class="meta">@CookieValue(value=&quot;JSESSIONID&quot; ,required=&quot;false&quot;)</span>  </span></span><br><span class="line"><span class="params">                   //初始化一个cookie，响应cookie，第一次时</span></span><br><span class="line"><span class="params">                   String JSESSIONID)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>@CookieValue(value=&quot;JSESSIONID&quot; ,required=&quot;false&quot;) String JSESSION</code></p>
<p>第一次获取时可能没有，所以将required设置为false，</p>
</li>
<li>
<p><code>@RequestHeader(&quot;user-agent&quot;)</code></p>
<p>获取请求头中的数据。</p>
<table>
<thead>
<tr>
<th>Controller method argument 控制器方法参数</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>jakarta.servlet.ServletRequest</code>, <code>jakarta.servlet.ServletResponse</code></td>
<td>请求/响应对象</td>
</tr>
<tr>
<td><code>jakarta.servlet.http.HttpSession</code></td>
<td>强制存在会话。因此，这样的参数永远不会为 <code>null</code> 。</td>
</tr>
<tr>
<td><code>java.io.InputStream</code>, <code>java.io.Reader</code></td>
<td>用于访问由 Servlet API 公开的原始请求正文。</td>
</tr>
<tr>
<td><code>java.io.OutputStream</code>, <code>java.io.Writer</code></td>
<td>用于访问由 Servlet API 公开的原始响应正文。</td>
</tr>
<tr>
<td><code>@PathVariable</code></td>
<td>接收路径参数注解</td>
</tr>
<tr>
<td><code>@RequestParam</code></td>
<td>用于访问 Servlet 请求参数，包括多部分文件。参数值将转换为声明的方法参数类型。</td>
</tr>
<tr>
<td><code>@RequestHeader</code></td>
<td>用于访问请求标头。标头值将转换为声明的方法参数类型。</td>
</tr>
<tr>
<td><code>@CookieValue</code></td>
<td>用于访问Cookie。Cookie 值将转换为声明的方法参数类型。</td>
</tr>
<tr>
<td><code>@RequestBody</code></td>
<td>用于访问 HTTP 请求正文。正文内容通过使用 <code>HttpMessageConverter</code> 实现转换为声明的方法参数类型。</td>
</tr>
<tr>
<td><code>java.util.Map</code>, <code>org.springframework.ui.Model</code>, <code>org.springframework.ui.ModelMap</code></td>
<td>共享域对象，并在视图呈现过程中向模板公开。</td>
</tr>
<tr>
<td><code>Errors</code>, <code>BindingResult</code></td>
<td>验证和数据绑定中的错误信息获取对象！</td>
</tr>
</tbody>
</table>
</li>
</ol>
<h2 id="域对象的使用">域对象的使用</h2>
<h3 id="请求域">请求域</h3>
<ol>
<li>
<p>请求域</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(HttpServeletRequest req)</span>&#123;</span><br><span class="line">    req.settAribute(<span class="string">&quot;item&quot;</span>,object)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>ModelAndView</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    ModelAndView mv=<span class="keyword">new</span> <span class="title class_">ModelAndView</span>()</span><br><span class="line">    mv.addObject(<span class="string">&quot;item&quot;</span>,object)  <span class="comment">//放入请求域</span></span><br><span class="line">    <span class="comment">// 设置逻辑视图</span></span><br><span class="line">    mv.setViewName(<span class="string">&quot;index&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> mv  <span class="comment">//需要返回ModeAndView对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Model</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(</span></span><br><span class="line"><span class="params">    Model model</span></span><br><span class="line"><span class="params">)</span>&#123;</span><br><span class="line">    model.addArttibute(<span class="string">&quot;item&quot;</span>,object)  <span class="comment">//放入请求域</span></span><br><span class="line">    <span class="comment">// 设置逻辑视图</span></span><br><span class="line">    mv.setViewName(<span class="string">&quot;index&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>  <span class="comment">//需要返回ModeAndView对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(</span></span><br><span class="line"><span class="params">    Map&lt;String,String&gt; map</span></span><br><span class="line"><span class="params">)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;item&quot;</span>,Object);  <span class="comment">//放入请求域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>ModelMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(</span></span><br><span class="line"><span class="params">    ModelMap modeMap </span></span><br><span class="line"><span class="params">)</span>&#123;</span><br><span class="line">    modeMap.addArttribute(<span class="string">&quot;item&quot;</span>,object) <span class="comment">//放入请求域</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>model、map、ModelMap三个对象属于同一个类</p>
<h3 id="会话域">会话域</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/session&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrSession</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//直接对session对象操作,即对会话范围操作!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="应用域">应用域</h3>
<p>解释：springmvc会在初始化容器的时候，讲servletContext对象存储到ioc容器中！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/attr/application&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">attrApplication</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    servletContext.setAttribute(<span class="string">&quot;appScopeMsg&quot;</span>, <span class="string">&quot;i am hungry...&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="spring-MVC-跳转控制">spring MVC 跳转控制</h2>
<ol>
<li>
<p><strong>视图解析器</strong></p>
<p>spring mvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置动态页面语言jsp的视图解析器,快速查找jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span><span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		物理路径</span></span><br><span class="line"><span class="comment">		前缀：/WEB-INF/views/</span></span><br><span class="line"><span class="comment">		后缀：.jsp</span></span><br><span class="line"><span class="comment">		资源路径:前缀+逻辑路径+后缀</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>设置<strong>转发</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">// /WEB-INF/views/xxx.jsp</span></span><br><span class="line"><span class="comment">// index:/WEB-INF/views/index.jsp</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">goIndex</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// /xxx.jsp</span></span><br><span class="line"><span class="comment">// test:/test.jsp</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forword:/test.jsp&quot;</span>;  <span class="comment">//转发，有前缀forword，不会被视图解析器解析</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回的index被视图解析器解析，返回index.jsp.完成转发。</p>
</li>
<li>
<p><strong>重定向</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/redirect-demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">redirectDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 重定向到 /demo 路径 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/demo&quot;</span>;   <span class="comment">//重定向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="返回Json数据">返回Json数据</h2>
<ol>
<li>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加mvc注解驱动</p>
<p>mvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用注解ResponseBody</p>
<p>直接返回对象。</p>
</li>
</ol>
<h2 id="返回静态资源处理">返回静态资源处理</h2>
<h3 id="原因：">原因：</h3>
<ol>
<li>
<p>在tomcat中，静态资源由DefaultServlet资源处理，jsp资源由JSPServelet处理，url=“/*”</p>
</li>
<li>
<p>但是在spring mvc中，配置了DispatcherServelet,且url=&quot;/&quot;这代表静态资源由DispatcherServelet处理，但是它处理不了静态资源。只能处理spring mvc请求。</p>
</li>
</ol>
<h3 id="处理：">处理：</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置DefaultServlet处理静态资源--&gt;</span>  但是spring mvc请求不能访问</span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servelet-handler</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>先被DispatcherServelet处理。若未找到，则由DefaultServelet处理。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servelet-handler</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="RESTFul-风格设计">RESTFul 风格设计</h2>
<ol>
<li>一个URI代表一种资源</li>
<li>GET：获取、POST：新建、PUT:更新、DELETE：删除</li>
<li>资源表示形式是XML或JSON</li>
<li>客户端和服务端之间是无状态的，</li>
</ol>
<p>@CrossOrigin  解决跨域问题</p>
<h2 id="异常处理">异常处理</h2>
<p>声明式异常处理</p>
<p>控制层通知</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">@RestControllerAdvice</span><br></pre></td></tr></table></figure>
<p>指定处理的异常类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ExceptionHandler(ServiceException.class)</span><br></pre></td></tr></table></figure>
<h2 id="拦截器">拦截器</h2>
<p><strong>实现HandlerInterceptor接口</strong>;</p>
<blockquote>
<p>==拦截==浏览器发送到服务器的请求，会在控制器方法执行前后执行,在DispatcherServelet和Controller之间拦截。</p>
<p>==过滤器==是在DispatcherServelt之前执行。</p>
</blockquote>
<p>preHandle() 在控制器方法之前执行</p>
<p>postHandle() 在控制器方法之后执行</p>
<p>afterCompletion();在渲染视图完毕之后执行</p>
<ol>
<li>编写Myinterceptor.java</li>
</ol>
<p>​		实现HandleInterceptor的方法。</p>
<ol start="2">
<li>mvc.xml配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认拦截所有请求--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;online.zorange.config.Myinterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认拦截所有请求--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        /* 一层路径</span></span><br><span class="line"><span class="comment">        /** 多层</span></span><br><span class="line"><span class="comment">        --&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--拦截路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--排除路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;myInterceptor&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>
<p>多个拦截器执行顺序</p>
<p>preHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置顺序调用各个 preHandle() 方法。</p>
<p>postHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 postHandle() 方法。</p>
<p>afterCompletion() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 afterCompletion() 方法。</p>
</li>
</ol>
<h2 id="参数校验">参数校验</h2>
<ol>
<li>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 校验注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 校验注解实现--&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator-annotation-processor --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>应用注解</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 注解 | 规则 |</span><br><span class="line">| ---- | ---- |</span><br><span class="line"> | @Null                      | 标注值必须为 null               |</span><br><span class="line"> | @NotNull                   | 标注值不可为 null               |</span><br><span class="line"> | @AssertTrue                | 标注值必须为 true               |</span><br><span class="line"> | @AssertFalse               | 标注值必须为 false              |</span><br><span class="line"> | @Min(value)                | 标注值必须大于或等于 value          |</span><br><span class="line"> | @Max(value)                | 标注值必须小于或等于 value          |</span><br><span class="line"> | @DecimalMin(value)         | 标注值必须大于或等于 value          |</span><br><span class="line"> | @DecimalMax(value)         | 标注值必须小于或等于 value          |</span><br><span class="line"> | @Size(max,min)             | 标注值大小必须在 max 和 min 限定的范围内 |</span><br><span class="line"> | @Digits(integer,fratction) | 标注值值必须是一个数字，且必须在可接受的范围内   |</span><br><span class="line"> | @Past                      | 标注值只能用于日期型，且必须是过去的日期      |</span><br><span class="line"> | @Future                    | 标注值只能用于日期型，且必须是将来的日期      |</span><br><span class="line"> | @Pattern(value)            | 标注值必须符合指定的正则表达式           |</span><br><span class="line"> JSR 303 只是一套标准，需要提供其实现才可以使用。Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的扩展注解：</span><br><span class="line"> | 注解        | 规则                   |</span><br><span class="line"> | --------- | -------------------- |</span><br><span class="line"> | @Email    | 标注值必须是格式正确的 Email 地址 |</span><br><span class="line"> | @Length   | 标注值字符串大小必须在指定的范围内    |</span><br><span class="line"> | @NotEmpty | 标注值字符串不能是空字符串        |</span><br><span class="line"> | @Range    | 标注值必须在指定的范围内         |</span><br></pre></td></tr></table></figure>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.atguigu.pojo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//age   1 &lt;=  age &lt; = 150</span></span><br><span class="line">    <span class="meta">@Min(10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//name 3 &lt;= name.length &lt;= 6</span></span><br><span class="line">    <span class="meta">@Length(min = 3,max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//email 邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>
<p>handler标记和绑定错误收集</p>
<ol>
<li>
<p><strong>@Validated进行校验</strong></p>
</li>
<li>
<p>BindingResult，<strong>接收校验结果</strong></p>
<p>a. 在实体类参数和 BindingResult ==之间不能有任何其他参数,== BindingResult可以接受错误信息,避免信息抛出!</p>
<p>b. result.hasErrors()  判断校验是否有错误，有为true，无：false；</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Validated</span> 代表应用校验注解! 必须添加!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">save</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> User user,</span></span><br><span class="line"><span class="params">                       //在实体类参数和 BindingResult 之间不能有任何其他参数, BindingResult可以接受错误信息,避免信息抛出!</span></span><br><span class="line"><span class="params">                       BindingResult result)</span>&#123;</span><br><span class="line">       <span class="comment">//判断是否有信息绑定错误! 有可以自行处理!</span></span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> result.getFieldError().toString();</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有,正常处理业务即可</span></span><br><span class="line">        System.out.println(<span class="string">&quot;正常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>易混总结</strong></p>
<p>@NotNull、@NotEmpty、@NotBlank 都是用于在数据校验中检查字段值是否为空的注解，但是它们的用法和校验规则有所不同。</p>
<ol>
<li>
<p>@NotNull  </p>
<p>@NotNull 注解是 JSR 303 规范中定义的注解，当被标注的字段值为 null 时，会认为校验失败而抛出异常。该注解不能用于字符串类型的校验，若要对字符串进行校验，应该使用 @NotBlank 或 @NotEmpty 注解。</p>
</li>
<li>
<p>@NotEmpty  </p>
<p>@NotEmpty 注解同样是 JSR 303 规范中定义的注解，对于 CharSequence、Collection、Map 或者数组对象类型的属性进行校验，校验时会检查该属性是否为 Null 或者 size()==0，如果是的话就会校验失败。但是对于其他类型的属性，该注解无效。需要注意的是只校验空格前后的字符串，如果该字符串中间只有空格，不会被认为是空字符串，校验不会失败。</p>
</li>
<li>
<p>@NotBlank  </p>
<p>@NotBlank 注解是 Hibernate Validator 附加的注解，对于字符串类型的属性进行校验，校验时会检查该属性是否为 Null 或 “” 或者只包含空格，如果是的话就会校验失败。需要注意的是，@NotBlank 注解只能用于字符串类型的校验。<br>
总之，这三种注解都是用于校验字段值是否为空的注解，但是其校验规则和用法有所不同。在进行数据校验时，需要根据具体情况选择合适的注解进行校验。</p>
</li>
</ol>
</li>
</ol>
<h2 id="文件上传">文件上传</h2>
<ol>
<li>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Form表单</p>
<ol>
<li>上传方式必须是post</li>
<li>请求体的编码方式必须是 multipart/form-data（通过 form 标签的 enctype 属性设置）</li>
<li>使用input，设置type为file，生成文件上传框</li>
</ol>
</li>
<li>
<p>在spring mvc配置中配置文件上传解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.support.StandardServletMultipartResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在<code>web.xml</code>中配置文件上传的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>yourAppServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义文件上传时所需的最大值，单位为字节 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">max-file-size</span>&gt;</span>10485760<span class="tag">&lt;/<span class="name">max-file-size</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义单个上传文件的最大值，单位为字节 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">max-request-size</span>&gt;</span>20971520<span class="tag">&lt;/<span class="name">max-request-size</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义内存中存储文件的最大值，超过此大小的文件会写入到硬盘中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file-size-threshold</span>&gt;</span>5242880<span class="tag">&lt;/<span class="name">file-size-threshold</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在控制器中获取文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MutipartFile file)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    file.getName();    <span class="comment">// 表单项的name</span></span><br><span class="line">    file.getOrginalFileName();   <span class="comment">//文件的名字</span></span><br><span class="line">    </span><br><span class="line">    file.transferTo(<span class="string">&quot;path&quot;</span>/ File);  <span class="comment">// 上传文件 ServeletContext.getRelpath  //web应用的部署路径</span></span><br><span class="line">    <span class="comment">// File.separator  操作系统的文件文件分隔符</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadImg</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//获取文件类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> FileUtil.extName(originalFilename);</span><br><span class="line">        <span class="comment">//判断是不是图片</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;jpg&quot;</span>.equals(type) &amp;&amp; !<span class="string">&quot;png&quot;</span>.equals(type) &amp;&amp; !<span class="string">&quot;jpeg&quot;</span>.equals(type) &amp;&amp; !<span class="string">&quot;gif&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(Constants.CODE_NOT_LOGIN,<span class="string">&quot;文件类型不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取文件大小</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> file.getSize();</span><br><span class="line">        <span class="comment">//获取文件的父目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">upLoadParentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadImg);</span><br><span class="line">        <span class="comment">//判断父目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!upLoadParentFile.exists()) &#123;</span><br><span class="line">            upLoadParentFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义一个文件的唯一的一个标识码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> IdUtil.fastSimpleUUID();</span><br><span class="line">        <span class="comment">//文件的唯一标识码+文件的后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">FileUuid</span> <span class="operator">=</span> uuid + <span class="string">&quot;.&quot;</span> + type;</span><br><span class="line">        <span class="comment">//实际上传文件的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">upLoadImg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadImg + FileUuid);</span><br><span class="line">        <span class="comment">//获取文件的md5,用于判断文件是否存在</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">md5</span> <span class="operator">=</span> SecureUtil.md5(file.getInputStream());</span><br><span class="line">        <span class="comment">//文件的访问路径</span></span><br><span class="line">        String Url;</span><br><span class="line">        <span class="comment">//判断文件是否存在,如果存在,则直接返回文件的访问路径</span></span><br><span class="line">        QueryWrapper&lt;Files&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;md5&quot;</span>, md5);</span><br><span class="line">        List&lt;Files&gt; filesList =<span class="built_in">this</span>.list(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (filesList.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//将文件写入到指定的路径</span></span><br><span class="line">            file.transferTo(upLoadImg);</span><br><span class="line">            <span class="comment">//文件的访问路径</span></span><br><span class="line">            Url = serverIp + <span class="string">&quot;/files/download/&quot;</span> + FileUuid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>   filesList.get(<span class="number">0</span>).getUrl();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将文件信息保存到数据库中</span></span><br><span class="line">        <span class="type">Files</span> <span class="variable">saveFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Files</span>();</span><br><span class="line">        saveFile.setName(originalFilename);</span><br><span class="line">        saveFile.setType(type);</span><br><span class="line">        saveFile.setSize(size / <span class="number">1024</span>);</span><br><span class="line">        saveFile.setUrl(Url);</span><br><span class="line">        saveFile.setMd5(md5);</span><br><span class="line">        <span class="built_in">this</span>.save(saveFile);</span><br><span class="line">        <span class="keyword">return</span> Url;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="文件下载">文件下载</h2>
<p>完整的报文信息</p>
<p><code>ResponseEntity </code></p>
<p><code>ReqestEntity</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> ResponseEntity&lt;响应体的类型 <span class="type">byte</span>[]&gt;()&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取文件的字节数组。响应体</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * 新建响应头，new HttpHeaders()</span></span><br><span class="line"><span class="comment">    * 将响应头：设置为(&quot;Content-Disposition&quot;,&quot;attachment;filename=a.png&quot;)</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * 创建ResponseEntity对象 new ResponseEntity(byte[],响应头,HttpStatus.ok)</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * 返回</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">download</span><span class="params">(String fileUuid, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(fileUuid);</span><br><span class="line">        <span class="comment">//判断文件的类型</span></span><br><span class="line">        <span class="comment">//获取文件信息</span></span><br><span class="line">        String url= serverIp + <span class="string">&quot;/files/download/&quot;</span> + fileUuid;</span><br><span class="line">        QueryWrapper&lt;Files&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">        <span class="type">Files</span> <span class="variable">one</span> <span class="operator">=</span> <span class="built_in">this</span>.getOne(queryWrapper);</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> FileUtil.extName(fileUuid);</span><br><span class="line">        <span class="comment">//获取文件的路径</span></span><br><span class="line">        String filePath;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;jpg&quot;</span>.equals(type) || <span class="string">&quot;png&quot;</span>.equals(type) || <span class="string">&quot;jpeg&quot;</span>.equals(type) || <span class="string">&quot;gif&quot;</span>.equals(type)) &#123;</span><br><span class="line">            filePath = uploadImg + fileUuid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filePath = uploadArticle + fileUuid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">       <span class="comment">// 当为图片时</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;jpg&quot;</span>.equals(type) || <span class="string">&quot;png&quot;</span>.equals(type) || <span class="string">&quot;jpeg&quot;</span>.equals(type) || <span class="string">&quot;gif&quot;</span>.equals(type)) &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置响应内容类型为二进制流，以便下载文件</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置响应头，指定下载时的文件名，并使用UTF-8编码文件名以支持中文文件名</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(one.getName(), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> FileUtil.getInputStream(file);</span><br><span class="line">        <span class="comment">//获取输出流</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="comment">//将文件写入到输出流</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Spring-MVC-执行流程">Spring MVC 执行流程</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">浏览器发送请求：客户端通过HTTP请求向服务器发起访问。</span><br><span class="line">DispatcherServlet接收请求：Spring MVC的核心组件DispatcherServlet捕获到请求。</span><br><span class="line">HandlerMapping寻找处理器：DispatcherServlet委托给HandlerMapping来决定应该由哪个控制器（Handler）处理这个请求。</span><br><span class="line">如果没有找到合适的处理器，则会返回一个空的结果，此时可能会根据配置走向默认的servlet或其他错误处理机制。</span><br><span class="line">HandlerAdapter适配处理器：如果找到合适的处理器，HandlerMapping将返回包含处理器及其适配器的信息。DispatcherServlet再选择一个HandlerAdapter来调用处理器方法。</span><br><span class="line">拦截器（可选）：在调用处理器方法之前，如果有配置拦截器（Interceptor），则首先执行拦截器的preHandle()方法。</span><br><span class="line">调用控制器方法：通过HandlerAdapter调用具体的控制器方法。</span><br><span class="line">模型数据填充：控制器方法处理完后，通常会返回一个ModelAndView对象，其中包含视图名称以及模型数据。</span><br><span class="line">拦截器（可选）：如果配置了拦截器，接下来执行拦截器的postHandle()方法。</span><br><span class="line">视图解析：视图名称被传递给ViewResolver进行解析，得到实际的视图对象。</span><br><span class="line">渲染视图：视图对象负责渲染页面，同时使用模型数据填充页面内容。</span><br><span class="line">拦截器（可选）：最后，如果配置了拦截器，执行拦截器的afterCompletion()方法。</span><br></pre></td></tr></table></figure>
<p>==Spring MVC框架中的请求处理流程==:</p>
<p>浏览器发送请求-&gt;DispatcherServelet接收请求-&gt;HandlerMapping通过控制器映射器查找控制器，-&gt;1. 若没有找到对应的控制器，-&gt;1.1 如果配置了默认的servelet，通过默认的servelet来处理请求，-&gt;1.2  如果没有配置默认的servelet，则返回404-&gt; 2. 找到了对应的控制器-&gt; 将控制器添加到处理器调用链中-&gt;通过控制器映射器得到处理器适配器HandlerAdapter-&gt;调用拦截器的preHandler方法-&gt;通过处理器适配器调对应的控制器方法，返回一个ModelAndView对象，包含视图名称及模型数据，-&gt;  拦截器调用Posthandler方法。-&gt;  调用视图解析和视图渲染-&gt;调用拦截器的afterCompletion方法。</p>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot+vue学习</title>
    <url>/2023/09/07/SpringBoot-vue%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="Application-yml-配置">Application.yml 配置</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8181</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">421232</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span> <span class="comment">#calsspath代表resources目录</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">online.zorange.springboot.entity</span></span><br></pre></td></tr></table></figure>
<h2 id="sql-语句写的位置">sql 语句写的位置</h2>
<ol>
<li>
<h4 id="注解">注解</h4>
</li>
</ol>
<p><img src="http://oss.zorange.online/blog/image-20231001103758694.png" alt=""></p>
<ol start="2">
<li>mybatis 的 xml 文件里面</li>
</ol>
<p><img src="D:/OrangeZSW.github.io/source/_posts/Img_Typora/SpringBoot-vue%E5%AD%A6%E4%B9%A0/image-20231001103944233.png" alt=""></p>
<h2 id="跨域问题">跨域问题</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="comment">//当前跨域最大有效时长。这里默认1天</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MAX_AGE</span> <span class="operator">=</span> <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化cors配置对象</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="comment">//配置跨域规则</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//允许携带cookie</span></span><br><span class="line">        corsConfiguration.addAllowedOriginPattern(<span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line">        <span class="comment">//允许所有请求头</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//允许所有请求方法	</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//配置跨域请求的域名</span></span><br><span class="line">        corsConfiguration.setMaxAge(MAX_AGE);</span><br><span class="line">        <span class="comment">//添加映射路径，拦截一切请求</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, corsConfiguration);</span><br><span class="line">        <span class="comment">//返回corsFilter实例，参数：cors配置源对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="忽略某个字段，不展示给前端">忽略某个字段，不展示给前端</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure>
<p><img src="D:/OrangeZSW.github.io/source/_posts/Img_Typora/SpringBoot-vue%E5%AD%A6%E4%B9%A0/image-20231004145243587.png" alt=""></p>
<h2 id="Mybatis-plus-实体类的注解">Mybatis plus 实体类的注解</h2>
<p><img src="http://oss.zorange.online/blog/image-20231004103440387.png" alt=""></p>
<h2 id="后端分页（UserController-java）">后端分页（UserController.java）</h2>
<h3 id="使用-Mybatis-Plus">使用 Mybatis-Plus</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 使用mybatis-plus的分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;User&gt; <span class="title function_">findByPage</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> Integer pageNum,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> Integer pageSize,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;&quot;)</span> String userName,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;&quot;)</span> String email,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;&quot;)</span> String address)</span>&#123;</span><br><span class="line">        IPage&lt;User&gt; page= <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum,pageSize);</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper=<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.like(<span class="string">&quot;username&quot;</span>,userName);</span><br><span class="line">        <span class="comment">//这里用and是因为如果直接用like，可能框架拼接sql时没有加上and，导致查询结果不正确，但是mybatis-plus的wrapper对象提供了and方法，可以解决这个问题。</span></span><br><span class="line"><span class="comment">//        wrapper.and(w-&gt;w.like(&quot;email&quot;,email));</span></span><br><span class="line">        wrapper.like(<span class="string">&quot;email&quot;</span>,email);</span><br><span class="line">        wrapper.like(<span class="string">&quot;address&quot;</span>,address);</span><br><span class="line">        <span class="keyword">return</span> userService.page(page,wrapper);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mapper-interface">Mapper.interface</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询</span></span><br><span class="line"><span class="comment"> * 不使用mybatis-plus的分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//接口路径为/user/page?pageNum=1&amp;pageSize=10</span></span><br><span class="line"><span class="comment">//@RequestParam注解用于获取请求参数的值,即将url中的pageNum和pageSize的值传递给这两个参数。</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">findByPage</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam</span> Integer pageNum,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam</span> Integer pageSize,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam</span> String userName,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam</span> String email,</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestParam</span> String address)</span>&#123;</span><br><span class="line">    <span class="comment">//查询总条数</span></span><br><span class="line">    Integer total=userMapper.selectTotal(userName,email,address);</span><br><span class="line">    <span class="comment">//查询第几页，每页几条数据</span></span><br><span class="line">    pageNum=(pageNum-<span class="number">1</span>)*pageSize;</span><br><span class="line">    List&lt;User&gt; data=userMapper.selectPage(pageNum,pageSize,userName,email,address);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据封装成map</span></span><br><span class="line">    Map&lt;String, Object&gt; res=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    res.put(<span class="string">&quot;data&quot;</span>,data);</span><br><span class="line">    res.put(<span class="string">&quot;total&quot;</span>,total);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mybatisPlus-配置">mybatisPlus 配置</h2>
<h3 id="pom-xml-依赖">pom.xml 依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        mybatis-plus依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="mybatisPlusConfig-java">mybatisPlusConfig.java</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;online.zorange.springboot.mapper&quot;)</span><span class="comment">//扫描mapper文件夹</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));<span class="comment">//如果配置多个插件,切记分页最后添加</span></span><br><span class="line">        <span class="comment">//interceptor.addInnerInterceptor(new PaginationInnerInterceptor()); 如果有多数据源可以不配具体类型 否则都建议配上具体的DbType</span></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="axios">axios</h2>
<h3 id="1-npm-i-axios-S">1. (npm i axios -S)</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i axios -S</span><br></pre></td></tr></table></figure>
<h4 id="封装代码">封装代码</h4>
<p>src/utils/request.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;/api&quot;</span>, <span class="comment">// 注意！！ 这里是全局统一加上了 &#x27;/api&#x27; 前缀，也就是说所有接口都会加上&#x27;/api&#x27;前缀在，页面里面写接口的时候就不要加 &#x27;/api&#x27;了，否则会出现2个&#x27;/api&#x27;，类似 &#x27;/api/api/user&#x27;这样的报错，切记！！！</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// request 拦截器</span></span><br><span class="line"><span class="comment">// 可以自请求发送前对请求做一些处理</span></span><br><span class="line"><span class="comment">// 比如统一加token，对请求参数统一加密</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&quot;application/json;charset=utf-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// config.headers[&#x27;token&#x27;] = user.token;  // 设置请求头</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line"><span class="comment">// 可以在接口响应后统一处理结果</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = response.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">// 如果是返回的文件</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">config</span>.<span class="property">responseType</span> === <span class="string">&quot;blob&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 兼容服务端返回的字符串数据</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      res = res ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res) : res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err&quot;</span> + error); <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request;</span><br></pre></td></tr></table></figure>
<h4 id="main-js">main.js</h4>
<p><img src="http://oss.zorange.online/blog/image-20231004154555901.png" alt=""></p>
<p>使用：</p>
<p><img src="http://oss.zorange.online/blog/image-20231005153840604.png" alt=""></p>
<h3 id="2-vue-add-axios">2. vue add axios</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue add axios</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<p><img src="http://oss.zorange.online/blog/image-20231004160946025.png" alt=""></p>
<p>返回的数据：</p>
<p><img src="http://oss.zorange.online/blog/image-20231004161101596.png" alt=""></p>
<h2 id="路由">路由</h2>
<h3 id="子路由">子路由</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">children: [ &#123; 子路由一 &#125;, &#123; 子路由二 &#125; ]</span><br></pre></td></tr></table></figure>
<p><img src="http://oss.zorange.online/blog/image-20231009185211177.png" alt=""></p>
<ol>
<li>创建一个 components.vue</li>
<li>将需要的组件复制过来</li>
<li>定义自定义的值</li>
</ol>
<p><img src="D:/OrangeZSW.github.io/source/_posts/Img_Typora/SpringBoot-vue%E5%AD%A6%E4%B9%A0/image-20231009191648584.png" alt=""></p>
<ol start="4">
<li>导入 components</li>
</ol>
<p><img src="D:/OrangeZSW.github.io/source/_posts/Img_Typora/SpringBoot-vue%E5%AD%A6%E4%B9%A0/image-20231009191925407.png" alt=""></p>
<ol start="5">
<li>引用+传值</li>
</ol>
<p><img src="D:/OrangeZSW.github.io/source/_posts/Img_Typora/SpringBoot-vue%E5%AD%A6%E4%B9%A0/image-20231009192355327.png" alt=""></p>
<h2 id="Excel-导出">Excel 导出</h2>
<p><a href="https://loolly_admin.oschina.io/hutool-site/docs/#/poi/Excel%E7%94%9F%E6%88%90-ExcelWriter">hutool</a></p>
<h3 id="安装依赖">安装依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        hutool依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="别名">别名</h3>
<p>在导入和导出时，使用别名，</p>
<p>在<code>entity</code>对象加个<code>hutool</code>的<code>Alias</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.annotation.Alias;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hu-tool的注解,解决导入时字段为中文时识别不了的问题</span></span><br><span class="line">      <span class="meta">@Alias(&quot;用户名&quot;)</span></span><br><span class="line">      <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">      <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Alias(&quot;密码&quot;)</span></span><br><span class="line">      <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">      <span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure>
<p>用了注解之后下面代码里面起别名就可以去掉了。</p>
<h3 id="导出">导出</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//导出excel</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/export&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        从数据库中查询出所有的数据</span></span><br><span class="line">          List&lt;User&gt; list = userService.list();</span><br><span class="line"><span class="comment">//        导出    1.创建writer对象    2.设置excel表头    3.写出数据</span></span><br><span class="line">        <span class="type">ExcelWriter</span> <span class="variable">writer</span> <span class="operator">=</span> ExcelUtil.getWriter(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        别名，也可以用注解来设置</span></span><br><span class="line">        writer.addHeaderAlias(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;编号&quot;</span>);</span><br><span class="line">        writer.addHeaderAlias(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;用户名&quot;</span>);</span><br><span class="line">        writer.addHeaderAlias(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;密码&quot;</span>);</span><br><span class="line">        writer.addHeaderAlias(<span class="string">&quot;nickname&quot;</span>,<span class="string">&quot;昵称&quot;</span>);</span><br><span class="line">        writer.addHeaderAlias(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;邮箱&quot;</span>);</span><br><span class="line">        writer.addHeaderAlias(<span class="string">&quot;phone&quot;</span>,<span class="string">&quot;电话&quot;</span>);</span><br><span class="line">        writer.addHeaderAlias(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;地址&quot;</span>);</span><br><span class="line">        writer.addHeaderAlias(<span class="string">&quot;creatTime&quot;</span>,<span class="string">&quot;创建时间&quot;</span>);</span><br><span class="line"><span class="comment">//        将list对象写出到writer中</span></span><br><span class="line">        writer.write(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置浏览器响应格式</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//        设置响应头信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> URLEncoder.encode(<span class="string">&quot;用户列表&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//        设置响应头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span>+fileName+<span class="string">&quot;.xls&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        将writer中的数据写出到浏览器</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        writer.flush(out,<span class="literal">true</span>);</span><br><span class="line">        out.close();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="导入">导入</h3>
<p>后端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入excel</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/import&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">importUser</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//获取上传的文件流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">    <span class="comment">//读取excel</span></span><br><span class="line">    <span class="type">ExcelReader</span> <span class="variable">reader</span> <span class="operator">=</span> ExcelUtil.getReader(in);</span><br><span class="line">    <span class="comment">//读取第二行开始的数据</span></span><br><span class="line">    List&lt;User&gt; list = reader.readAll(User.class);</span><br><span class="line">    <span class="comment">//批量保存到数据库中</span></span><br><span class="line">    System.out.println(list);</span><br><span class="line">    <span class="keyword">return</span> userService.saveBatch(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前端</p>
<p>element 的组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">  action=&quot;http://localhost:8181/user/import&quot;</span><br><span class="line">  style=&quot;display: inline-block&quot;</span><br><span class="line">  :show-file-list=&quot;false&quot;</span><br><span class="line">  :accept=&quot;xlsx&quot;</span><br><span class="line">  :on-success=&quot;handleExcelSuccess&quot;</span><br><span class="line">&gt;</span><br><span class="line">        &lt;el-button style=&quot;margin: 5px&quot; type=&quot;primary&quot; &gt;导入&lt;i class=&quot;el-icon-download&quot;&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-upload&gt;</span><br></pre></td></tr></table></figure>
<h2 id="日志打印：">日志打印：</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Slf4j注解是lombok提供的，用于打印日志</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br></pre></td></tr></table></figure>
<h2 id="Spring-Boot-层">Spring Boot 层</h2>
<p><img src="D:/OrangeZSW.github.io/source/_posts/Img_Typora/SpringBoot-vue%E5%AD%A6%E4%B9%A0/image-20231017151940841.png" alt=""></p>
<p>common 统一包装</p>
<p>config 过滤层</p>
<p>controller 控制</p>
<p>entity 实体类</p>
<pre><code>	Dao 数据包装类
</code></pre>
<p>exception 自定义异常</p>
<p>mapper 接口</p>
<p>service 服务</p>
<p>utils 工具</p>
<h3 id="common-统一包装">common 统一包装</h3>
<p><code>constants.java</code></p>
<p>定义常量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.common;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 用于存放常量</span></span><br><span class="line"><span class="comment"> * 常量接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">    <span class="comment">//操作成功</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CODE_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;200&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_SUCCESS</span> <span class="operator">=</span> <span class="string">&quot;操作成功&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//系统错误</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CODE_ERROR</span> <span class="operator">=</span> <span class="string">&quot;500&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_ERROR</span> <span class="operator">=</span> <span class="string">&quot;系统错误&quot;</span>;</span><br><span class="line">    <span class="comment">//参数错误</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CODE_PARAM_ERROR</span> <span class="operator">=</span> <span class="string">&quot;400&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_PARAM_ERROR</span> <span class="operator">=</span> <span class="string">&quot;参数错误&quot;</span>;</span><br><span class="line">    <span class="comment">//其他业务异常</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">CODE_OTHER_ERROR</span> <span class="operator">=</span> <span class="string">&quot;501&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_OTHER_ERROR</span> <span class="operator">=</span> <span class="string">&quot;其他业务异常&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">CODE_NOT_LOGIN</span> <span class="operator">=</span> <span class="string">&quot;401&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MSG_NOT_LOGIN</span> <span class="operator">=</span> <span class="string">&quot;权限不足&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Result.java</code></p>
<p>接口，统一返回包装类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 接口，统一返回包装类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">//泛型，可以是任意类型</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="comment">//成功的方法，没有返回数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Constants.CODE_SUCCESS,Constants.MSG_SUCCESS,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成功的方法，有返回数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Constants.CODE_SUCCESS,Constants.MSG_SUCCESS,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败的方法，没有返回数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Constants.CODE_ERROR,Constants.MSG_ERROR,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败的方法，有返回的信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Constants.CODE_ERROR,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败的方法，有自定义的错误码和错误信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String code,String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="exception-自定义异常处理">exception 自定义异常处理</h3>
<p><code>GlobalExceptionHandler.java</code></p>
<p>全局异常处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.common.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理ServiceException异常,如果抛出ServiceException异常，就会被该方法捕获，然后运行该方法</span></span><br><span class="line"><span class="comment">     * 继承了RuntimeException，所以不需要在方法上抛出异常</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e 业务异常</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">handle</span><span class="params">(ServiceException e)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(e.getCode(),e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>ServiceException.java</code></p>
<p>自定义服务类异常处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceException</span><span class="params">(String code, String msg)</span>&#123;</span><br><span class="line">        <span class="comment">//调用父类的构造方法</span></span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">        <span class="built_in">this</span>.code=code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="JWT登录">JWT登录</h2>
<h3 id="依赖">依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        jwt依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="生成token">生成token</h3>
<p>utils.tokenUtil.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 生成token</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">genToken</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.create().withAudience(String.valueOf(user.getId()))   <span class="comment">//将user id保存在token里面，作为载荷</span></span><br><span class="line">                .withExpiresAt(DateUtil.offsetHour(<span class="keyword">new</span> <span class="title class_">Date</span>(),<span class="number">2</span>))  <span class="comment">//2小时token失效</span></span><br><span class="line">                .sign(Algorithm.HMAC256(user.getPassword()));  <span class="comment">//将password  作为token密钥</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="前端放开请求头">前端放开请求头</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user=<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>) ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>)) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(user)&#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = user.<span class="property">token</span>;  <span class="comment">// 设置请求头</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建拦截器">创建拦截器</h3>
<p><code>config.interceptor.JWTinterceptor.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.config.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.JWTDecodeException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.JWTVerificationException;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.common.Constants;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.exception.ServiceException;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String token= request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//如果不是映射到方法就直接通过</span></span><br><span class="line">        <span class="keyword">if</span>(!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行认证</span></span><br><span class="line">        <span class="keyword">if</span>(token.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">ServiceException</span>(Constants.CODE_NOT_LOGIN,<span class="string">&quot;无token&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取token中的用户id</span></span><br><span class="line">        String userId;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            userId=JWT.decode(token).getAudience().get(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (JWTDecodeException j)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(Constants.CODE_NOT_LOGIN,<span class="string">&quot;token验证失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//验证</span></span><br><span class="line">        User user=userService.getById(userId);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">ServiceException</span>(Constants.CODE_NOT_LOGIN,<span class="string">&quot;用户不存在，请重新登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//验证token,用户密码加签</span></span><br><span class="line">        JWTVerifier jwtVerifier=JWT.require(Algorithm.HMAC256(user.getPassword())).build();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            jwtVerifier.verify(token);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (JWTVerificationException j)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(Constants.CODE_NOT_LOGIN,<span class="string">&quot;token验证失败,请重新登录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HandlerInterceptor.<span class="built_in">super</span>.preHandle(request, response, handler);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="注册拦截器">注册拦截器</h3>
<p><code>config.interceptorCongif.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.config.interceptor.JwtInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">interceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addInterceptors(registry);</span><br><span class="line">        registry.addInterceptor(jwtInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)  <span class="comment">//拦截所有请求，通过判断token是否合法来确定是否登录</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;user/register&quot;</span>,<span class="string">&quot;**/export&quot;</span>,<span class="string">&quot;**/import&quot;</span>); <span class="comment">//放开登录，注册，导入，导出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注册对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtInterceptor <span class="title function_">jwtInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="文件操作">文件操作</h2>
<h3 id="创建数据库表">创建数据库表</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `file` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文件名称&#x27;</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文件类型&#x27;</span>,</span><br><span class="line">  `size` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文件大小&#x27;</span>,</span><br><span class="line">  `url` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;链接&#x27;</span>,</span><br><span class="line">  `is_delete` tinyint(<span class="number">1</span>) unsigned zerofill <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27; 是否删除&#x27;</span>,</span><br><span class="line">  `enable` tinyint(<span class="number">1</span>) unsigned zerofill <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否禁用&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;文件md5&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">16</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>
<h3 id="实体类entity层">实体类entity层</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">File</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;,type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> Long size;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> is_delete;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件controller层">文件controller层</h3>
<p><code>controller.FileController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.common.Result;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.service.IFileService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 文件上传相关接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IFileService fileService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 前端传递过来的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> fileService.upload(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      下载文件</span></span><br><span class="line"><span class="comment">      @return String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download/&#123;fileUuid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">download</span><span class="params">(<span class="meta">@PathVariable</span> String fileUuid, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> fileService.download(fileUuid, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>先保存在磁盘里面</p>
<p><img src="D:/OrangeZSW.github.io/source/_posts/Img_Typora/SpringBoot-vue%E5%AD%A6%E4%B9%A0/image-20231024170047504.png" alt=""></p>
<h3 id="文件Srevice层">文件Srevice层</h3>
<p><code>FileServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.IdUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.crypto.SecureUtil;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.common.Result;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.entity.Files;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.mapper.FileMapper;</span><br><span class="line"><span class="keyword">import</span> online.zorange.springboot.service.IFileService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;FileMapper, Files&gt; <span class="keyword">implements</span> <span class="title class_">IFileService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;files.upload.path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uploadPath;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     上传文件</span></span><br><span class="line"><span class="comment">     <span class="doctag">@return</span> String 文件的访问路径</span></span><br><span class="line"><span class="comment">     <span class="doctag">@throws</span> IOException IO异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//获取文件后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> FileUtil.extName(originalFilename);</span><br><span class="line">        <span class="comment">//获取文件大小</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> file.getSize();</span><br><span class="line">        <span class="comment">//获取文件的父目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">upLoadParentFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath);</span><br><span class="line">        <span class="comment">//判断父目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!upLoadParentFile.exists()) &#123;</span><br><span class="line">            upLoadParentFile.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个文件的唯一的一个标识码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> IdUtil.fastSimpleUUID();</span><br><span class="line">        <span class="comment">//文件的唯一标识码+文件的后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">FileUuid</span> <span class="operator">=</span> uuid + <span class="string">&quot;.&quot;</span> + type;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实际上传文件的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">upLoadFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath + FileUuid);</span><br><span class="line">        <span class="comment">//获取文件的md5,用于判断文件是否存在</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">md5</span> <span class="operator">=</span> SecureUtil.md5(file.getInputStream());</span><br><span class="line">        <span class="comment">//文件的访问路径</span></span><br><span class="line">        String Url;</span><br><span class="line">        <span class="comment">//判断文件是否存在,如果存在,则直接返回文件的访问路径</span></span><br><span class="line">        <span class="type">Files</span> <span class="variable">one</span> <span class="operator">=</span> getFilesMd5(md5);</span><br><span class="line">        <span class="keyword">if</span> (one != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> one.getUrl();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//将文件写入到指定的路径</span></span><br><span class="line">            file.transferTo(upLoadFile);</span><br><span class="line">            Url = <span class="string">&quot;http://localhost:8181/file/download/&quot;</span> + FileUuid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将文件信息保存到数据库中</span></span><br><span class="line">        <span class="type">Files</span> <span class="variable">saveFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Files</span>();</span><br><span class="line">        saveFile.setName(originalFilename);</span><br><span class="line">        saveFile.setType(type);</span><br><span class="line">        saveFile.setSize(size / <span class="number">1024</span>);</span><br><span class="line">        saveFile.setUrl(Url);</span><br><span class="line">        saveFile.setMd5(md5);</span><br><span class="line">        <span class="built_in">this</span>.save(saveFile);</span><br><span class="line">        <span class="keyword">return</span> Url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        下载文件</span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> fileUuid 文件的唯一标识码</span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> response 响应对象</span></span><br><span class="line"><span class="comment">        <span class="doctag">@return</span> String 文件的唯一标识码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">download</span><span class="params">(String fileUuid, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//根据文件的唯一标识码查询文件信息</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(uploadPath + fileUuid);</span><br><span class="line">        <span class="comment">//设置响应头,告诉浏览器下载文件</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="comment">//将文件写入到响应流中</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(fileUuid, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        <span class="comment">//设置响应类型</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        <span class="comment">//读取上传的文件,写入到响应流中</span></span><br><span class="line">        os.write(FileUtil.readBytes(file));</span><br><span class="line">        <span class="comment">//刷新流</span></span><br><span class="line">        os.flush();</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        os.close();</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;下载成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    查询文件的md5</span></span><br><span class="line"><span class="comment">    <span class="doctag">@return</span> Files</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Files <span class="title function_">getFilesMd5</span><span class="params">(String md5)</span>&#123;</span><br><span class="line">        QueryWrapper&lt;Files&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;md5&quot;</span>, md5);</span><br><span class="line">        <span class="type">Files</span> <span class="variable">one</span> <span class="operator">=</span> <span class="built_in">this</span>.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (one != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> one;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>创建对应的<code>Mapper,Mapper.xml,IService，ServiceImpl</code></p>
<h2 id="element-ui的upload添加header">element-ui的upload添加header</h2>
<ol>
<li>添加：header属性</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">    class=&quot;avatar-uploader&quot;</span><br><span class="line">    action=&quot;http://localhost:8181/file/upload&quot;</span><br><span class="line">    :headers=&quot;headersO&quot;</span><br><span class="line">    :show-file-list=&quot;false&quot;</span><br><span class="line">    :on-success=&quot;handleAvatarSuccess&quot;&gt;</span><br><span class="line">  &lt;img v-if=&quot;form.avatar&quot; :src=&quot;form.avatar&quot; class=&quot;avatar&quot;&gt;</span><br><span class="line">  &lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>设置headersO</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">  <span class="title function_">headersO</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">this</span>.<span class="property">user</span>.<span class="property">token</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">token</span>: token</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h2 id="问题：">问题：</h2>
<h3 id="mybatis-plus">mybatis-plus</h3>
<h3 id="1">1</h3>
<h4 id="描述：">描述：</h4>
<p>改用 mybatis-plus 之后，改用 updateOrSave 或者 updateById 都会</p>
<p>报错：can not execute. because can not find cache of TableInfo for entity!</p>
<p>@TableName 和@TableId 都加了也不行</p>
<h4 id="解决：">解决：</h4>
<p>降低 springboot 的版本</p>
<h3 id="2-request-未定义">2 request 未定义</h3>
<h3 id="描述：-v2">描述：</h3>
<p>定义 request.js , 使用 Vue.prototype.request = request;引入</p>
<p>使用 request 报错：未定义<img src="D:/OrangeZSW.github.io/source/_posts/Img_Typora/SpringBoot-vue%E5%AD%A6%E4%B9%A0/image-20231004164521605.png" alt=""></p>
<p>解决：</p>
<ol>
<li>import request from ‘@/utils/request.js’</li>
<li>使用时加 this<img src="D:/OrangeZSW.github.io/source/_posts/Img_Typora/SpringBoot-vue%E5%AD%A6%E4%B9%A0/image-20231004164721465.png" alt=""></li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger</title>
    <url>/2023/11/01/Swagger/</url>
    <content><![CDATA[<h2 id="⚙️swagger3-配置">⚙️swagger3 配置</h2>
<p><a href="https://swagger.io/">swagger官网</a></p>
<h3 id="SwaggerConfig-java">SwaggerConfig.java</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.*;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">api</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line"></span><br><span class="line">                .build()</span><br><span class="line">                .securitySchemes(Collections.singletonList(apiKey()))</span><br><span class="line">                .securityContexts(Collections.singletonList(securityContext()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApiKey <span class="title function_">apiKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiKey</span>(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;token&quot;</span>, <span class="string">&quot;header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SecurityContext <span class="title function_">securityContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContext.builder()</span><br><span class="line">                .securityReferences(Collections.singletonList(<span class="keyword">new</span> <span class="title class_">SecurityReference</span>(<span class="string">&quot;token&quot;</span>, <span class="keyword">new</span> <span class="title class_">AuthorizationScope</span>[<span class="number">0</span>])))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .description(<span class="string">&quot;**项目管理平台&quot;</span>)</span><br><span class="line">                .title(<span class="string">&quot;**项目管理平台接口api&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="pom-xml-依赖">pom.xml 依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问地址：<a href="http://localhost:8181/swagger-ui/index.html">http://localhost:8181/swagger-ui/index.html</a></p>
<p>如果配置了拦截器，要放开以下路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//swagger2</span><br><span class="line">&quot;/swagger-ui/**&quot;,</span><br><span class="line">&quot;/swagger-resources/**&quot;,</span><br><span class="line">&quot;/swagger-ui.html&quot;,</span><br><span class="line">&quot;/v2/api-docs&quot;,</span><br><span class="line">&quot;/webjars/**&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>acme+nginx证书申请</title>
    <url>/2024/07/15/acme-nginx%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/</url>
    <content><![CDATA[<h1><a href="http://acme.sh">acme.sh</a> 网站申请证书（nginx）</h1>
<h2 id="1️⃣安装-nginx-省略">1️⃣安装 nginx(省略)</h2>
<h2 id="2️⃣安装-acme">2️⃣安装 acme</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh -s email=zhaoolee@gmail.com</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<blockquote>
<p>❗ 申请证书的域名在申请之前要部署(这样不用进行 dns 验证),不然下面申请证书就不能成功</p>
</blockquote>
<h2 id="3️⃣网站申请证书">3️⃣网站申请证书</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh --issue  -d alist.zorange.online    --nginx /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p><code>--nginx /usr/local/nginx/conf/nginx.conf</code>是你的 nginx.conf 路径<br>
<code>alist.zorange.online</code> 是要申请的网站的域名</p>
<p><img src="http://oss.zorange.online/blog/a6fe12cbcb6949a99ac3c47eca410e36.png" alt="image.png"></p>
<h2 id="4️⃣拷贝证书">4️⃣拷贝证书</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  acme.sh --install-cert -d alist.zorange.online \</span><br><span class="line">--key-file       /usr/local/nginx/conf/ssl/alist.zorange.online/alist.zorange.online.key  \</span><br><span class="line">--fullchain-file /usr/local/nginx/conf/ssl/alist.zorange.online/fullchain.cer \</span><br><span class="line">--reloadcmd     <span class="string">&quot;service nginx force-reload&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://oss.zorange.online/blog/eae53845b18e4be38e2abbc73f2624fc.png" alt="Description"></p>
<h2 id="更新证书">更新证书</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acme.sh --renew -d docker.zorange.online --force</span><br></pre></td></tr></table></figure>
<h2 id="5️⃣nginx-设置">5️⃣nginx 设置</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssl_certificate &quot;/etc/nginx/ssl/hk.v2fy.com/fullchain.cer&quot;;</span><br><span class="line"> ssl_certificate_key &quot;/etc/nginx/ssl/hk.v2fy.com/hk.v2fy.com.key&quot;;</span><br><span class="line"> ssl_session_cache shared:SSL:1m;</span><br><span class="line"> ssl_session_timeout  10m;</span><br><span class="line"> ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line"> ssl_prefer_server_ciphers on;</span><br><span class="line">#强制将http的URL重写成https</span><br><span class="line"> rewrite ^(.*) https://$server_name$1 permanent;</span><br></pre></td></tr></table></figure>
<h2 id="自动更新脚本">自动更新脚本</h2>
<p>如果你有多个证书要更新，可以将所有更新证书的命令放入一个脚本中，并使用<code>acme.sh</code>来自动更新所有这些证书。你只需确保<code>acme.sh</code>已经正确配置，并且你的脚本包含所有需要更新的证书。</p>
<ol>
<li><strong>创建一个脚本来安装多个证书</strong>：</li>
</ol>
<p>首先，创建一个脚本文件，例如<code>/usr/local/bin/install_all_certs.sh</code>，并将所有<code>acme.sh --install-cert</code>命令放入该文件中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新并安装 alist.zorange.online 的证书</span></span><br><span class="line">/root/.acme.sh/acme.sh --install-cert -d alist.zorange.online \</span><br><span class="line">--key-file /usr/local/nginx/conf/ssl/alist.zorange.online/alist.zorange.online.key \</span><br><span class="line">--fullchain-file /usr/local/nginx/conf/ssl/alist.zorange.online/fullchain.cer \</span><br><span class="line">--reloadcmd <span class="string">&quot;service nginx force-reload&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新并安装 docker.blog.zorange.online 的证书</span></span><br><span class="line">/root/.acme.sh/acme.sh --install-cert -d docker.blog.zorange.online \</span><br><span class="line">--key-file /usr/local/nginx/conf/ssl/docker.blog.zorange.online/docker.blog.zorange.online.key \</span><br><span class="line">--fullchain-file /usr/local/nginx/conf/ssl/docker.blog.zorange.online/fullchain.cer \</span><br><span class="line">--reloadcmd <span class="string">&quot;service nginx force-reload&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以继续添加更多的证书更新命令...</span></span><br></pre></td></tr></table></figure>
<p>确保脚本是可执行的：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/install_all_certs.sh</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>设置一个 cron 任务来自动运行脚本</strong>：</li>
</ol>
<p>编辑 cron 任务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo crontab -e</span><br></pre></td></tr></table></figure>
<p>然后添加以下行，这将每天午夜运行你的脚本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">0 0 * * * /usr/local/bin/install_all_certs.sh</span><br></pre></td></tr></table></figure>
<p>这样，每天午夜<code>acme.sh</code>将检查并更新所有列出的证书，然后使用<code>service nginx force-reload</code>命令重新加载 Nginx，以应用新的证书。</p>
<ol start="3">
<li><strong>确保 <a href="http://acme.sh">acme.sh</a> 自动更新证书</strong>：</li>
</ol>
<p>确保你的<code>acme.sh</code>配置正确，以便它能在证书快到期时自动更新。你可以通过运行以下命令来检查<code>acme.sh</code>的更新任务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">acme.sh --cron --home /path/to/.acme.sh</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Python3初始化工作空间</title>
    <url>/2025/09/23/document/</url>
    <content><![CDATA[<h1>Python3初始化工作空间</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建虚拟环境</span><br><span class="line">python3 -m venv venv</span><br><span class="line"></span><br><span class="line"># 激活虚拟环境</span><br><span class="line"># Linux/Mac:</span><br><span class="line">source venv/bin/activate</span><br><span class="line"># Windows:</span><br><span class="line">venv\Scripts\activate</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">pip install requests pandas numpy  # 示例包</span><br><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>canal的使用</title>
    <url>/2025/09/15/canal%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1>canal的使用</h1>
<blockquote>
<p>由于canal的starter只支持spring 2.x<br>
建议重新建个模块</p>
</blockquote>
<h3 id="1-依赖">1.依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.javatool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.persistence<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>persistence-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-配置文件">2.配置文件</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7080</span></span><br><span class="line"><span class="comment">#canal配置</span></span><br><span class="line"><span class="attr">canal:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">tingshuTopic</span>   <span class="comment"># 部署canal时指定的话题</span></span><br><span class="line">  <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.129</span><span class="string">:11111</span></span><br></pre></td></tr></table></figure>
<h3 id="3-监听的实体类">3.监听的实体类</h3>
<blockquote>
<p>指定监听的列</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.tingshu.cdc.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/11/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlbumInfoCDC</span> &#123;</span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-监听处理器">3.监听处理器</h3>
<blockquote>
<p>@CanalTable(“album_info”) 指定监听 的表</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.tingshu.cdc.Handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.tingshu.cdc.constants.RedisConstant;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.tingshu.cdc.entity.AlbumInfoCDC;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> online.zorange.cache.constants.CacheConstants;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> top.javatool.canal.client.annotation.CanalTable;</span><br><span class="line"><span class="keyword">import</span> top.javatool.canal.client.handler.EntryHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/11/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@CanalTable(&quot;album_info&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlbumInfoHandler</span> <span class="keyword">implements</span> <span class="title class_">EntryHandler</span>&lt;AlbumInfoCDC&gt; &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(AlbumInfoCDC albumInfoCDC)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;监听到表albumInfo新增数据:&#123;&#125;&quot;</span>, albumInfoCDC.getId());</span><br><span class="line">        <span class="comment">//1. 直接操作redis</span></span><br><span class="line">        redisTemplate.delete(CacheConstants.REDIS_CACHE + <span class="string">&quot;:&quot;</span> + RedisConstant.ALBUM_INFO_PREFIX + albumInfoCDC.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.1 延迟删除...</span></span><br><span class="line">        <span class="comment">//2. 发生消息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(AlbumInfoCDC before, AlbumInfoCDC after)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">delete</span> <span class="operator">=</span> redisTemplate.delete(CacheConstants.REDIS_CACHE + <span class="string">&quot;:&quot;</span> + RedisConstant.ALBUM_INFO_PREFIX + after.getId());</span><br><span class="line">        log.info(<span class="string">&quot;监听到表albumInfo更新数据:&#123;&#125;--&gt;&#123;&#125;&quot;</span>, before.getId(), after.getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;CacheConstants.REDIS_CACHE + \&quot;:\&quot; + RedisConstant.ALBUM_INFO_PREFIX + after.getId() = &quot;</span> + CacheConstants.REDIS_CACHE + <span class="string">&quot;:&quot;</span> + RedisConstant.ALBUM_INFO_PREFIX + after.getId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(AlbumInfoCDC albumInfoCDC)</span> &#123;</span><br><span class="line">        redisTemplate.delete(CacheConstants.REDIS_CACHE + <span class="string">&quot;:&quot;</span> + RedisConstant.ALBUM_INFO_PREFIX + albumInfoCDC.getId());</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;监听到表albumInfo删除数据:&#123;&#125;&quot;</span>, albumInfoCDC.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>find_in_set</title>
    <url>/2025/09/15/find_in_set/</url>
    <content><![CDATA[<ul>
<li>find_in_set可以查询以逗号分隔中是否存在某一个数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line">       <span class="keyword">from</span> sys_template</span><br><span class="line">       <span class="keyword">where</span> read_user_id <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> <span class="keyword">not</span> find_in_set(#&#123;id&#125;,read_user_id)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>github pages自定义域名&amp;CDN配置</title>
    <url>/2023/10/11/github%20pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D-CDN%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="github-自定义域名">github 自定义域名</h2>
<h3 id="DNS-配置">DNS 配置</h3>
<p><img src="http://oss.zorange.online/blog/image-20231011110553135.png" alt=""></p>
<p>Github 的自定义域名：<a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages">官方文档</a></p>
<p>如果想自定义自己的根域名，那么就要添加 A 记录，记录为@</p>
<p>如果只是子域名，那就只需要 CNAME 记录就行了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure>
<p>A 记录的 IP 地址可以通过 Ping <a href="http://YOUNAME.github.io">YOUNAME.github.io</a> 得到</p>
<h3 id="CNAME">CNAME</h3>
<p>在 github 项目的根目录下新建文件 CNAME，里面填写自己的域名就行了</p>
<p><img src="http://oss.zorange.online/blog/image-20231011111121147.png" alt=""></p>
<p>在 github 的项目 setting-&gt;Pages 下面，在里面填入自己的域名，然后 Save 就行了。</p>
<p>下面有个 Enforce HTTPS，自动申请，可以打开也可以不打开（如果要配置 CDN 好像不能打开，但是我打开了也配置了 CDN 没出现问题）</p>
<p><img src="http://oss.zorange.online/blog/image-20231011111313458.png" alt=""></p>
<h2 id="CDN-配置">CDN 配置</h2>
<h3 id="注意">注意</h3>
<p>因为配置 cdn 需要一条 CNAME，且记录为@。当你设置自定义的域名为根域名时，那么你的 dns 解析里面肯定有一条 A 记录，记录为@（详情看上面自定义域名配置）</p>
<p>此时就会冲突，因此如果想加速根域名，不会。</p>
<p>不过有一种平替的方法，加速子域名 www.根域名，当你访问根域名时，github 会重定向到 www.根域名。这样根域名也可以访问。</p>
<p><a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages">官方文档</a></p>
<p><img src="http://oss.zorange.online/blog/image-20231012194245918.png" alt=""></p>
<h3 id="dns-解析">dns 解析</h3>
<p><img src="http://oss.zorange.online/blog/image-20231013105843644.png" alt=""></p>
<h3 id="cdn-的配置">cdn 的配置</h3>
<h5 id="源站-ip：">源站 ip：</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">185.199.108.153</span><br><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure>
<p>端口：</p>
<p>自定义域名时勾选了 HTTPS 就选 443，没有勾就填 80</p>
<p><img src="http://oss.zorange.online/blog/image-20231012195018683.png" alt=""></p>
<p>回源 HOST：</p>
<p>填自己的加速域名就行了</p>
<p><img src="http://oss.zorange.online/blog/image-20231012195228129.png" alt=""></p>
]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令</title>
    <url>/2025/09/15/git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1>git命令</h1>
<h2 id="撤销已提交的更改">撤销已提交的更改</h2>
<p>在 Git 中，还原提交（撤销已提交的更改）有几种不同的方法，具体取决于你想达到的效果：</p>
<hr>
<h3 id="1-撤销提交但保留更改（回到工作区）">1. <strong>撤销提交但保留更改（回到工作区）</strong></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>效果</strong>：撤销最后一次提交，但保留所有更改在 <strong>暂存区</strong>（<code>git add</code> 状态）</li>
<li><strong>适用场景</strong>：想重新修改提交信息或拆分提交</li>
</ul>
<hr>
<h3 id="2-撤销提交并取消暂存（更改保留在工作目录）">2. <strong>撤销提交并取消暂存（更改保留在工作目录）</strong></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD~1</span><br><span class="line"><span class="comment"># 或等价于</span></span><br><span class="line">git reset --mixed HEAD~1  <span class="comment"># --mixed 是默认选项</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>效果</strong>：撤销提交，并将更改移出暂存区（需重新 <code>git add</code>）</li>
<li><strong>适用场景</strong>：想重新选择部分文件提交</li>
</ul>
<hr>
<h3 id="3-彻底丢弃提交和所有更改（慎用！）">3. <strong>彻底丢弃提交和所有更改（慎用！）</strong></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>效果</strong>：彻底丢弃最后一次提交 <strong>和所有工作目录的更改</strong>（不可逆！）</li>
<li><strong>适用场景</strong>：完全放弃最近的提交</li>
</ul>
<hr>
<h3 id="4-撤销特定提交（生成反向提交）">4. <strong>撤销特定提交（生成反向提交）</strong></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit-hash&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>效果</strong>：生成一个新的提交来抵消指定提交的更改（保留提交历史）</li>
<li><strong>适用场景</strong>：需要撤销公共仓库的提交（不重写历史）</li>
</ul>
<hr>
<h3 id="5-回退到某个旧提交（强制覆盖远程）">5. <strong>回退到某个旧提交（强制覆盖远程）</strong></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;commit-hash&gt;</span><br><span class="line">git push --force  <span class="comment"># 强制覆盖远程（仅限个人分支使用！）</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>危险操作</strong>：会重写历史，仅限未共享的提交使用</li>
</ul>
<hr>
<h3 id="关键区别总结：">关键区别总结：</h3>
<table>
<thead>
<tr>
<th>操作</th>
<th>修改历史？</th>
<th>保留更改？</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>git reset --soft</code></td>
<td>是</td>
<td>是（暂存）</td>
<td>重新提交</td>
</tr>
<tr>
<td><code>git reset --mixed</code></td>
<td>是</td>
<td>是（工作区）</td>
<td>重新选择文件提交</td>
</tr>
<tr>
<td><code>git reset --hard</code></td>
<td>是</td>
<td>否</td>
<td>彻底放弃提交</td>
</tr>
<tr>
<td><code>git revert</code></td>
<td>否</td>
<td>-</td>
<td>安全撤销公共提交</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="操作后恢复方法：">操作后恢复方法：</h3>
<p>如果误操作 <code>--hard</code> 重置，可通过以下命令尝试恢复：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog                  <span class="comment"># 查看所有操作记录</span></span><br><span class="line">git checkout &lt;丢失的提交ID&gt;  <span class="comment"># 找回数据</span></span><br></pre></td></tr></table></figure>
<p>根据你的需求选择合适的方法，对公共分支尽量使用 <code>git revert</code> 避免历史冲突。</p>
<h2 id="git大文件解决办法">git大文件解决办法</h2>
<h3 id="1-使用-Git-LFS（Git-大文件存储）"><strong>1. 使用 Git LFS（Git 大文件存储）</strong></h3>
<p>GitHub 推荐使用 <strong>Git LFS (Large File Storage)</strong> 来管理大文件。</p>
<h4 id="步骤："><strong>步骤：</strong></h4>
<ol>
<li>
<p><strong>安装 Git LFS</strong></p>
<ul>
<li>下载并安装 Git LFS：<a href="https://git-lfs.github.com/">https://git-lfs.github.com/</a></li>
<li>安装后运行：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git lfs install</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><strong>跟踪大文件</strong><br>
在项目根目录运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git lfs track <span class="string">&quot;mysql/binlog.000066&quot;</span></span><br></pre></td></tr></table></figure>
<p>这会生成/修改 <code>.gitattributes</code> 文件。</p>
</li>
<li>
<p><strong>重新提交并推送</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .gitattributes</span><br><span class="line">git add mysql/binlog.000066</span><br><span class="line">git commit -m <span class="string">&quot;使用 Git LFS 跟踪大文件&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h3 id="2-从-Git-历史中删除大文件"><strong>2. 从 Git 历史中删除大文件</strong></h3>
<p>如果不需要 <code>binlog.000066</code> 文件，可以从 Git 历史中彻底删除它：</p>
<h4 id="步骤：-v2"><strong>步骤：</strong></h4>
<ol>
<li>
<p><strong>使用 <code>git filter-branch</code> 或 <code>BFG Repo-Cleaner</code> 删除大文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git filter-branch --force --index-filter \</span><br><span class="line">  <span class="string">&quot;git rm --cached --ignore-unmatch mysql/binlog.000066&quot;</span> \</span><br><span class="line">  --prune-empty --tag-name-filter <span class="built_in">cat</span> -- --all</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>强制推送（会覆盖远程历史）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master --force</span><br></pre></td></tr></table></figure>
<p>⚠️ <strong>注意</strong>：这会修改提交历史，如果其他人也在协作，可能会影响他们的仓库。</p>
</li>
</ol>
<hr>
<h3 id="3-使用-gitignore-忽略大文件"><strong>3. 使用 <code>.gitignore</code> 忽略大文件</strong></h3>
<p>如果 <code>binlog.000066</code> 是临时文件（如日志文件），可以：</p>
<ol>
<li>在 <code>.gitignore</code> 中添加：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql/binlog.*</span><br></pre></td></tr></table></figure>
</li>
<li>删除已提交的文件：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached mysql/binlog.000066</span><br><span class="line">git commit -m <span class="string">&quot;移除大文件&quot;</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="如何避免类似问题？"><strong>如何避免类似问题？</strong></h2>
<ul>
<li><strong>不要提交日志、二进制文件、数据库备份等大文件</strong>，使用 <code>.gitignore</code> 过滤它们。</li>
<li>如果必须管理大文件，使用 <strong>Git LFS</strong>。</li>
<li>检查现有仓库是否有大文件：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rev-list --objects --all | grep <span class="string">&quot;<span class="subst">$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -5 | awk &#x27;&#123;print$1&#125;&#x27;)</span>&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="总结"><strong>总结</strong></h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>适用场景</th>
<th>命令示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Git LFS</strong></td>
<td>需要保留大文件</td>
<td><code>git lfs track &quot;大文件&quot;</code></td>
</tr>
<tr>
<td><strong><code>filter-branch</code></strong></td>
<td>从历史中彻底删除</td>
<td><code>git filter-branch --force ...</code></td>
</tr>
<tr>
<td><strong><code>.gitignore</code></strong></td>
<td>忽略临时大文件</td>
<td><code>git rm --cached 大文件</code></td>
</tr>
</tbody>
</table>
<p>选择合适的方法后，重新推送即可解决 <code>GH001: Large files detected</code> 错误。🚀</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/09/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>java-mysql JDBC 连接数据库</title>
    <url>/2022/09/29/java-mysql%20JDBC%20%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1>java-mysql JDBC 连接数据库</h1>
<p>前言:</p>
<p>因为数据库课程设计需要连接数据库，我唯一接触过的就是 jdbc, 也不知道还有没有其他方法，再加上我们实验课接触过 jdbc, 最后课程设计做完了，就想着把方法记下来.</p>
<h1>连接前准备:</h1>
<ol>
<li>
<p>安装 <a href="https://www.mysql.com/downloads/">mysql</a>,mysql 安装教程网上有很多，对着教程一步步就能安装下来，记住自己设置的密码，不然连不上数据库.</p>
</li>
<li>
<p>下载 java 连接 mysql 的数据包 <a href="https://dev.mysql.com/downloads/connector/j/">jar</a></p>
</li>
</ol>
<p><img src="http://oss.zorange.online/blog/1664538641591.png" alt=""></p>
<h2 id="导入-jar-数据包">导入 jar 数据包</h2>
<p>注意！jar 包不能随便移动，我是直接把 jar 包放在了 IDEA 的根目录下面的 lib 里面.</p>
<ol>
<li>这里以 IDEA 为例，打开 IDEA. 打开项目结构 (theProjectStructure 使用的插件翻译，不知道准不准，下面一样)</li>
</ol>
<p><img src="http://oss.zorange.online/blog/1664539063792.png" alt=""></p>
<ol start="2">
<li>找到模块 (theModule), 选择想要连接数据库的项目，然后点击依赖 (relyOn), 最后点击加号.</li>
</ol>
<p><img src="http://oss.zorange.online/blog/1664539710423.png" alt=""></p>
<ol start="3">
<li>选择第一个 JAR 或目录</li>
</ol>
<p><img src="http://oss.zorange.online/blog/1664539813085.png" alt=""></p>
<ol start="4">
<li>最后找到你放 jar 的位置，导入就行了。到此为止 jar 包就导入成功了.</li>
</ol>
<p><img src="http://oss.zorange.online/blog/1664539925809-17210486389646.png" alt=""></p>
<h2 id="连接数据库">连接数据库</h2>
<p>注意，这一步我也是跟着菜鸟教程做的。理解不深，可能说不清楚.</p>
<ol>
<li>首先，实例化这三个对象。根据我的理解，第一个 (Connection) 就是用来连接数据库的，第二个 (Statement) 是连接数据库之后，想要运行 mysql 语句用的，最后一个 (Resultset) 就是用来得到或更新你的 mysql 语句的结果.(可以先不用写这一步，你用到再写应该也行)</li>
</ol>
<p><img src="http://oss.zorange.online/blog/1664540196391.png" alt=""></p>
<p>user 就是你数据库的用户名，默认的就是 root.</p>
<p>password 是你数据的密码，前面安装 mysql 的时候设置的.</p>
<p>driver 就是驱动的名字，这个是固定的.</p>
<p>url 是你想要连接的数据库，就是那个框里面的。填你的数据库名字，其他的都是一些属性什么的，非必要应该不用改.</p>
<p>Calss.forNmae 是注册驱动，就是上面的 driver.</p>
<p>最后一步就是连接数据库，conn 是第一步实例化的 (Connetion) 对象.</p>
<p>很好，这样就成功连接了数据库.</p>
<p><img src="http://oss.zorange.online/blog/1664540663146.png" alt=""></p>
<p>注意：数据库的语句操作都必须放在 try {catch (){}} 中，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">    <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        System.out.print(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="基本的数据库操作">基本的数据库操作</h2>
<p>1.select</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stmt = conn.createStatement();</span><br><span class="line">String sql=<span class="string">&quot;select * from tablename;&quot;</span>;</span><br><span class="line">rs= stmt.executeQuery(sql);</span><br><span class="line"><span class="comment">// 这样rs就得到了数据</span></span><br><span class="line"><span class="comment">// 根据表中得字段名来输出数据（还可以得到这个语句返回得结果个数来输出，因为我不会，所以就不写了）</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot; 姓名：&quot;</span>+name+<span class="string">&quot; 性别：&quot;</span>+gender);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>具体实现:</p>
<p><img src="http://oss.zorange.online/blog/1664541517504.png" alt=""></p>
<ol start="2">
<li>insert:</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前两步与select相同</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    stmt = conn.createStatement();</span><br><span class="line">    String sql=<span class="string">&quot;insert into tablename (字段名1,字段名2,...) values (&quot;</span>张三<span class="string">&quot;,&quot;</span>男<span class="string">&quot;,...&quot;</span><span class="string">&quot;);&quot;</span>;</span><br><span class="line">    stmt.executeUpdate(sql); <span class="comment">//就这一步变了</span></span><br><span class="line">    <span class="keyword">catch</span>()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//记住一定要在try&#123;catch()&#123;&#125;&#125;里面写mysql代码，不然会报错。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>js定时任务</title>
    <url>/2025/09/15/js%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1>js定时任务</h1>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tasks = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">scheduledTasks</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">task, time</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 使用任务的字符串表示（或者任务的唯一标识符）来判断任务是否已存在</span></span><br><span class="line">        <span class="keyword">if</span> (tasks.<span class="title function_">some</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> t.<span class="property">task</span>.<span class="property">name</span> === task.<span class="property">name</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Task already added.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> intervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">task</span>();</span><br><span class="line">        &#125;, time);</span><br><span class="line">        tasks.<span class="title function_">push</span>(&#123;task, intervalId&#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Tasks &#123;&#125;.&quot;</span>, tasks)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clear</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        tasks.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123;intervalId&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">        &#125;);</span><br><span class="line">        tasks.<span class="property">length</span> = <span class="number">0</span>; <span class="comment">// 清空任务队列</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;add, clear, tasks&#125;;  <span class="comment">// 返回 tasks，方便外部访问</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> scheduledTasks;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>linux脚本</title>
    <url>/2025/09/15/linux%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1>Linux 脚本（Bash）基础教程</h1>
<hr>
<h2 id="1-什么是-Linux-脚本？">1. 什么是 Linux 脚本？</h2>
<ul>
<li>Linux 脚本是用来自动化执行一系列命令的文本文件。</li>
<li>常用的脚本语言是 Bash（Bourne Again SHell）。</li>
<li>脚本通常以 <code>.sh</code> 结尾，但不强制。</li>
</ul>
<hr>
<h2 id="2-第一个脚本：Hello-World">2. 第一个脚本：Hello World</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello, Linux scripting!&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>#!/bin/bash</code> ：告诉系统用 bash 来执行脚本</li>
<li><code>echo</code> ：打印输出</li>
</ul>
<p>保存为 <code>hello.sh</code>，然后运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x hello.sh   <span class="comment"># 给执行权限</span></span><br><span class="line">./hello.sh          <span class="comment"># 执行脚本</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="3-变量和基本运算">3. 变量和基本运算</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">name=<span class="string">&quot;orange&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello, <span class="variable">$name</span>&quot;</span></span><br><span class="line"></span><br><span class="line">num1=10</span><br><span class="line">num2=5</span><br><span class="line"><span class="built_in">sum</span>=$((num1 + num2))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Sum: <span class="variable">$sum</span>&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>变量赋值不能有空格。</li>
<li>使用 <code>$(( ))</code> 进行算术运算。</li>
<li>变量引用时前面加 <code>$</code>。</li>
</ul>
<hr>
<h2 id="4-条件判断">4. 条件判断</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">num=5</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$num</span> -gt 3 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$num</span> is greater than 3&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$num</span> is not greater than 3&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>常用条件：</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-eq</code></td>
<td>等于</td>
</tr>
<tr>
<td><code>-ne</code></td>
<td>不等于</td>
</tr>
<tr>
<td><code>-gt</code></td>
<td>大于</td>
</tr>
<tr>
<td><code>-lt</code></td>
<td>小于</td>
</tr>
<tr>
<td><code>-ge</code></td>
<td>大于等于</td>
</tr>
<tr>
<td><code>-le</code></td>
<td>小于等于</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="5-循环语句">5. 循环语句</h2>
<h3 id="for-循环">for 循环</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Loop <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="while-循环">while 循环</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">count=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$count</span> -le 5 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Count <span class="variable">$count</span>&quot;</span></span><br><span class="line">    ((count++))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="6-函数">6. 函数</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">greet</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello, <span class="variable">$1</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet <span class="string">&quot;orange&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>函数定义用 <code>function</code> 或直接 <code>greet()</code></li>
<li>通过 <code>$1</code>, <code>$2</code>…获取参数</li>
</ul>
<hr>
<h2 id="7-读取用户输入">7. 读取用户输入</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;Enter your name: &quot;</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello, <span class="variable">$name</span>&quot;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="8-脚本参数">8. 脚本参数</h2>
<p>脚本执行时可以带参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./script.sh arg1 arg2</span><br></pre></td></tr></table></figure>
<p>在脚本里：</p>
<ul>
<li><code>$0</code> 脚本名</li>
<li><code>$1</code> 第一个参数</li>
<li><code>$2</code> 第二个参数</li>
<li><code>$#</code> 参数个数</li>
<li><code>$@</code> 所有参数</li>
</ul>
<hr>
<h2 id="9-常用命令示例">9. 常用命令示例</h2>
<ul>
<li><code>ls</code> 列目录</li>
<li><code>cd</code> 切目录</li>
<li><code>cat</code> 显示文件内容</li>
<li><code>grep</code> 查找内容</li>
<li><code>awk</code> 处理文本</li>
<li><code>sed</code> 文本替换</li>
</ul>
<hr>
<h2 id="10-错误处理和调试">10. 错误处理和调试</h2>
<ul>
<li>
<p>脚本开始加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -euo pipefail</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-e</code> 遇错退出</li>
<li><code>-u</code> 未定义变量报错</li>
<li><code>-o pipefail</code> 管道错误检测</li>
</ul>
</li>
<li>
<p>调试运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -x script.sh</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h1>额外推荐学习资源</h1>
<ul>
<li>《The Linux Command Line》 — 免费电子书</li>
<li>Bash 官方手册：<a href="https://www.gnu.org/software/bash/manual/">https://www.gnu.org/software/bash/manual/</a></li>
<li>在线教程：<a href="https://ryanstutorials.net/bash-scripting-tutorial/">https://ryanstutorials.net/bash-scripting-tutorial/</a></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>logback配置文件</title>
    <url>/2025/09/15/logback%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">
<pre><code>&lt;logger name=&quot;org.springframework.boot.autoconfigure&quot; level=&quot;INFO&quot;/&gt;


&lt;!-- 指定日志输出的位置，ConsoleAppender表示输出到控制台 --&gt;
&lt;appender name=&quot;STDOUT&quot;
          class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;
    &lt;encoder&gt;
        &lt;!-- 日志输出的格式 --&gt;
        &lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;
        &lt;pattern&gt;[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n&lt;/pattern&gt;
        &lt;charset&gt;UTF-8&lt;/charset&gt;
    &lt;/encoder&gt;
&lt;/appender&gt;

&lt;!-- 设置全局日志级别。日志级别按顺序分别是：TRACE、DEBUG、INFO、WARN、ERROR --&gt;
&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;
&lt;root level=&quot;INFO&quot;&gt;
    &lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;
    &lt;appender-ref ref=&quot;STDOUT&quot;/&gt;
&lt;/root&gt;

&lt;!-- 根据特殊需求指定局部日志级别，可也是包名或全类名。 --&gt;
&lt;logger name=&quot;online.orange.img&quot; level=&quot;DEBUG&quot;/&gt;

&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
    &lt;file&gt;logs/application.log&lt;/file&gt;
    &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
        &lt;!-- 日志文件路径和命名规则 --&gt;
        &lt;fileNamePattern&gt;logs/application.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt;
        &lt;!-- 最大保留日志文件的时间 --&gt;
        &lt;maxHistory&gt;30&lt;/maxHistory&gt;
    &lt;/rollingPolicy&gt;
    &lt;encoder&gt;
        &lt;pattern&gt;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n&lt;/pattern&gt;
        &lt;charset&gt;UTF-8&lt;/charset&gt;
    &lt;/encoder&gt;
&lt;/appender&gt;
</code></pre>
</configuration>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2025/09/15/redis/</url>
    <content><![CDATA[<h1>redis</h1>
<p>常见5种数据类型：string（字符串），list（列表），hash（哈希），set（集合），zset(有序集合)</p>
<h2 id="第一节-key操作的相关命令">第一节 key操作的相关命令</h2>
<table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>keys *</td>
<td>查看当前库所有key (匹配：keys *1)</td>
</tr>
<tr>
<td>exists key</td>
<td>判断某个key是否存在</td>
</tr>
<tr>
<td>type key</td>
<td>查看你的key是什么类型</td>
</tr>
<tr>
<td>del key</td>
<td>删除指定的key数据</td>
</tr>
<tr>
<td>unlink key</td>
<td>非阻塞删除,仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作</td>
</tr>
<tr>
<td>expire key 10</td>
<td>10秒钟：为给定的key设置过期时间</td>
</tr>
<tr>
<td>ttl key</td>
<td>查看还有多少秒过期，-1表示永不过期，-2表示已过期</td>
</tr>
<tr>
<td>select</td>
<td>命令切换数据库</td>
</tr>
<tr>
<td>dbsize</td>
<td>查看当前数据库的key的数量</td>
</tr>
<tr>
<td>flushdb</td>
<td>清空当前库</td>
</tr>
<tr>
<td>flushall</td>
<td>清空全部库</td>
</tr>
</tbody>
</table>
<h2 id="第二节-字符串类型-String">第二节 字符串类型(String)</h2>
<h3 id="2-1-简介">2.1 简介</h3>
<p>1 String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p>
<p>2 String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p>
<p>3 String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p>
<h3 id="2-2-常用命令">2.2 常用命令</h3>
<table>
<thead>
<tr>
<th>语法</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>set &lt;key&gt;&lt;value&gt;</td>
<td>添加键值对</td>
</tr>
<tr>
<td></td>
<td>NX：当数据库中key不存在时，可以将key-value添加数据库</td>
</tr>
<tr>
<td></td>
<td>XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥</td>
</tr>
<tr>
<td></td>
<td>EX：key的超时秒数</td>
</tr>
<tr>
<td></td>
<td>PX：key的超时毫秒数，与EX互斥</td>
</tr>
<tr>
<td>get &lt;key&gt;</td>
<td>查询对应键值</td>
</tr>
<tr>
<td>append &lt;key&gt;&lt;value&gt;</td>
<td>将给定的&lt;value&gt; 追加到原值的末尾</td>
</tr>
<tr>
<td>strlen &lt;key&gt;</td>
<td>获得值的长度</td>
</tr>
<tr>
<td>setnx &lt;key&gt;&lt;value&gt;</td>
<td>只有在 key 不存在时 设置 key 的值</td>
</tr>
<tr>
<td>incr &lt;key&gt;</td>
<td>将 key 中储存的数字值增1,只能对数字值操作，如果为空，新增值为1</td>
</tr>
<tr>
<td>decr &lt;key&gt;</td>
<td>将 key 中储存的数字值减1,只能对数字值操作，如果为空，新增值为-1</td>
</tr>
<tr>
<td>incrby / decrby &lt;key&gt;&lt;步长&gt;</td>
<td>将 key 中储存的数字值增减。自定义步长</td>
</tr>
<tr>
<td>mset &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; …</td>
<td>同时设置一个或多个 key-value对</td>
</tr>
<tr>
<td>mget &lt;key1&gt;&lt;key2&gt;&lt;key3&gt; …</td>
<td>同时获取一个或多个 value</td>
</tr>
<tr>
<td>msetnx &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt; …</td>
<td>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。有一个失败则都失败(原子性)</td>
</tr>
<tr>
<td>getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;</td>
<td>获得值的范围，类似java中的substring，<strong>前包，后包</strong></td>
</tr>
<tr>
<td>setrange &lt;key&gt;&lt;起始位置&gt;&lt;value&gt;</td>
<td>用 &lt;value&gt; 覆写&lt;key&gt;所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0</strong>开始)。</td>
</tr>
<tr>
<td>setex &lt;key&gt; &lt;过期时间&gt; &lt;value&gt;</td>
<td>设置键值的同时，设置过期时间，单位秒。</td>
</tr>
<tr>
<td>getset &lt;key&gt;&lt;value&gt;</td>
<td>以新换旧，设置了新值同时获得旧值。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>redis指令运行的原子性</p>
</blockquote>
<ul>
<li>所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。
<ul>
<li>（1）在单线程中， 能够在单条指令中完成的操作都可以认为是&quot;原子操作&quot;，因为中断只能发生于指令之间。</li>
<li>（2）在多线程中，不能被其它进程（线程）打断的操作就叫原子操作。</li>
<li>（3）Redis单命令的原子性主要得益于的单线程。</li>
</ul>
</li>
</ul>
<blockquote>
<p>问题 JAVA中的 a++ 是否具有原子性</p>
</blockquote>
<p><strong>原子性：<strong>即不可分割性。比如 a=0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作是原子操作。再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要</strong>使用同步技术（sychronized）或者锁（Lock）来让它变成一个原子操作</strong>。一个操作是原子操作，那么我们称它具有原子性。</p>
<h3 id="2-3-数据结构">2.3 数据结构</h3>
<p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/58b2bd2f781e5df2d1a4ebcd523c07c0.png" alt=""></p>
<p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p>
<h2 id="第三节-Redis-列表-List">第三节 Redis 列表(List)</h2>
<h3 id="3-1-简介">3.1 简介</h3>
<p>单键多值, 一个键下的value是一个List.Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/012ad0bda3eaf308eb159c0558155651.png" alt=""></p>
<h3 id="3-2-常用命令">3.2 常用命令</h3>
<table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>lpush/rpush &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt; …</td>
<td>从左边/右边插入一个或多个值。</td>
</tr>
<tr>
<td>lpop/rpop &lt;key&gt;</td>
<td>从左边/右边吐出一个值。值在键在，值光键亡。</td>
</tr>
<tr>
<td>rpoplpush &lt;key1&gt;&lt;key2&gt;</td>
<td>从&lt;key1&gt;列表右边吐出一个值，插到&lt;key2&gt;列表左边</td>
</tr>
<tr>
<td>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;</td>
<td>按照索引下标获得元素(从左到右)</td>
</tr>
<tr>
<td></td>
<td>0左边第一个，-1右边第一个，（0-1表示获取所有）</td>
</tr>
<tr>
<td>lindex &lt;key&gt;&lt;index&gt;</td>
<td>按照索引下标获得元素(从左到右)</td>
</tr>
<tr>
<td>llen &lt;key&gt;</td>
<td>获得列表长度</td>
</tr>
<tr>
<td>linsert &lt;key&gt; before &lt;value&gt;&lt;newvalue&gt;</td>
<td>在&lt;value&gt;的前面插入&lt;newvalue&gt;插入值</td>
</tr>
<tr>
<td>linsert &lt;key&gt; after &lt;value&gt;&lt;newvalue&gt;</td>
<td>在&lt;value&gt;的后面插入&lt;newvalue&gt;插入值</td>
</tr>
<tr>
<td>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;</td>
<td>从左边删除n个value(从左到右)</td>
</tr>
<tr>
<td>lset&lt;key&gt;&lt;index&gt;&lt;value&gt;</td>
<td>将列表key下标为index的值替换成value</td>
</tr>
</tbody>
</table>
<h3 id="3-3-数据结构">3.3 数据结构</h3>
<p>List的数据结构为快速链表quickList。首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。它将所有的元素紧挨着一起存储，分配的是一块连续的内存。当数据量比较多的时候才会改成quicklist。因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/ecae126ab4f2ea87b36f29d897d3eafe.png" alt=""></p>
<p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p>
<h2 id="第四节Redis-集合-Set">第四节Redis 集合(Set)</h2>
<h3 id="4-1-简介">4.1 简介</h3>
<p>    Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p>
<p>    Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的<strong>复杂度都是O(1)</strong>。一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变   </p>
<h3 id="4-2-常用命令">4.2 常用命令</h3>
<table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>sadd &lt;key&gt;&lt;value1&gt;&lt;value2&gt; …</td>
<td>将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</td>
</tr>
<tr>
<td>smembers &lt;key&gt;</td>
<td>取出该集合的所有值。</td>
</tr>
<tr>
<td>sismember &lt;key&gt;&lt;value&gt;</td>
<td>判断集合&lt;key&gt;是否为含有该&lt;value&gt;值，有1，没有0</td>
</tr>
<tr>
<td>scard&lt;key&gt;</td>
<td>返回该集合的元素个数。</td>
</tr>
<tr>
<td>srem &lt;key&gt;&lt;value1&gt;&lt;value2&gt; …</td>
<td>删除集合中的某个元素。</td>
</tr>
<tr>
<td>spop &lt;key&gt;</td>
<td>随机从该集合中吐出一个值</td>
</tr>
<tr>
<td>spop &lt;key&gt;&lt;N&gt;</td>
<td>随机从该集合中吐出N个值。</td>
</tr>
<tr>
<td>srandmember &lt;key&gt;&lt;n&gt;</td>
<td>随机从该集合中取出n个值。不会从集合中删除 。</td>
</tr>
<tr>
<td>smove &lt;source&gt;&lt;destination&gt;&lt;value&gt;</td>
<td>把集合中一个值从一个集合移动到另一个集合</td>
</tr>
<tr>
<td>sinter &lt;key1&gt;&lt;key2&gt;</td>
<td>返回两个集合的交集元素。</td>
</tr>
<tr>
<td>sunion &lt;key1&gt;&lt;key2&gt;</td>
<td>返回两个集合的并集元素。</td>
</tr>
<tr>
<td>sdiff &lt;key1&gt;&lt;key2&gt;</td>
<td>返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</td>
</tr>
</tbody>
</table>
<h3 id="4-2-数据结构">4.2 数据结构</h3>
<p>Set数据结构是dict字典，字典是用哈希表实现的。Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它内部也使用hash结构，所有value都指向同一个内部值。</p>
<h2 id="第五节-Redis-哈希-Hash">第五节 Redis 哈希(Hash)</h2>
<h3 id="5-1-简介">5.1 简介</h3>
<p>Redis hash 是一个键值对集合。Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。类似Java里面的Map&lt;String,Object&gt;用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息</p>
<ul>
<li>方式1  单key+序列化 .问题:每次修改用户的某个属性需要，先反序列化改好后再序列化回去。开销较大。</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/05649361cc760c58cd08be72043e2edf.png" alt=""></p>
<ul>
<li>方式2 多key-value .问题:用户ID数据冗余  </li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/b98a8372e6efaa97a316b2b6bd8c3533.png" alt=""></p>
<ul>
<li>方式3 单key + 多(field+value)</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/82564120c9e0fbd3d0f82d24b55477d7.png" alt=""></p>
<ul>
<li><strong>通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题</strong> </li>
</ul>
<h3 id="5-2-常用命令">5.2 常用命令</h3>
<table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>hset &lt;key&gt;&lt;field&gt;&lt;value&gt;</td>
<td>给&lt;key&gt;集合中的 &lt;field&gt;键赋值&lt;value&gt;</td>
</tr>
<tr>
<td>hget &lt;key1&gt;&lt;field&gt;</td>
<td>从&lt;key1&gt;集合&lt;field&gt;取出 value</td>
</tr>
<tr>
<td>hmset &lt;key1&gt;&lt;field1&gt;&lt;value1&gt;&lt;field2&gt;&lt;value2&gt;…</td>
<td>批量设置hash的值</td>
</tr>
<tr>
<td>hexists&lt;key1&gt;&lt;field&gt;</td>
<td>查看哈希表 key 中，给定域 field 是否存在。</td>
</tr>
<tr>
<td>hkeys &lt;key&gt;</td>
<td>列出该hash集合的所有field</td>
</tr>
<tr>
<td>hvals &lt;key&gt;</td>
<td>列出该hash集合的所有value</td>
</tr>
<tr>
<td>hincrby &lt;key&gt;&lt;field&gt;&lt;increment&gt;</td>
<td>为哈希表 key 中的域 field 的值加上增量 1 -1</td>
</tr>
<tr>
<td>hsetnx &lt;key&gt;&lt;field&gt;&lt;value&gt;</td>
<td>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</td>
</tr>
</tbody>
</table>
<h3 id="5-3-数据结构">5.3 数据结构</h3>
<p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p>
<h2 id="第六节-Redis-有序集合Zset">第六节 Redis 有序集合Zset</h2>
<h3 id="6-1-简介">6.1 简介</h3>
<p>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。不同之处是有序集合的每个成员都关联了一个评分（score）,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p>
<h3 id="6-2-常用命令">6.2 常用命令</h3>
<table>
<thead>
<tr>
<th>语法</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>zadd &lt;key&gt;&lt;score1&gt;&lt;value1&gt;&lt;score2&gt;&lt;value2&gt;…</td>
<td>将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</td>
</tr>
<tr>
<td>zrange&lt;key&gt;&lt;start&gt;&lt;stop&gt;  [WITHSCORES]</td>
<td>升序返回有序集 key 中，下标在&lt;start&gt;&lt;stop&gt;之间的元素,0代表第一个元素索引,-1代表最后一个元素索引.带WITHSCORES，可以让分数一起和值返回到结果集。</td>
</tr>
<tr>
<td>zrevrange &lt;key&gt;&lt;start&gt;&lt;stop&gt; [WITHSCORES]</td>
<td>降序返回有序集 key 中，下标在&lt;start&gt;&lt;stop&gt;之间的元素,0代表第一个元素索引,-1代表最后一个元素索引.带WITHSCORES，可以让分数一起和值返回到结果集</td>
</tr>
<tr>
<td>zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; [withscores] [limit offset count]</td>
<td>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</td>
</tr>
<tr>
<td>zrevrangebyscore &lt;key&gt; &lt;max&gt; &lt;min&gt; [withscores] [limit offset count]</td>
<td>同上，改为从大到小排列。</td>
</tr>
<tr>
<td>zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt;</td>
<td>为元素的score加上增量</td>
</tr>
<tr>
<td>zrem &lt;key&gt;&lt;value&gt;</td>
<td>删除该集合下，指定值的元素</td>
</tr>
<tr>
<td>zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;</td>
<td>统计该集合，分数区间内的元素个数</td>
</tr>
<tr>
<td>zrank &lt;key&gt;&lt;value&gt;</td>
<td>返回该值在集合中的排名，从0开始。</td>
</tr>
</tbody>
</table>
<p>案例：如何利用zset实现一个文章访问量的排行榜？</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/20b976b3b5e3a46b83aa5e498f25a15a.png" alt=""></p>
<h3 id="6-3-数据结构">6.3 数据结构</h3>
<p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p>
<h2 id="面试题：">面试题：</h2>
<ol>
<li>
<p>redis对客户端发起的命令是单线程</p>
<ol>
<li>内部有两大体现：
<ol>
<li>网络传输</li>
<li>执行到命令</li>
</ol>
</li>
</ol>
</li>
<li>
<p>redis多线程的体现：异步删除、集群的数据同步、AOF和RDB持久化方式</p>
</li>
<li>
<p>redis的底层数据结构：</p>
<p>sds数据结构:{</p>
<p>len，</p>
<p>alloc</p>
<p>flag</p>
<p>char</p>
<p>}</p>
<ol>
<li>为什么不用c语言自己的chra数组
<ol>
<li>因为c语言的char数组以/0来判断是否结束，会导致不能存储任意的字符串。</li>
<li>在追加和计算长度时，c语言底层是变量目标char数组来实现的，效率低</li>
</ol>
</li>
<li>sds数据结构的优势
<ol>
<li>可变的大小，sds可以根据存储数据的大小，给数据结构分配合适的大小，以节省空间</li>
<li>采用紧密存储结构，c语言在数据不足8字节时，会直接分配8字节空间，导致空间浪费，而sds采用编译优化，占多少空间就分配多少，节省空间</li>
<li>sds数据结构在计算长度和追加字符串时，不用遍历目标char数组，而是直接根据目标数组的长度直接在后面追加，效率高</li>
</ol>
</li>
</ol>
</li>
<li>
<p>redis五种数据结构的使用场景</p>
<ol>
<li><strong>字符串 (Strings)</strong>
<ul>
<li><strong>定义</strong>：字符串是 Redis 最基本的数据类型，它可以存储二进制安全的字符串，最大长度为 512MB。</li>
<li>使用场景：
<ul>
<li>存储简单的键值对数据，例如用户的登录状态、网站计数器等。</li>
<li>作为缓存，存储经常查询但不经常变化的数据，如商品详情页的缓存。</li>
<li>存储消息队列中的消息，配合 Redis 的发布/订阅功能。</li>
</ul>
</li>
</ul>
</li>
<li><strong>列表 (Lists)</strong>
<ul>
<li><strong>定义</strong>：列表是按照插入顺序排列的字符串集合，可以看作是一个双向链表。</li>
<li>使用场景：
<ul>
<li>实现消息队列，如任务队列、异步消息队列等。</li>
<li>存储历史记录，如用户的浏览历史、聊天记录等。</li>
<li>分布式锁实现，利用列表的原子操作来实现锁的获取和释放。</li>
</ul>
</li>
</ul>
</li>
<li><strong>集合 (Sets)</strong>
<ul>
<li><strong>定义</strong>：集合是存储唯一字符串元素的无序集合。</li>
<li>使用场景：
<ul>
<li>存储不重复的元素集合，如用户好友列表、黑名单等。</li>
<li>进行交集、并集和差集运算，比如统计共同兴趣的用户、不同广告渠道的用户重叠情况等。</li>
</ul>
</li>
</ul>
</li>
<li><strong>有序集合 (Sorted Sets)</strong>
<ul>
<li><strong>定义</strong>：有序集合与集合类似，但每个元素都有一个分数，用于排序。</li>
<li>使用场景：
<ul>
<li>排行榜，如游戏排行榜、热门新闻排行等。</li>
<li>时间线，按发布时间排序的消息流。</li>
<li>优先级队列，如任务调度系统中的任务优先级。</li>
</ul>
</li>
</ul>
</li>
<li><strong>哈希 (Hashes)</strong>
<ul>
<li><strong>定义</strong>：哈希是一个字符串字段和字符串值的映射表，类似于一个字典。</li>
<li>使用场景：
<ul>
<li>存储复杂对象，如用户资料、商品详情等，将对象的不同属性作为字段存储。</li>
<li>统计指标，比如记录网站各个页面的访问次数。</li>
<li>多个字段的批量读写操作，如购物车商品列表。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="内存淘汰机制">内存淘汰机制</h2>
<p><strong>说明</strong>：redis的淘汰机制主要分为三大类</p>
<ol>
<li>
<p>针对设置ttk（过期时间）</p>
<ul>
<li>volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）</li>
<li>volatile-lfu：对设置了TTL的key基于LFU算法进行淘汰。(最不经常使用)</li>
<li>volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</li>
<li>volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key</li>
</ul>
</li>
<li>
<p>没有设置ttk</p>
<ul>
<li>allkeys-random：在所有集合key中，移除随机的key</li>
<li>allkeys-lru：在所有集合key中，使用LRU算法移除key</li>
<li>allkeys-lfu:对全体key给予LFRU算法进行淘汰</li>
</ul>
</li>
<li>
<p>不淘汰</p>
<ul>
<li>noeviction：不进行移除。针对写操作，只是返回错误信息(默认使用不淘汰)</li>
</ul>
</li>
</ol>
<h2 id="redis事务">redis事务</h2>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>multi</td>
<td>开始组队</td>
</tr>
<tr>
<td>exec</td>
<td>执行队列中的命令</td>
</tr>
<tr>
<td>discard</td>
<td>取消组队</td>
</tr>
</tbody>
</table>
<h3 id="三种情况">三种情况</h3>
<ol>
<li>组队成功，提交成功</li>
<li>情况2,组队报错,提交失败：提交失败组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消</li>
<li>情况3, 组队成功,提交时有成功有失败。如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，其他的命令都会执行，不会回滚。</li>
</ol>
<h3 id="锁机制">锁机制</h3>
<ol>
<li>
<p>悲观锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>乐观锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis就是利用这种check-and-set机制实现事务的。</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>监视和取消监视key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在执行multi之前，先执行watch key1 [key2],可以监视一个(或多个) key ，如果在事务**执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。**</span><br></pre></td></tr></table></figure>
<p>取消 WATCH 命令对所有 key 的监视。如果在执行 WATCH 命令之后，EXEC 命令或DISCARD 命令先被执行了的话，那么就不需要再执行UNWATCH 了。</p>
<p>warch 监听key，</p>
</li>
</ol>
<h4 id="三个特性">三个特性</h4>
<ul>
<li>单独的隔离操作<br>
事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>
<li>没有隔离级别的概念<br>
队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li>
<li>不保证原子性<br>
事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li>
</ul>
<h3 id="Lua脚本">Lua脚本</h3>
<h3 id="redis的持久化">redis的持久化</h3>
<ol>
<li>
<p>持久化机制：</p>
<p>RDB、AOF</p>
<blockquote>
<p>DB（RedisDataBase）定时数据快照默认方式</p>
<p>AOF（AppendOnly File）指令日志文件手动开启</p>
<p>RDB文件未来存放是内存中某一时刻的所以数据，压缩存储二进制（看不懂）。“-省空间</p>
<p>AOF文件未来存放的是所有客户端执行的写命令，AOF。RESP格式存储（可读）</p>
</blockquote>
</li>
</ol>
<h4 id="RDB持久化">RDB持久化</h4>
<ol>
<li>在指定的时间间隔内将内存中的数据集快照写入磁盘,也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里.</li>
<li>持久化流程：
<ol>
<li>
<p>—&gt;RDB文件什么时候生成的。<br>
1.自动生成<br>
2.手动生成。<br>
手动执行save命令-Redis会给我们生成一个RDB文件<br>
手动执行bgsave命令，Redis也会给我们生成一个RDB文件。<br>
save or bgsave区别<br>
共同点：生成二进制压缩的文件，且未来可恢复数据<br>
不同点：性能：如果用save命令，将内存中的数据持久化到RDB文件使用的是Redis的（和执行客户端命令）相同的线程。（公用一个线程)<br>
性能：如果用rgsaVe命令，将内存中的数据持久化到RDB文件使用的是和执行客户端命的线程不是同一个。(另外启动一个新线程执行)</p>
</li>
<li>
<p>优势</p>
<ul>
<li>适合大规模的数据恢复</li>
<li>对数据完整性和一致性要求不高更适合使用</li>
<li><strong>节省磁盘空间</strong></li>
<li><strong>恢复速度快</strong></li>
</ul>
</li>
<li>
<p>劣势</p>
<ul>
<li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li>
<li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</li>
<li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li>
</ul>
</li>
</ol>
</li>
</ol>
<h4 id="AOF持久化">AOF持久化</h4>
<p>Append Only File 以日志的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(读操作不记录)， 只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>
<blockquote>
<p>在重写时，使用的是子进程，没重写时，源aof文件是主进程修改的</p>
</blockquote>
<h5 id="持久化流程">持久化流程</h5>
<p>（1）客户端的请求写命令会被append追加到AOF缓冲区内；</p>
<p>（2）AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</p>
<p>（3）AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</p>
<p>（4）Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</p>
<h5 id="AOF同步策略">AOF同步策略</h5>
<ul>
<li>appendfsync always
<ul>
<li>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</li>
</ul>
</li>
<li>appendfsync everysec
<ul>
<li>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</li>
</ul>
</li>
<li>appendfsync no
<ul>
<li>redis不主动进行同步，把同步时机交给操作系统。</li>
</ul>
</li>
</ul>
<h3 id="主从复制">主从复制</h3>
<ol>
<li>读写分离</li>
<li>容灾</li>
</ol>
<h4 id="实现思路">实现思路</h4>
<ol>
<li>一个redis服务作为主机,主要负责写操作</li>
<li>两个redis服务作为从机,主要负责读操作</li>
<li>从机自动从主机同步数据下来</li>
<li>从机主动找主机,而主机不会找从机</li>
</ol>
<h4 id="主从复制的三种模式">主从复制的三种模式</h4>
<ol>
<li>一主二仆</li>
<li>星火相传</li>
<li>反客为主 ： master掉了之后，仆人通过slaveof no one 变成master</li>
</ol>
<h3 id="哨兵模式">哨兵模式</h3>
<p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p>
<ol>
<li>
<p>设置一主多仆</p>
<p>设置优先级：replica-priority 100</p>
</li>
<li>
<p>编辑哨兵配置 :配置master的   1 代表哨兵的数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动哨兵</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-sentinel /root/myredis/sentinel.conf</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="redis集群">redis集群</h3>
<ol>
<li>
<p>什么是集群</p>
<blockquote>
<p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。</p>
</blockquote>
<blockquote>
<p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability ）：即使集群中有一部分节点失效或者无法进行通讯，集群也可以继续处理命令请求。</p>
</blockquote>
</li>
<li>
<p>搭建集群</p>
<ol>
<li>
<p>编写配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line">cluster-enabled yes  // 开启集群</span><br><span class="line">cluster-config-file nodes-6379.conf</span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动集群</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create --cluster-replicas 1 192.168.1.128:6379 192.168.1.128:6380 192.168.1.128:6381 192.168.1.128:6389 192.168.1.128:6390 192.168.1.128:6391</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>集群的登录</p>
<p><code>redis-cli -c -p 6379</code></p>
</li>
</ol>
</li>
</ol>
<h4 id="集群提供的好处">集群提供的好处</h4>
<ul>
<li>实现扩容</li>
<li>分摊压力</li>
<li>无中心配置相对简单</li>
</ul>
<h4 id="集群的不足">集群的不足</h4>
<ul>
<li>多键操作是不被支持的</li>
<li>多键的Redis事务是不被支持的。lua脚本不被支持</li>
<li>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</li>
</ul>
<h2 id="1-2、缓存常见问题">1.2、缓存常见问题</h2>
<p>缓存最常见的3个问题： 面试</p>
<ol>
<li>缓存穿透</li>
<li>缓存雪崩</li>
<li>缓存击穿</li>
</ol>
<p><strong>缓存穿透</strong>: 是指查询一个不存在的数据，由于缓存无法命中，将去查询数据库，但是数据库也无此记录，并且出于容错考虑，我们没有将这次查询的null写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p>
<ul>
<li>
<p>解决1 ：空结果也进行缓存，但它的过期时间会很短，最长不超过五分钟，但是不能防止随机穿透。</p>
</li>
<li>
<p>解决2 ：使用布隆过滤器来解决随机穿透问题。</p>
</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/f832ce6671b14aa9a1ba6df3b7e9a403.png" alt=""></p>
<p><strong>缓存雪崩</strong>:是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时压力过重雪崩。</p>
<ul>
<li>
<p>解决1：原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>
</li>
<li>
<p>解决2：如果单节点宕机，可以采用集群部署方式防止雪崩</p>
</li>
</ul>
<p><strong>缓存击穿</strong>: 是指对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：如果这个key在大量请求同时进来之前正好失效，那么所有对这个key的数据查询都落到db，我们称为缓存击穿。</p>
<p>与缓存雪崩的区别：</p>
<ol>
<li>击穿是一个热点key失效</li>
<li>雪崩是很多key集体失效</li>
</ol>
<ul>
<li>解决：锁</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/6b3f9ab61263a1d00ce92554ae76955e.png" alt=""></p>
<p>缓存穿透：查询根本不存在的数据</p>
<p>​     1.解决方案1：缓存null</p>
<p>​     2…解决方案2：布隆过滤器</p>
<p>缓存雪崩: 同一时刻大量的key同时失效|缓存单节点故障问题造成的</p>
<p>解决方案1：设置随机的过期时间,</p>
<p>解决方案2：加redis集群</p>
<p>缓存击穿： 某个热点key过期,比如秒杀</p>
<p>解决方案：使用分布式锁</p>
<p>缓存一致性：canal解决</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>seata 分布式事务</title>
    <url>/2025/09/15/seata%20%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1>事务回顾</h1>
<ul>
<li>概述: 就是由多个操作组成的一个逻辑单元，组成这个逻辑单元的多个操作要么都成功要么都失败。</li>
</ul>
<h2 id="ACID四大特性">ACID四大特性</h2>
<p><strong>A：原子性(Atomicity)</strong></p>
<p>一个事务(transaction)中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前</p>
<p>的状态，就像这个事务从来没有执行过一样。</p>
<p><strong>C：一致性(Consistency)</strong></p>
<p>事务的一致性指的是在一个事务执行之前和执行之后数据库都必须处于一致性状态。</p>
<p>如果事务成功地完成，那么系统中所有变化将正确地应用，系统处于有效状态。</p>
<p>如果在事务中出现错误，那么系统中的所有变化将自动地回滚，系统返回到原始状态。</p>
<p><strong>I：隔离性(Isolation)</strong></p>
<p>指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看</p>
<p>数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。</p>
<p><strong>D：持久性(Durability)</strong></p>
<p>指的是只要事务成功结束，它对数据库所做的更新就必须保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</p>
<h2 id="事务的并发问题">事务的并发问题</h2>
<p><strong>脏读</strong>：事务A读取了事务B更新的数据，事务B未提交并回滚数据，那么A读取到的数据是脏数据</p>
<p><strong>不可重复读</strong>：事务A多次读取同一数据，事务B在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果不一致。</p>
<p><strong>幻读</strong>：一个事务读取到了另外一个事务插入的数据，就好像发生了幻觉一样，这就叫幻读。</p>
<p><strong>小结</strong>：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。</p>
<h2 id="事务隔离级别">事务隔离级别</h2>
<p>针对并发事务所带来的问题，要想解决就需要使用到事务的隔离级别。</p>
<p>常见的事务隔离级别和解决的问题的对应关系表如下所示：<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/70e8222c4c5185cf2cae6a9436219e32.png" alt=""></p>
<h2 id="事务传播行为">事务传播行为</h2>
<ul>
<li><strong>概述</strong>：指的就是当一个方法被另一个方法调用时，这个方法对事务的态度。</li>
</ul>
<p>Spring定义了七种传播行为：<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/b8355de5ce618d4071211f66780424ab.png" alt=""></p>
<h1>分布式事务概述</h1>
<h2 id="本地事务">本地事务</h2>
<ul>
<li>称为数据库事务或传统事务（相对于分布式事务而言）。这一类事务是基于单个服务单一数据库访问的事务。</li>
</ul>
<h2 id="分布式事务简介">分布式事务简介</h2>
<ul>
<li>概述：分布式事务指的是组成业务逻辑单元的多个操作位于不同的服务上或者访问不同的数据库节点，分布式事务需要保证这些操作要么全部成功，要么全部失败。</li>
</ul>
<h1>理论基础</h1>
<h2 id="CAP定理">CAP定理</h2>
<p>1998年，加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标。</p>
<p>1、Consistency（一致性）</p>
<p>2、Availability（可用性）</p>
<p>3、Partition tolerance （分区容错性）</p>
<p>它们的第一个字母分别是 C、A、P。</p>
<p>Eric Brewer 说，这三个指标不可能同时做到。这个结论就叫做 CAP 定理。</p>
<h3 id="一致性">一致性</h3>
<p>Consistency（一致性）：用户访问分布式系统中的任意节点，得到的数据必须一致。</p>
<h3 id="可用性">可用性</h3>
<p>Availability （可用性）：用户访问集群中的任意健康节点，必须能得到响应，而不是超时或拒绝。</p>
<h3 id="分区容错">分区容错</h3>
<p>因为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/6eee135715558706fc80fe9a8f2765db.png" alt=""></p>
<ul>
<li>Tolerance（容错）：在集群出现分区时，整个系统也要持续对外提供服务</li>
</ul>
<p>在分布式系统中，系统间的网络不能100%保证健康，一定会有故障的时候，而服务有必须对外保证服务。因此Partition Tolerance不可避免。当节点接收到新的数据变更时，就会出现问题了：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/b3fef90f191b4db5800b1c0b026de78d.png" alt=""></p>
<ul>
<li>
<p>如果此时要保证一致性，就必须等待网络恢复，完成数据同步后，整个集群才对外提供服务，服务处于阻塞状态，不可用。</p>
</li>
<li>
<p>如果此时要保证可用性，就不能等待网络恢复，那node01、node02与node03之间就会出现数据不一致。</p>
</li>
</ul>
<p>也就是说，在P一定会出现的情况下，A和C之间只能实现一个。</p>
<p>注意：在CAP定理中一致性强调的是强一致性</p>
<h2 id="BASE理论">BASE理论</h2>
<p>BASE理论是对CAP的一种解决思路，包含三个思想：</p>
<p>1、Basically Available （基本可用）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</p>
<p>2、Soft State（软状态）：在一定时间内，允许出现中间状态，比如临时的不一致状态。</p>
<p>3、Eventually Consistent（最终一致性）：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</p>
<h1>Seata</h1>
<h2 id="Seata简介">Seata简介</h2>
<p>Seata是 2019 年 1 月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。致力于提供高性能和简单易用的分布式事务服务，为用户打造一站式的分布式解决方案。</p>
<p>官网地址：<a href="https://seata.io/zh-cn/%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84%E6%96%87%E6%A1%A3%E3%80%81%E6%92%AD%E5%AE%A2%E4%B8%AD%E6%8F%90%E4%BE%9B%E4%BA%86%E5%A4%A7%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E3%80%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%82">https://seata.io/zh-cn/，其中的文档、播客中提供了大量的使用说明、源码分析。</a></p>
<h2 id="Seata架构">Seata架构</h2>
<ul>
<li>
<p>基础概念：</p>
<ul>
<li>
<p>分支事务：每一个业务系统的事务</p>
</li>
<li>
<p>全局事务：多个有关联的各个分支事务组成在一起</p>
</li>
</ul>
</li>
</ul>
<p><strong>Seata事务管理中有三个重要的角色：</strong></p>
<ul>
<li>
<p>1、TC (Transaction Coordinator) - 事务协调者：维护全局和分支事务的状态，驱动全局事务提交或回滚。</p>
</li>
<li>
<p>2、TM (Transaction Manager) - 事务管理器：定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p>
</li>
<li>
<p>3、RM (Resource Manager) - 资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p>
</li>
</ul>
<p>工作流程如下图所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/68e4364165e0e1e70eb84c2cc5b2dac2.png" alt=""></p>
<p>基本流程介绍：</p>
<p>1、由TM注册全局事务到TC服务器</p>
<p>2、TC服务器会返回xid(本次全局事务的id)，这个xid会随着微服务的调用一并传递下去</p>
<p>3、执行分支事务，此时就需要通过RM服务器注册分支事务到TC服务器</p>
<p>4、执行业务SQL，并有RM服务器报告每一个分支事务的执行状态到TC服务器</p>
<p>5、当全局事务结束以后，TC会进行分支事务状态的统计，然后在通过RM服务器进行分支事务的回滚或者提交</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/d8cb491b07849f9c074b9297a20d511e.png" alt=""></p>
<h3 id="四种不同的分布式事务解决方案：">四种不同的分布式事务解决方案：</h3>
<p>1、XA模式：强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</p>
<p>2、AT模式：最终一致的分阶段事务模式，无业务侵入，也是Seata的默认模式</p>
<p>3、TCC模式：最终一致的分阶段事务模式，有业务侵入</p>
<p>4、SAGA模式：长事务模式，有业务侵入</p>
<p>无论哪种方案，都离不开TC，也就是事务的协调者。</p>
<h3 id="解决分布式事务的思想和模型：">解决分布式事务的思想和模型：</h3>
<ul>
<li>
<p>全局事务：整个分布式事务</p>
</li>
<li>
<p>分支事务：分布式事务中包含的每个子系统的事务</p>
</li>
<li>
<p>最终一致思想：各分支事务分别执行并提交，如果有不一致的情况，再想办法恢复数据</p>
</li>
<li>
<p>强一致思想：各分支事务执行完业务不要提交，等待彼此结果。而启统一提交或回滚</p>
</li>
</ul>
<h2 id="Seata-配置">Seata 配置</h2>
<h3 id="1-修改seata-的配置文件">1. 修改seata 的配置文件</h3>
<p>这个TC服务在运行的时候需要一些配置信息，我们可以将这些配置信息交由Nacos进行统一管理。并且需要将TC服务注册到Nacos，后期微服务就可以从Nacos中获取TC服务器的地址信息完成事务的控制。</p>
<ul>
<li>config/application.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置seata后台管理系统的访问用户名和密码</span></span><br><span class="line">  <span class="attr">console:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">seata</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">seata</span></span><br><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="comment"># support: nacos, consul, apollo, zk, etcd3</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.136</span><span class="number">.145</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">namespace:</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span></span><br><span class="line">      <span class="attr">username:</span></span><br><span class="line">      <span class="attr">password:</span></span><br><span class="line">      <span class="attr">context-path:</span></span><br><span class="line">      <span class="attr">data-id:</span> <span class="string">seataServer.properties</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="comment"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.136</span><span class="number">.145</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span></span><br><span class="line">      <span class="attr">namespace:</span></span><br><span class="line">      <span class="attr">cluster:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">username:</span></span><br><span class="line">      <span class="attr">password:</span></span><br><span class="line">      <span class="attr">context-path:</span></span><br><span class="line">  <span class="comment">#store:</span></span><br><span class="line">    <span class="comment"># support: file 、 db 、 redis 、 raft</span></span><br><span class="line">    <span class="comment"># mode: file</span></span><br><span class="line">  <span class="comment">#  server:</span></span><br><span class="line">  <span class="comment">#    service-port: 8091 #If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-为seata配置-nacos配置中心">2.  为seata配置,(nacos配置中心)</h3>
<p>在Nacos中添加TC服务所需要的配置文件seataServer.properties。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#For details about configuration items, see https://seata.io/zh-cn/docs/user/configurations.html</span><br><span class="line">#Transport configuration, for client and server</span><br><span class="line">transport.type=TCP</span><br><span class="line">transport.server=NIO</span><br><span class="line">transport.heartbeat=true</span><br><span class="line">transport.enableTmClientBatchSendRequest=false</span><br><span class="line">transport.enableRmClientBatchSendRequest=true</span><br><span class="line">transport.enableTcServerBatchSendResponse=false</span><br><span class="line">transport.rpcRmRequestTimeout=30000</span><br><span class="line">transport.rpcTmRequestTimeout=30000</span><br><span class="line">transport.rpcTcRequestTimeout=30000</span><br><span class="line">transport.threadFactory.bossThreadPrefix=NettyBoss</span><br><span class="line">transport.threadFactory.workerThreadPrefix=NettyServerNIOWorker</span><br><span class="line">transport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler</span><br><span class="line">transport.threadFactory.shareBossWorker=false</span><br><span class="line">transport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector</span><br><span class="line">transport.threadFactory.clientSelectorThreadSize=1</span><br><span class="line">transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread</span><br><span class="line">transport.threadFactory.bossThreadSize=1</span><br><span class="line">transport.threadFactory.workerThreadSize=default</span><br><span class="line">transport.shutdown.wait=3</span><br><span class="line">transport.serialization=seata</span><br><span class="line">transport.compressor=none</span><br><span class="line"></span><br><span class="line"># 首先应用程序（客户端）中配置了事务分组，若应用程序是SpringBoot则通过配置seata.tx-service-group=[事务分组配置项]</span><br><span class="line"># 事务群组，service.vgroupMapping.[事务分组配置项]=TC集群的名称</span><br><span class="line">service.vgroupMapping.default_tx_group=default</span><br><span class="line">#If you use a registry, you can ignore it</span><br><span class="line">service.default.grouplist=127.0.0.1:8091</span><br><span class="line">service.enableDegrade=false</span><br><span class="line">service.disableGlobalTransaction=false</span><br><span class="line"></span><br><span class="line">client.metadataMaxAgeMs=30000</span><br><span class="line">#Transaction rule configuration, only for the client</span><br><span class="line">client.rm.asyncCommitBufferLimit=10000</span><br><span class="line">client.rm.lock.retryInterval=10</span><br><span class="line">client.rm.lock.retryTimes=30</span><br><span class="line">client.rm.lock.retryPolicyBranchRollbackOnConflict=true</span><br><span class="line">client.rm.reportRetryCount=5</span><br><span class="line">client.rm.tableMetaCheckEnable=true</span><br><span class="line">client.rm.tableMetaCheckerInterval=60000</span><br><span class="line">client.rm.sqlParserType=druid</span><br><span class="line">client.rm.reportSuccessEnable=false</span><br><span class="line">client.rm.sagaBranchRegisterEnable=false</span><br><span class="line">client.rm.sagaJsonParser=fastjson</span><br><span class="line">client.rm.tccActionInterceptorOrder=-2147482648</span><br><span class="line">client.rm.sqlParserType=druid</span><br><span class="line">client.tm.commitRetryCount=5</span><br><span class="line">client.tm.rollbackRetryCount=5</span><br><span class="line">client.tm.defaultGlobalTransactionTimeout=60000</span><br><span class="line">client.tm.degradeCheck=false</span><br><span class="line">client.tm.degradeCheckAllowTimes=10</span><br><span class="line">client.tm.degradeCheckPeriod=2000</span><br><span class="line">client.tm.interceptorOrder=-2147482648</span><br><span class="line">client.undo.dataValidation=true</span><br><span class="line">client.undo.logSerialization=jackson</span><br><span class="line">client.undo.onlyCareUpdateColumns=true</span><br><span class="line">server.undo.logSaveDays=7</span><br><span class="line">server.undo.logDeletePeriod=86400000</span><br><span class="line">client.undo.logTable=undo_log</span><br><span class="line">client.undo.compress.enable=true</span><br><span class="line">client.undo.compress.type=zip</span><br><span class="line">client.undo.compress.threshold=64k</span><br><span class="line">#For TCC transaction mode</span><br><span class="line">tcc.fence.logTableName=tcc_fence_log</span><br><span class="line">tcc.fence.cleanPeriod=1h</span><br><span class="line"># You can choose from the following options: fastjson, jackson, gson</span><br><span class="line">tcc.contextJsonParserType=fastjson</span><br><span class="line"></span><br><span class="line">#Log rule configuration, for client and server</span><br><span class="line">log.exceptionRate=100</span><br><span class="line"></span><br><span class="line">#事务会话信息存储方式</span><br><span class="line">#Transaction storage configuration, only for the server. The file, db, and redis configuration values are optional.</span><br><span class="line">store.mode=db</span><br><span class="line">#事务锁信息存储方式</span><br><span class="line">store.lock.mode=db</span><br><span class="line">#事务回话信息存储方式</span><br><span class="line">store.session.mode=db</span><br><span class="line">#Used for password encryption</span><br><span class="line">store.publicKey=</span><br><span class="line"></span><br><span class="line">#If `store.mode,store.lock.mode,store.session.mode` are not equal to `file`, you can remove the configuration block.</span><br><span class="line">store.file.dir=file_store/data</span><br><span class="line">store.file.maxBranchSessionSize=16384</span><br><span class="line">store.file.maxGlobalSessionSize=512</span><br><span class="line">store.file.fileWriteBufferCacheSize=16384</span><br><span class="line">store.file.flushDiskMode=async</span><br><span class="line">store.file.sessionReloadReadSize=100</span><br><span class="line"></span><br><span class="line">#存储方式为db</span><br><span class="line">#These configurations are required if the `store mode` is `db`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `db`, you can remove the configuration block.</span><br><span class="line">store.db.datasource=druid</span><br><span class="line">store.db.dbType=mysql</span><br><span class="line">store.db.driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">store.db.url=jdbc:mysql://192.168.136.145:3308/seata?useUnicode=true&amp;rewriteBatchedStatements=true&amp;useSSL=false</span><br><span class="line">store.db.user=root</span><br><span class="line">store.db.password=1234</span><br><span class="line">store.db.minConn=5</span><br><span class="line">store.db.maxConn=30</span><br><span class="line">store.db.globalTable=global_table</span><br><span class="line">store.db.branchTable=branch_table</span><br><span class="line">store.db.distributedLockTable=distributed_lock</span><br><span class="line">store.db.queryLimit=100</span><br><span class="line">store.db.lockTable=lock_table</span><br><span class="line">store.db.maxWait=5000</span><br><span class="line"></span><br><span class="line">#These configurations are required if the `store mode` is `redis`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `redis`, you can remove the configuration block.</span><br><span class="line">store.redis.mode=single</span><br><span class="line">store.redis.type=pipeline</span><br><span class="line">store.redis.single.host=127.0.0.1</span><br><span class="line">store.redis.single.port=6379</span><br><span class="line">store.redis.sentinel.masterName=</span><br><span class="line">store.redis.sentinel.sentinelHosts=</span><br><span class="line">store.redis.sentinel.sentinelPassword=</span><br><span class="line">store.redis.maxConn=10</span><br><span class="line">store.redis.minConn=1</span><br><span class="line">store.redis.maxTotal=100</span><br><span class="line">store.redis.database=0</span><br><span class="line">store.redis.password=</span><br><span class="line">store.redis.queryLimit=100</span><br><span class="line"></span><br><span class="line">#Transaction rule configuration, only for the server</span><br><span class="line">server.recovery.committingRetryPeriod=1000</span><br><span class="line">server.recovery.asynCommittingRetryPeriod=1000</span><br><span class="line">server.recovery.rollbackingRetryPeriod=1000</span><br><span class="line">server.recovery.timeoutRetryPeriod=1000</span><br><span class="line">server.maxCommitRetryTimeout=-1</span><br><span class="line">server.maxRollbackRetryTimeout=-1</span><br><span class="line">server.rollbackRetryTimeoutUnlockEnable=false</span><br><span class="line">server.distributedLockExpireTime=10000</span><br><span class="line">server.session.branchAsyncQueueSize=5000</span><br><span class="line">server.session.enableBranchAsyncRemove=false</span><br><span class="line">server.enableParallelRequestHandle=true</span><br><span class="line">server.enableParallelHandleBranch=false</span><br><span class="line"></span><br><span class="line">server.raft.cluster=127.0.0.1:7091,127.0.0.1:7092,127.0.0.1:7093</span><br><span class="line">server.raft.snapshotInterval=600</span><br><span class="line">server.raft.applyBatch=32</span><br><span class="line">server.raft.maxAppendBufferSize=262144</span><br><span class="line">server.raft.maxReplicatorInflightMsgs=256</span><br><span class="line">server.raft.disruptorBufferSize=16384</span><br><span class="line">server.raft.electionTimeoutMs=2000</span><br><span class="line">server.raft.reporterEnabled=false</span><br><span class="line">server.raft.reporterInitialDelay=60</span><br><span class="line">server.raft.serialization=jackson</span><br><span class="line">server.raft.compressor=none</span><br><span class="line">server.raft.sync=true</span><br><span class="line"></span><br><span class="line">#Metrics configuration, only for the server</span><br><span class="line">metrics.enabled=false</span><br><span class="line">metrics.registryType=compact</span><br><span class="line">metrics.exporterList=prometheus</span><br><span class="line">metrics.exporterPrometheusPort=9898</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>1、其中的数据库地址、用户名、密码都需要修改成你自己的数据库信息</p>
<p>2、添加useSSL=false参数，关闭安全链接</p>
<p>3、如果使用的是mysql8，需要指定mysql8的驱动：com.mysql.cj.jdbc.Driver</p>
<p>4、注意jdk版本是8或者11，其他的jdk版本可能导致出现问题<br>
5、创建数据库表</p>
<blockquote>
<p>特别注意：tc服务在管理分布式事务时，需要记录事务相关数据到数据库中，你需要提前创建好这些表。<br>
新建一个名为seata的数据库，运行script\server\db\mysql.sql脚本文件。</p>
</blockquote>
<ul>
<li>启动seata:<br>
打开浏览器，访问seata后台管理系统。地址：<a href="http://localhost:7091">http://localhost:7091</a>，用户名/密码: seata/seata</li>
</ul>
<h3 id="3-引入依赖">3. 引入依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Seata依赖  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用2.0.0的seata的版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-添加公共配置">4. 添加公共配置</h3>
<ul>
<li>在nacos配置中心上添加seata的tc服务的公共配置：data-id=seata-common.yaml   group=SEATA_GROUP</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="comment"># 配置seata-server在nacos注册中心上的信息</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">namespace:</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.136</span><span class="number">.145</span><span class="string">:8848</span></span><br><span class="line">  <span class="comment"># 配置事务组的名称，需要和seata服务端的配置保持一致</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">default_tx_group</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span></span><br><span class="line">      <span class="attr">default_tx_group:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">data-source-proxy-mode:</span> <span class="string">XA</span>   <span class="comment"># 配置事务管理模式为xa模式</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.cloud.nacos.config.shared-configs[0].data-id=seata-common.yaml</span><br><span class="line">spring.cloud.nacos.config.shared-configs[0].group=SEATA_GROUP</span><br></pre></td></tr></table></figure>
<h3 id="5-使用">5. 使用</h3>
<p>@GlobalTransactional<br>
在BusinessServiceImpl的add方法上添加@GlobalTransactional注解，声明当前方法是一个全局事务方法。</p>
<h1>XA原理</h1>
<p>XA规范是X/Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准。</p>
<p>XA规范描述了全局的事务管理器与局部的资源管理器之间的接口。 XA规范的目的是允许的多个资源（如数据库，应用服务器，消息队列等）在同一事务中访问，这样可以使</p>
<p>ACID属性跨越应用程序而保持有效。</p>
<p>XA规范使用两阶段提交（2PC，Two-Phase Commit）来保证所有资源同时提交或回滚任何特定的事务。</p>
<p>XA规范在上世纪 90 年代初就被提出。目前，几乎所有主流的数据库(MySQL、Oracle)都对 XA 规范 提供了支持。</p>
<h2 id="工作原理">工作原理</h2>
<p>在 Seata 定义的分布式事务框架内，利用事务资源（数据库、消息服务等）对XA协议的支持，以XA协议的机制来管理分支事务的一种事务模式。<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/098e4a093965a9b27dbf05d93e38201e.png" alt=""></p>
<ul>
<li>工作流程如下所示：</li>
</ul>
<p><strong>RM一阶段的工作</strong>：</p>
<p>1、注册分支事务到TC</p>
<p>2、执行分支业务sql但不提交</p>
<p>3、报告执行状态到TC</p>
<p><strong>TC二阶段的工作</strong>：TC检测各分支事务执行状态</p>
<p>a.如果都成功，通知所有RM提交事务</p>
<p>b.如果有失败，通知所有RM回滚事务</p>
<p><strong>RM二阶段的工作</strong>：接收TC指令，提交或回滚事务</p>
<ul>
<li>
<p>正常情况：<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/4bd77fdbe3836562005674bbb6f94427.png" alt=""></p>
</li>
<li>
<p>异常情况：<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/9e20a6800eaf8f7b03337a042e66a3cc.png" alt=""></p>
</li>
</ul>
<h2 id="优缺点">优缺点</h2>
<ul>
<li>XA模式的优点是什么？</li>
</ul>
<p>1、业务无侵入：和 AT 一样，XA 模式将是业务无侵入的，不给应用设计和开发带来额外负担。</p>
<p>2、事务的强一致性，满足ACID原则。</p>
<p>3、数据库的支持广泛：XA 协议被主流关系型数据库广泛支持，不需要额外的适配即可使用。</p>
<ul>
<li>XA模式的缺点是什么？</li>
</ul>
<p>XA prepare后，分支事务进入阻塞阶段，收到XA commit 或 XA rollback 前必须阻塞等待。事务资源长时间得不到释放，锁定周期长，而且在应用层上面无法干预，性能差。</p>
<h1>AT模式</h1>
<p>更改nacos中seata-common.yaml的配置，如下所示：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line"><span class="attr">data-source-proxy-mode:</span> <span class="string">AT</span>          <span class="comment"># 使用Seata框架的AT模式，默认是AT模式</span></span><br></pre></td></tr></table></figure>
<p>重启服务进行测试。</p>
<h2 id="原理介绍">原理介绍</h2>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/883e33edda608618b89a9a8614d808fd.png" alt=""></p>
<ul>
<li>工作流程如下所示：</li>
</ul>
<p><strong>阶段一RM的工作：</strong></p>
<p>1、注册分支事务</p>
<p>2、记录undo-log（数据快照：记录某一时刻数据的状态）</p>
<p>3、执行业务sql并提交</p>
<p>4、报告事务状态</p>
<p><strong>阶段二提交时RM的工作</strong>：删除undo-log即可</p>
<p><strong>阶段二回滚时RM的工作</strong>：根据undo-log恢复数据到更新前</p>
<h2 id="流程梳理">流程梳理</h2>
<p>AT模式下，当前分支事务执行流程如下：</p>
<h3 id="一阶段：">一阶段：</h3>
<p>1）TM发起并注册全局事务到TC</p>
<p>2）TM调用分支事务</p>
<p>3）分支事务准备执行业务SQL</p>
<p>4）RM拦截业务SQL，根据where条件查询原始数据，形成快照。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;money&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>5）RM执行业务SQL，提交本地事务，释放数据库锁。此时 money = 90</p>
<p>6）RM报告本地事务状态给TC</p>
<h3 id="二阶段：">二阶段：</h3>
<p>1）TM通知TC事务结束</p>
<p>2）TC检查分支事务状态</p>
<p>2.1 如果都成功，则立即删除快照</p>
<p>2.2 如果有分支事务失败，需要回滚。读取快照数据（{“id”: 1, “money”: 100}），将快照恢复到数据库。此时数据库再次恢复为100</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/a434854772308504fab555287337eb29.png" alt=""></p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/d5ee70dc3dec24d1a2ffdaaa63ecb242.png" alt=""></p>
<h2 id="AT与XA的区别">AT与XA的区别</h2>
<p>简述AT模式与XA模式最大的区别是什么？</p>
<p>1、XA模式一阶段不提交事务，锁定资源；AT模式一阶段直接提交，不锁定资源。</p>
<p>2、XA模式依赖数据库机制实现回滚；AT模式利用数据快照实现数据回滚。(undo_log表(快照))</p>
<p>3、XA模式强一致；AT模式最终一致</p>
<h2 id="脏写问题">脏写问题</h2>
<h3 id="问题介绍">问题介绍</h3>
<p>在多线程并发访问AT模式的分布式事务时，有可能出现丢失更新问题，如图：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/1f43a45b40f83b2146fae8e97e9b4bc7.png" alt=""></p>
<h3 id="全局锁">全局锁</h3>
<p>解决思路就是引入了全局锁的概念。在释放DB锁之前，先拿到全局锁。避免同一时刻有另外一个事务来操作当前数据。</p>
<p>如下图所示：</p>
<p>tx1 先开始，开启本地事务，拿到本地锁，更新操作 m = 1000 - 100 = 900。本地事务提交前，先拿到该记录的 全局锁 ，本地提交释放本地锁。 tx2 后开始，开启本地事务，拿到本地锁，更新操作 m = 900 - 100 = 800。本地事务提交前，尝试拿该记录的 全局锁 ，tx1 全局提交前，该记录的全局锁被 tx1 持有，tx2 需要重试等待 全局锁 。</p>
<p>tx1 二阶段全局提交，释放 全局锁 。tx2 拿到 全局锁 提交本地事务。</p>
<p>如果 tx1 的二阶段全局回滚，则tx1需要重新获取该数据的本地锁，进行反向补偿的更新操作，实现分支的回滚。此时，如果tx2仍在等待该数据的 全局锁，同时持有本地锁，则tx1的分支回滚会失败。分支的回滚会一直重试，直到tx2的 全局锁 等锁超时，放弃 全局锁 并回滚本地事务释放本地锁，tx1 的分支回滚最终成功。</p>
<p>为整个过程 全局锁 在 tx1 结束前一直是被 tx1 持有的，所以不会发生 脏写 的问题。</p>
<p>思考问题：每一个微服务中所提供的undo_log表的作用、以及seata数据库中所对应的表的作用分表是什么?</p>
<h1>TCC模式</h1>
<h2 id="TCC模式概述">TCC模式概述</h2>
<p>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过<strong>人工编码</strong>来实现数据恢复。需要实现三个方法：</p>
<p>1、Try：资源的检测和预留；</p>
<p>2、Confirm：完成资源操作业务；要求 Try 成功 Confirm 一定要能成功。</p>
<p>3、Cancel：预留资源释放，可以理解为try的反向操作。</p>
<h2 id="流程分析">流程分析</h2>
<p>举例，一个扣减用户余额的业务。假设账户A原来余额是100，需要余额扣减30元。</p>
<p><strong>阶段一（ Try ）</strong>：检查余额是否充足，如果充足则冻结金额增加30元，可用余额扣除30</p>
<p>初识余额：<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/bfcf35531d2f9f6ccb02e133b7d776c1.png" alt=""></p>
<p>余额充足，可以冻结：<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/6431cfac8b9f19d26b8230bd0fe0a9b8.png" alt=""></p>
<p>此时，总金额 = 冻结金额 + 可用金额，数量依然是100不变。事务直接提交无需等待其它事务。</p>
<p><strong>阶段二（Confirm)</strong>：假如要提交（Confirm），则冻结金额扣减30</p>
<p>确认可以提交，不过之前可用金额已经扣减过了，这里只要清除冻结金额就好了：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/751ecd147e82aef38e0a52ff7914a1a8.png" alt=""></p>
<p>此时，总金额 = 冻结金额 + 可用金额 = 0 + 70  = 70元</p>
<p><strong>阶段二(Canncel)</strong>：如果要回滚（Cancel），则冻结金额扣减30，可用余额增加30</p>
<p>需要回滚，那么就要释放冻结金额，恢复可用金额：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/301479a856a77e47521610c8dc8038d7.png" alt=""></p>
<h2 id="7-3-原理介绍">7.3 原理介绍</h2>
<p>工作模式如下图所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/bfa02782458a9a4ba2d677002031a441.png" alt=""></p>
<h2 id="7-4-优缺点">7.4 优缺点</h2>
<p>TCC模式的每个阶段是做什么的？</p>
<ul>
<li>Try：资源检查和预留</li>
<li>Confirm：业务执行和提交</li>
<li>Cancel：预留资源的释放</li>
</ul>
<p>TCC的优点是什么？</p>
<ul>
<li>一阶段完成直接提交事务，释放数据库资源，性能好</li>
<li>相比AT模型，无需生成快照，无需使用全局锁，<strong>性能最强</strong></li>
<li><strong>不依赖数据库事务</strong>，而是依赖补偿操作，可以用于非事务型数据库</li>
</ul>
<p>TCC的缺点是什么？</p>
<ul>
<li>有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦</li>
<li>软状态，事务是最终一致</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown-Emoji</title>
    <url>/2022/11/01/markdown-Emoji/</url>
    <content><![CDATA[<h2 id="People">People</h2>
<table>
<thead>
<tr>
<th style="text-align:left">:bowtie: <code>:bowtie:</code></th>
<th>😄 <code>:smile:</code></th>
<th>😆 <code>:laughing:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">😊 <code>:blush:</code></td>
<td>😃 <code>:smiley:</code></td>
<td>☺️ <code>:relaxed:</code></td>
</tr>
<tr>
<td style="text-align:left">😏 <code>:smirk:</code></td>
<td>😍 <code>:heart_eyes:</code></td>
<td>😘 <code>:kissing_heart:</code></td>
</tr>
<tr>
<td style="text-align:left">😚 <code>:kissing_closed_eyes:</code></td>
<td>😳 <code>:flushed:</code></td>
<td>😌 <code>:relieved:</code></td>
</tr>
<tr>
<td style="text-align:left">😆 <code>:satisfied:</code></td>
<td>😁 <code>:grin:</code></td>
<td>😉 <code>:wink:</code></td>
</tr>
<tr>
<td style="text-align:left">😜 <code>:stuck_out_tongue_winking_eye:</code></td>
<td>😝 <code>:stuck_out_tongue_closed_eyes:</code></td>
<td>😀 <code>:grinning:</code></td>
</tr>
<tr>
<td style="text-align:left">😗 <code>:kissing:</code></td>
<td>😙 <code>:kissing_smiling_eyes:</code></td>
<td>😛 <code>:stuck_out_tongue:</code></td>
</tr>
<tr>
<td style="text-align:left">😴 <code>:sleeping:</code></td>
<td>😟 <code>:worried:</code></td>
<td>😦 <code>:frowning:</code></td>
</tr>
<tr>
<td style="text-align:left">😧 <code>:anguished:</code></td>
<td>😮 <code>:open_mouth:</code></td>
<td>😬 <code>:grimacing:</code></td>
</tr>
<tr>
<td style="text-align:left">😕 <code>:confused:</code></td>
<td>😯 <code>:hushed:</code></td>
<td>😑 <code>:expressionless:</code></td>
</tr>
<tr>
<td style="text-align:left">😒 <code>:unamused:</code></td>
<td>😅 <code>:sweat_smile:</code></td>
<td>😓 <code>:sweat:</code></td>
</tr>
<tr>
<td style="text-align:left">😥 <code>:disappointed_relieved:</code></td>
<td>😩 <code>:weary:</code></td>
<td>😔 <code>:pensive:</code></td>
</tr>
<tr>
<td style="text-align:left">😞 <code>:disappointed:</code></td>
<td>😖 <code>:confounded:</code></td>
<td>😨 <code>:fearful:</code></td>
</tr>
<tr>
<td style="text-align:left">😰 <code>:cold_sweat:</code></td>
<td>😣 <code>:persevere:</code></td>
<td>😢 <code>:cry:</code></td>
</tr>
<tr>
<td style="text-align:left">😭 <code>:sob:</code></td>
<td>😂 <code>:joy:</code></td>
<td>😲 <code>:astonished:</code></td>
</tr>
<tr>
<td style="text-align:left">😱 <code>:scream:</code></td>
<td>:neckbeard: <code>:neckbeard:</code></td>
<td>😫 <code>:tired_face:</code></td>
</tr>
<tr>
<td style="text-align:left">😠 <code>:angry:</code></td>
<td>😡 <code>:rage:</code></td>
<td>😤 <code>:triumph:</code></td>
</tr>
<tr>
<td style="text-align:left">😪 <code>:sleepy:</code></td>
<td>😋 <code>:yum:</code></td>
<td>😷 <code>:mask:</code></td>
</tr>
<tr>
<td style="text-align:left">😎 <code>:sunglasses:</code></td>
<td>😵 <code>:dizzy_face:</code></td>
<td>👿 <code>:imp:</code></td>
</tr>
<tr>
<td style="text-align:left">😈 <code>:smiling_imp:</code></td>
<td>😐 <code>:neutral_face:</code></td>
<td>😶 <code>:no_mouth:</code></td>
</tr>
<tr>
<td style="text-align:left">😇 <code>:innocent:</code></td>
<td>👽 <code>:alien:</code></td>
<td>💛 <code>:yellow_heart:</code></td>
</tr>
<tr>
<td style="text-align:left">💙 <code>:blue_heart:</code></td>
<td>💜 <code>:purple_heart:</code></td>
<td>❤️ <code>:heart:</code></td>
</tr>
<tr>
<td style="text-align:left">💚 <code>:green_heart:</code></td>
<td>💔 <code>:broken_heart:</code></td>
<td>💓 <code>:heartbeat:</code></td>
</tr>
<tr>
<td style="text-align:left">💗 <code>:heartpulse:</code></td>
<td>💕 <code>:two_hearts:</code></td>
<td>💞 <code>:revolving_hearts:</code></td>
</tr>
<tr>
<td style="text-align:left">💘 <code>:cupid:</code></td>
<td>💖 <code>:sparkling_heart:</code></td>
<td>✨ <code>:sparkles:</code></td>
</tr>
<tr>
<td style="text-align:left">⭐ <code>:star:</code></td>
<td>🌟 <code>:star2:</code></td>
<td>💫 <code>:dizzy:</code></td>
</tr>
<tr>
<td style="text-align:left">💥 <code>:boom:</code></td>
<td>💥 <code>:collision:</code></td>
<td>💢 <code>:anger:</code></td>
</tr>
<tr>
<td style="text-align:left">❗ <code>:exclamation:</code></td>
<td>❓ <code>:question:</code></td>
<td>❕ <code>:grey_exclamation:</code></td>
</tr>
<tr>
<td style="text-align:left">❔ <code>:grey_question:</code></td>
<td>💤 <code>:zzz:</code></td>
<td>💨 <code>:dash:</code></td>
</tr>
<tr>
<td style="text-align:left">💦 <code>:sweat_drops:</code></td>
<td>🎶 <code>:notes:</code></td>
<td>🎵 <code>:musical_note:</code></td>
</tr>
<tr>
<td style="text-align:left">🔥 <code>:fire:</code></td>
<td>💩 <code>:hankey:</code></td>
<td>💩 <code>:poop:</code></td>
</tr>
<tr>
<td style="text-align:left">💩 <code>:shit:</code></td>
<td>👍 <code>:+1:</code></td>
<td>👍 <code>:thumbsup:</code></td>
</tr>
<tr>
<td style="text-align:left">👎 <code>:-1:</code></td>
<td>👎 <code>:thumbsdown:</code></td>
<td>👌 <code>:ok_hand:</code></td>
</tr>
<tr>
<td style="text-align:left">👊 <code>:punch:</code></td>
<td>👊 <code>:facepunch:</code></td>
<td>✊ <code>:fist:</code></td>
</tr>
<tr>
<td style="text-align:left">✌️ <code>:v:</code></td>
<td>👋 <code>:wave:</code></td>
<td>✋ <code>:hand:</code></td>
</tr>
<tr>
<td style="text-align:left">✋ <code>:raised_hand:</code></td>
<td>👐 <code>:open_hands:</code></td>
<td>☝️ <code>:point_up:</code></td>
</tr>
<tr>
<td style="text-align:left">👇 <code>:point_down:</code></td>
<td>👈 <code>:point_left:</code></td>
<td>👉 <code>:point_right:</code></td>
</tr>
<tr>
<td style="text-align:left">🙌 <code>:raised_hands:</code></td>
<td>🙏 <code>:pray:</code></td>
<td>👆 <code>:point_up_2:</code></td>
</tr>
<tr>
<td style="text-align:left">👏 <code>:clap:</code></td>
<td>💪 <code>:muscle:</code></td>
<td>🤘 <code>:metal:</code></td>
</tr>
<tr>
<td style="text-align:left">🖕 <code>:fu:</code></td>
<td>🚶 <code>:walking:</code></td>
<td>🏃 <code>:runner:</code></td>
</tr>
<tr>
<td style="text-align:left">🏃 <code>:running:</code></td>
<td>👫 <code>:couple:</code></td>
<td>👪 <code>:family:</code></td>
</tr>
<tr>
<td style="text-align:left">👬 <code>:two_men_holding_hands:</code></td>
<td>👭 <code>:two_women_holding_hands:</code></td>
<td>💃 <code>:dancer:</code></td>
</tr>
<tr>
<td style="text-align:left">👯 <code>:dancers:</code></td>
<td>🙆‍♀️ <code>:ok_woman:</code></td>
<td>🙅 <code>:no_good:</code></td>
</tr>
<tr>
<td style="text-align:left">💁 <code>:information_desk_person:</code></td>
<td>🙋 <code>:raising_hand:</code></td>
<td>👰‍♀️ <code>:bride_with_veil:</code></td>
</tr>
<tr>
<td style="text-align:left">:person_with_pouting_face: <code>:person_with_pouting_face:</code></td>
<td>:person_frowning: <code>:person_frowning:</code></td>
<td>🙇 <code>:bow:</code></td>
</tr>
<tr>
<td style="text-align:left">💏 <code>:couplekiss:</code></td>
<td>💑 <code>:couple_with_heart:</code></td>
<td>💆 <code>:massage:</code></td>
</tr>
<tr>
<td style="text-align:left">💇 <code>:haircut:</code></td>
<td>💅 <code>:nail_care:</code></td>
<td>👦 <code>:boy:</code></td>
</tr>
<tr>
<td style="text-align:left">👧 <code>:girl:</code></td>
<td>👩 <code>:woman:</code></td>
<td>👨 <code>:man:</code></td>
</tr>
<tr>
<td style="text-align:left">👶 <code>:baby:</code></td>
<td>👵 <code>:older_woman:</code></td>
<td>👴 <code>:older_man:</code></td>
</tr>
<tr>
<td style="text-align:left">:person_with_blond_hair: <code>:person_with_blond_hair:</code></td>
<td>👲 <code>:man_with_gua_pi_mao:</code></td>
<td>👳‍♂️ <code>:man_with_turban:</code></td>
</tr>
<tr>
<td style="text-align:left">👷 <code>:construction_worker:</code></td>
<td>👮 <code>:cop:</code></td>
<td>👼 <code>:angel:</code></td>
</tr>
<tr>
<td style="text-align:left">👸 <code>:princess:</code></td>
<td>😺 <code>:smiley_cat:</code></td>
<td>😸 <code>:smile_cat:</code></td>
</tr>
<tr>
<td style="text-align:left">😻 <code>:heart_eyes_cat:</code></td>
<td>😽 <code>:kissing_cat:</code></td>
<td>😼 <code>:smirk_cat:</code></td>
</tr>
<tr>
<td style="text-align:left">🙀 <code>:scream_cat:</code></td>
<td>😿 <code>:crying_cat_face:</code></td>
<td>😹 <code>:joy_cat:</code></td>
</tr>
<tr>
<td style="text-align:left">😾 <code>:pouting_cat:</code></td>
<td>👹 <code>:japanese_ogre:</code></td>
<td>👺 <code>:japanese_goblin:</code></td>
</tr>
<tr>
<td style="text-align:left">🙈 <code>:see_no_evil:</code></td>
<td>🙉 <code>:hear_no_evil:</code></td>
<td>🙊 <code>:speak_no_evil:</code></td>
</tr>
<tr>
<td style="text-align:left">💂‍♂️ <code>:guardsman:</code></td>
<td>💀 <code>:skull:</code></td>
<td>🐾 <code>:feet:</code></td>
</tr>
<tr>
<td style="text-align:left">👄 <code>:lips:</code></td>
<td>💋 <code>:kiss:</code></td>
<td>💧 <code>:droplet:</code></td>
</tr>
<tr>
<td style="text-align:left">👂 <code>:ear:</code></td>
<td>👀 <code>:eyes:</code></td>
<td>👃 <code>:nose:</code></td>
</tr>
<tr>
<td style="text-align:left">👅 <code>:tongue:</code></td>
<td>💌 <code>:love_letter:</code></td>
<td>👤 <code>:bust_in_silhouette:</code></td>
</tr>
<tr>
<td style="text-align:left">👥 <code>:busts_in_silhouette:</code></td>
<td>💬 <code>:speech_balloon:</code></td>
<td>💭 <code>:thought_balloon:</code></td>
</tr>
<tr>
<td style="text-align:left">:feelsgood <code>:feelsgood:</code></td>
<td>:finnadie: <code>:finnadie:</code></td>
<td>:goberserk: <code>:goberserk:</code></td>
</tr>
<tr>
<td style="text-align:left">:godmode: <code>:godmode:</code></td>
<td>:hurtrealbad: <code>:hurtrealbad:</code></td>
<td>:rage1: <code>:rage1:</code></td>
</tr>
<tr>
<td style="text-align:left">:rage2: <code>:rage2:</code></td>
<td>:rage3: <code>:rage3:</code></td>
<td>:rage4: <code>:rage4:</code></td>
</tr>
<tr>
<td style="text-align:left">:suspect: <code>:suspect:</code></td>
<td>:trollface: <code>:trollface:</code></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Nature">Nature</h2>
<table>
<thead>
<tr>
<th>☀️ <code>:sunny:</code></th>
<th>☔ <code>:umbrella:</code></th>
<th>☁️ <code>:cloud:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>❄️ <code>:snowflake:</code></td>
<td>⛄ <code>:snowman:</code></td>
<td>⚡ <code>:zap:</code></td>
</tr>
<tr>
<td>🌀 <code>:cyclone:</code></td>
<td>🌁 <code>:foggy:</code></td>
<td>🌊 <code>:ocean:</code></td>
</tr>
<tr>
<td>🐱 <code>:cat:</code></td>
<td>🐶 <code>:dog:</code></td>
<td>🐭 <code>:mouse:</code></td>
</tr>
<tr>
<td>🐹 <code>:hamster:</code></td>
<td>🐰 <code>:rabbit:</code></td>
<td>🐺 <code>:wolf:</code></td>
</tr>
<tr>
<td>🐸 <code>:frog:</code></td>
<td>🐯 <code>:tiger:</code></td>
<td>🐨 <code>:koala:</code></td>
</tr>
<tr>
<td>🐻 <code>:bear:</code></td>
<td>🐷 <code>:pig:</code></td>
<td>🐽 <code>:pig_nose:</code></td>
</tr>
<tr>
<td>🐮 <code>:cow:</code></td>
<td>🐗 <code>:boar:</code></td>
<td>🐵 <code>:monkey_face:</code></td>
</tr>
<tr>
<td>🐒 <code>:monkey:</code></td>
<td>🐴 <code>:horse:</code></td>
<td>🐎 <code>:racehorse:</code></td>
</tr>
<tr>
<td>🐫 <code>:camel:</code></td>
<td>🐑 <code>:sheep:</code></td>
<td>🐘 <code>:elephant:</code></td>
</tr>
<tr>
<td>🐼 <code>:panda_face:</code></td>
<td>🐍 <code>:snake:</code></td>
<td>🐦 <code>:bird:</code></td>
</tr>
<tr>
<td>🐤 <code>:baby_chick:</code></td>
<td>🐥 <code>:hatched_chick:</code></td>
<td>🐣 <code>:hatching_chick:</code></td>
</tr>
<tr>
<td>🐔 <code>:chicken:</code></td>
<td>🐧 <code>:penguin:</code></td>
<td>🐢 <code>:turtle:</code></td>
</tr>
<tr>
<td>🐛 <code>:bug:</code></td>
<td>🐝 <code>:honeybee:</code></td>
<td>🐜 <code>:ant:</code></td>
</tr>
<tr>
<td>🪲 <code>:beetle:</code></td>
<td>🐌 <code>:snail:</code></td>
<td>🐙 <code>:octopus:</code></td>
</tr>
<tr>
<td>🐠 <code>:tropical_fish:</code></td>
<td>🐟 <code>:fish:</code></td>
<td>🐳 <code>:whale:</code></td>
</tr>
<tr>
<td>🐋 <code>:whale2:</code></td>
<td>🐬 <code>:dolphin:</code></td>
<td>🐄 <code>:cow2:</code></td>
</tr>
<tr>
<td>🐏 <code>:ram:</code></td>
<td>🐀 <code>:rat:</code></td>
<td>🐃 <code>:water_buffalo:</code></td>
</tr>
<tr>
<td>🐅 <code>:tiger2:</code></td>
<td>🐇 <code>:rabbit2:</code></td>
<td>🐉 <code>:dragon:</code></td>
</tr>
<tr>
<td>🐐 <code>:goat:</code></td>
<td>🐓 <code>:rooster:</code></td>
<td>🐕 <code>:dog2:</code></td>
</tr>
<tr>
<td>🐖 <code>:pig2:</code></td>
<td>🐁 <code>:mouse2:</code></td>
<td>🐂 <code>:ox:</code></td>
</tr>
<tr>
<td>🐲 <code>:dragon_face:</code></td>
<td>🐡 <code>:blowfish:</code></td>
<td>🐊 <code>:crocodile:</code></td>
</tr>
<tr>
<td>🐪 <code>:dromedary_camel:</code></td>
<td>🐆 <code>:leopard:</code></td>
<td>🐈 <code>:cat2:</code></td>
</tr>
<tr>
<td>🐩 <code>:poodle:</code></td>
<td>🐾 <code>:paw_prints:</code></td>
<td>💐 <code>:bouquet:</code></td>
</tr>
<tr>
<td>🌸 <code>:cherry_blossom:</code></td>
<td>🌷 <code>:tulip:</code></td>
<td>🍀 <code>:four_leaf_clover:</code></td>
</tr>
<tr>
<td>🌹 <code>:rose:</code></td>
<td>🌻 <code>:sunflower:</code></td>
<td>🌺 <code>:hibiscus:</code></td>
</tr>
<tr>
<td>🍁 <code>:maple_leaf:</code></td>
<td>🍃 <code>:leaves:</code></td>
<td>🍂 <code>:fallen_leaf:</code></td>
</tr>
<tr>
<td>🌿 <code>:herb:</code></td>
<td>🍄 <code>:mushroom:</code></td>
<td>🌵 <code>:cactus:</code></td>
</tr>
<tr>
<td>🌴 <code>:palm_tree:</code></td>
<td>🌲 <code>:evergreen_tree:</code></td>
<td>🌳 <code>:deciduous_tree:</code></td>
</tr>
<tr>
<td>🌰 <code>:chestnut:</code></td>
<td>🌱 <code>:seedling:</code></td>
<td>🌼 <code>:blossom:</code></td>
</tr>
<tr>
<td>🌾 <code>:ear_of_rice:</code></td>
<td>🐚 <code>:shell:</code></td>
<td>🌐 <code>:globe_with_meridians:</code></td>
</tr>
<tr>
<td>🌞 <code>:sun_with_face:</code></td>
<td>🌝 <code>:full_moon_with_face:</code></td>
<td>🌚 <code>:new_moon_with_face:</code></td>
</tr>
<tr>
<td>🌑 <code>:new_moon:</code></td>
<td>🌒 <code>:waxing_crescent_moon:</code></td>
<td>🌓 <code>:first_quarter_moon:</code></td>
</tr>
<tr>
<td>🌔 <code>:waxing_gibbous_moon:</code></td>
<td>🌕 <code>:full_moon:</code></td>
<td>🌖 <code>:waning_gibbous_moon:</code></td>
</tr>
<tr>
<td>🌗 <code>:last_quarter_moon:</code></td>
<td>🌘 <code>:waning_crescent_moon:</code></td>
<td>🌜 <code>:last_quarter_moon_with_face:</code></td>
</tr>
<tr>
<td>🌛 <code>:first_quarter_moon_with_face:</code></td>
<td>🌔 <code>:moon:</code></td>
<td>🌍 <code>:earth_africa:</code></td>
</tr>
<tr>
<td>🌎 <code>:earth_americas:</code></td>
<td>🌏 <code>:earth_asia:</code></td>
<td>🌋 <code>:volcano:</code></td>
</tr>
<tr>
<td>🌌 <code>:milky_way:</code></td>
<td>⛅ <code>:partly_sunny:</code></td>
<td>:octocat: <code>:octocat:</code></td>
</tr>
<tr>
<td>:squirrel: <code>:squirrel:</code></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Objects">Objects</h2>
<table>
<thead>
<tr>
<th>🎍 <code>:bamboo:</code></th>
<th>💝 <code>:gift_heart:</code></th>
<th>🎎 <code>:dolls:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>🎒 <code>:school_satchel:</code></td>
<td>🎓 <code>:mortar_board:</code></td>
<td>🎏 <code>:flags:</code></td>
</tr>
<tr>
<td>🎆 <code>:fireworks:</code></td>
<td>🎇 <code>:sparkler:</code></td>
<td>🎐 <code>:wind_chime:</code></td>
</tr>
<tr>
<td>🎑 <code>:rice_scene:</code></td>
<td>🎃 <code>:jack_o_lantern:</code></td>
<td>👻 <code>:ghost:</code></td>
</tr>
<tr>
<td>🎅 <code>:santa:</code></td>
<td>🎄 <code>:christmas_tree:</code></td>
<td>🎁 <code>:gift:</code></td>
</tr>
<tr>
<td>🔔 <code>:bell:</code></td>
<td>🔕 <code>:no_bell:</code></td>
<td>🎋 <code>:tanabata_tree:</code></td>
</tr>
<tr>
<td>🎉 <code>:tada:</code></td>
<td>🎊 <code>:confetti_ball:</code></td>
<td>🎈 <code>:balloon:</code></td>
</tr>
<tr>
<td>🔮 <code>:crystal_ball:</code></td>
<td>💿 <code>:cd:</code></td>
<td>📀 <code>:dvd:</code></td>
</tr>
<tr>
<td>💾 <code>:floppy_disk:</code></td>
<td>📷 <code>:camera:</code></td>
<td>📹 <code>:video_camera:</code></td>
</tr>
<tr>
<td>🎥 <code>:movie_camera:</code></td>
<td>💻 <code>:computer:</code></td>
<td>📺 <code>:tv:</code></td>
</tr>
<tr>
<td>📱 <code>:iphone:</code></td>
<td>☎️ <code>:phone:</code></td>
<td>☎️ <code>:telephone:</code></td>
</tr>
<tr>
<td>📞 <code>:telephone_receiver:</code></td>
<td>📟 <code>:pager:</code></td>
<td>📠 <code>:fax:</code></td>
</tr>
<tr>
<td>💽 <code>:minidisc:</code></td>
<td>📼 <code>:vhs:</code></td>
<td>🔉 <code>:sound:</code></td>
</tr>
<tr>
<td>🔈 <code>:speaker:</code></td>
<td>🔇 <code>:mute:</code></td>
<td>📢 <code>:loudspeaker:</code></td>
</tr>
<tr>
<td>📣 <code>:mega:</code></td>
<td>⌛ <code>:hourglass:</code></td>
<td>⏳ <code>:hourglass_flowing_sand:</code></td>
</tr>
<tr>
<td>⏰ <code>:alarm_clock:</code></td>
<td>⌚ <code>:watch:</code></td>
<td>📻 <code>:radio:</code></td>
</tr>
<tr>
<td>📡 <code>:satellite:</code></td>
<td>➿ <code>:loop:</code></td>
<td>🔍 <code>:mag:</code></td>
</tr>
<tr>
<td>🔎 <code>:mag_right:</code></td>
<td>🔓 <code>:unlock:</code></td>
<td>🔒 <code>:lock:</code></td>
</tr>
<tr>
<td>🔏 <code>:lock_with_ink_pen:</code></td>
<td>🔐 <code>:closed_lock_with_key:</code></td>
<td>🔑 <code>:key:</code></td>
</tr>
<tr>
<td>💡 <code>:bulb:</code></td>
<td>🔦 <code>:flashlight:</code></td>
<td>🔆 <code>:high_brightness:</code></td>
</tr>
<tr>
<td>🔅 <code>:low_brightness:</code></td>
<td>🔌 <code>:electric_plug:</code></td>
<td>🔋 <code>:battery:</code></td>
</tr>
<tr>
<td>📲 <code>:calling:</code></td>
<td>📧 <code>:email:</code></td>
<td>📫 <code>:mailbox:</code></td>
</tr>
<tr>
<td>📮 <code>:postbox:</code></td>
<td>🛀 <code>:bath:</code></td>
<td>🛁 <code>:bathtub:</code></td>
</tr>
<tr>
<td>🚿 <code>:shower:</code></td>
<td>🚽 <code>:toilet:</code></td>
<td>🔧 <code>:wrench:</code></td>
</tr>
<tr>
<td>🔩 <code>:nut_and_bolt:</code></td>
<td>🔨 <code>:hammer:</code></td>
<td>💺 <code>:seat:</code></td>
</tr>
<tr>
<td>💰 <code>:moneybag:</code></td>
<td>💴 <code>:yen:</code></td>
<td>💵 <code>:dollar:</code></td>
</tr>
<tr>
<td>💷 <code>:pound:</code></td>
<td>💶 <code>:euro:</code></td>
<td>💳 <code>:credit_card:</code></td>
</tr>
<tr>
<td>💸 <code>:money_with_wings:</code></td>
<td>📧 <code>:e-mail:</code></td>
<td>📥 <code>:inbox_tray:</code></td>
</tr>
<tr>
<td>📤 <code>:outbox_tray:</code></td>
<td>✉️ <code>:envelope:</code></td>
<td>📨 <code>:incoming_envelope:</code></td>
</tr>
<tr>
<td>📯 <code>:postal_horn:</code></td>
<td>📪 <code>:mailbox_closed:</code></td>
<td>📬 <code>:mailbox_with_mail:</code></td>
</tr>
<tr>
<td>📭 <code>:mailbox_with_no_mail:</code></td>
<td>🚪 <code>:door:</code></td>
<td>🚬 <code>:smoking:</code></td>
</tr>
<tr>
<td>💣 <code>:bomb:</code></td>
<td>🔫 <code>:gun:</code></td>
<td>🔪 <code>:hocho:</code></td>
</tr>
<tr>
<td>💊 <code>:pill:</code></td>
<td>💉 <code>:syringe:</code></td>
<td>📄 <code>:page_facing_up:</code></td>
</tr>
<tr>
<td>📃 <code>:page_with_curl:</code></td>
<td>📑 <code>:bookmark_tabs:</code></td>
<td>📊 <code>:bar_chart:</code></td>
</tr>
<tr>
<td>📈 <code>:chart_with_upwards_trend:</code></td>
<td>📉 <code>:chart_with_downwards_trend:</code></td>
<td>📜 <code>:scroll:</code></td>
</tr>
<tr>
<td>📋 <code>:clipboard:</code></td>
<td>📆 <code>:calendar:</code></td>
<td>📅 <code>:date:</code></td>
</tr>
<tr>
<td>📇 <code>:card_index:</code></td>
<td>📁 <code>:file_folder:</code></td>
<td>📂 <code>:open_file_folder:</code></td>
</tr>
<tr>
<td>✂️ <code>:scissors:</code></td>
<td>📌 <code>:pushpin:</code></td>
<td>📎 <code>:paperclip:</code></td>
</tr>
<tr>
<td>✒️ <code>:black_nib:</code></td>
<td>✏️ <code>:pencil2:</code></td>
<td>📏 <code>:straight_ruler:</code></td>
</tr>
<tr>
<td>📐 <code>:triangular_ruler:</code></td>
<td>📕 <code>:closed_book:</code></td>
<td>📗 <code>:green_book:</code></td>
</tr>
<tr>
<td>📘 <code>:blue_book:</code></td>
<td>📙 <code>:orange_book:</code></td>
<td>📓 <code>:notebook:</code></td>
</tr>
<tr>
<td>📔 <code>:notebook_with_decorative_cover:</code></td>
<td>📒 <code>:ledger:</code></td>
<td>📚 <code>:books:</code></td>
</tr>
<tr>
<td>🔖 <code>:bookmark:</code></td>
<td>📛 <code>:name_badge:</code></td>
<td>🔬 <code>:microscope:</code></td>
</tr>
<tr>
<td>🔭 <code>:telescope:</code></td>
<td>📰 <code>:newspaper:</code></td>
<td>🏈 <code>:football:</code></td>
</tr>
<tr>
<td>🏀 <code>:basketball:</code></td>
<td>⚽ <code>:soccer:</code></td>
<td>⚾ <code>:baseball:</code></td>
</tr>
<tr>
<td>🎾 <code>:tennis:</code></td>
<td>🎱 <code>:8ball:</code></td>
<td>🏉 <code>:rugby_football:</code></td>
</tr>
<tr>
<td>🎳 <code>:bowling:</code></td>
<td>⛳ <code>:golf:</code></td>
<td>🚵 <code>:mountain_bicyclist:</code></td>
</tr>
<tr>
<td>🚴 <code>:bicyclist:</code></td>
<td>🏇 <code>:horse_racing:</code></td>
<td>🏂 <code>:snowboarder:</code></td>
</tr>
<tr>
<td>🏊 <code>:swimmer:</code></td>
<td>🏄 <code>:surfer:</code></td>
<td>🎿 <code>:ski:</code></td>
</tr>
<tr>
<td>♠️ <code>:spades:</code></td>
<td>♥️ <code>:hearts:</code></td>
<td>♣️ <code>:clubs:</code></td>
</tr>
<tr>
<td>♦️ <code>:diamonds:</code></td>
<td>💎 <code>:gem:</code></td>
<td>💍 <code>:ring:</code></td>
</tr>
<tr>
<td>🏆 <code>:trophy:</code></td>
<td>🎼 <code>:musical_score:</code></td>
<td>🎹 <code>:musical_keyboard:</code></td>
</tr>
<tr>
<td>🎻 <code>:violin:</code></td>
<td>👾 <code>:space_invader:</code></td>
<td>🎮 <code>:video_game:</code></td>
</tr>
<tr>
<td>🃏 <code>:black_joker:</code></td>
<td>🎴 <code>:flower_playing_cards:</code></td>
<td>🎲 <code>:game_die:</code></td>
</tr>
<tr>
<td>🎯 <code>:dart:</code></td>
<td>🀄 <code>:mahjong:</code></td>
<td>🎬 <code>:clapper:</code></td>
</tr>
<tr>
<td>📝 <code>:memo:</code></td>
<td>📝 <code>:pencil:</code></td>
<td>📖 <code>:book:</code></td>
</tr>
<tr>
<td>🎨 <code>:art:</code></td>
<td>🎤 <code>:microphone:</code></td>
<td>🎧 <code>:headphones:</code></td>
</tr>
<tr>
<td>🎺 <code>:trumpet:</code></td>
<td>🎷 <code>:saxophone:</code></td>
<td>🎸 <code>:guitar:</code></td>
</tr>
<tr>
<td>👞 <code>:shoe:</code></td>
<td>👡 <code>:sandal:</code></td>
<td>👠 <code>:high_heel:</code></td>
</tr>
<tr>
<td>💄 <code>:lipstick:</code></td>
<td>👢 <code>:boot:</code></td>
<td>👕 <code>:shirt:</code></td>
</tr>
<tr>
<td>👕 <code>:tshirt:</code></td>
<td>👔 <code>:necktie:</code></td>
<td>👚 <code>:womans_clothes:</code></td>
</tr>
<tr>
<td>👗 <code>:dress:</code></td>
<td>🎽 <code>:running_shirt_with_sash:</code></td>
<td>👖 <code>:jeans:</code></td>
</tr>
<tr>
<td>👘 <code>:kimono:</code></td>
<td>👙 <code>:bikini:</code></td>
<td>🎀 <code>:ribbon:</code></td>
</tr>
<tr>
<td>🎩 <code>:tophat:</code></td>
<td>👑 <code>:crown:</code></td>
<td>👒 <code>:womans_hat:</code></td>
</tr>
<tr>
<td>👞 <code>:mans_shoe:</code></td>
<td>🌂 <code>:closed_umbrella:</code></td>
<td>💼 <code>:briefcase:</code></td>
</tr>
<tr>
<td>👜 <code>:handbag:</code></td>
<td>👝 <code>:pouch:</code></td>
<td>👛 <code>:purse:</code></td>
</tr>
<tr>
<td>👓 <code>:eyeglasses:</code></td>
<td>🎣 <code>:fishing_pole_and_fish:</code></td>
<td>☕ <code>:coffee:</code></td>
</tr>
<tr>
<td>🍵 <code>:tea:</code></td>
<td>🍶 <code>:sake:</code></td>
<td>🍼 <code>:baby_bottle:</code></td>
</tr>
<tr>
<td>🍺 <code>:beer:</code></td>
<td>🍻 <code>:beers:</code></td>
<td>🍸 <code>:cocktail:</code></td>
</tr>
<tr>
<td>🍹 <code>:tropical_drink:</code></td>
<td>🍷 <code>:wine_glass:</code></td>
<td>🍴 <code>:fork_and_knife:</code></td>
</tr>
<tr>
<td>🍕 <code>:pizza:</code></td>
<td>🍔 <code>:hamburger:</code></td>
<td>🍟 <code>:fries:</code></td>
</tr>
<tr>
<td>🍗 <code>:poultry_leg:</code></td>
<td>🍖 <code>:meat_on_bone:</code></td>
<td>🍝 <code>:spaghetti:</code></td>
</tr>
<tr>
<td>🍛 <code>:curry:</code></td>
<td>🍤 <code>:fried_shrimp:</code></td>
<td>🍱 <code>:bento:</code></td>
</tr>
<tr>
<td>🍣 <code>:sushi:</code></td>
<td>🍥 <code>:fish_cake:</code></td>
<td>🍙 <code>:rice_ball:</code></td>
</tr>
<tr>
<td>🍘 <code>:rice_cracker:</code></td>
<td>🍚 <code>:rice:</code></td>
<td>🍜 <code>:ramen:</code></td>
</tr>
<tr>
<td>🍲 <code>:stew:</code></td>
<td>🍢 <code>:oden:</code></td>
<td>🍡 <code>:dango:</code></td>
</tr>
<tr>
<td>🥚 <code>:egg:</code></td>
<td>🍞 <code>:bread:</code></td>
<td>🍩 <code>:doughnut:</code></td>
</tr>
<tr>
<td>🍮 <code>:custard:</code></td>
<td>🍦 <code>:icecream:</code></td>
<td>🍨 <code>:ice_cream:</code></td>
</tr>
<tr>
<td>🍧 <code>:shaved_ice:</code></td>
<td>🎂 <code>:birthday:</code></td>
<td>🍰 <code>:cake:</code></td>
</tr>
<tr>
<td>🍪 <code>:cookie:</code></td>
<td>🍫 <code>:chocolate_bar:</code></td>
<td>🍬 <code>:candy:</code></td>
</tr>
<tr>
<td>🍭 <code>:lollipop:</code></td>
<td>🍯 <code>:honey_pot:</code></td>
<td>🍎 <code>:apple:</code></td>
</tr>
<tr>
<td>🍏 <code>:green_apple:</code></td>
<td>🍊 <code>:tangerine:</code></td>
<td>🍋 <code>:lemon:</code></td>
</tr>
<tr>
<td>🍒 <code>:cherries:</code></td>
<td>🍇 <code>:grapes:</code></td>
<td>🍉 <code>:watermelon:</code></td>
</tr>
<tr>
<td>🍓 <code>:strawberry:</code></td>
<td>🍑 <code>:peach:</code></td>
<td>🍈 <code>:melon:</code></td>
</tr>
<tr>
<td>🍌 <code>:banana:</code></td>
<td>🍐 <code>:pear:</code></td>
<td>🍍 <code>:pineapple:</code></td>
</tr>
<tr>
<td>🍠 <code>:sweet_potato:</code></td>
<td>🍆 <code>:eggplant:</code></td>
<td>🍅 <code>:tomato:</code></td>
</tr>
<tr>
<td>🌽 <code>:corn:</code></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Places">Places</h2>
<table>
<thead>
<tr>
<th>🏠 <code>:house:</code></th>
<th>🏡 <code>:house_with_garden:</code></th>
<th>🏫 <code>:school:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>🏢 <code>:office:</code></td>
<td>🏣 <code>:post_office:</code></td>
<td>🏥 <code>:hospital:</code></td>
</tr>
<tr>
<td>🏦 <code>:bank:</code></td>
<td>🏪 <code>:convenience_store:</code></td>
<td>🏩 <code>:love_hotel:</code></td>
</tr>
<tr>
<td>🏨 <code>:hotel:</code></td>
<td>💒 <code>:wedding:</code></td>
<td>⛪ <code>:church:</code></td>
</tr>
<tr>
<td>🏬 <code>:department_store:</code></td>
<td>🏤 <code>:european_post_office:</code></td>
<td>🌇 <code>:city_sunrise:</code></td>
</tr>
<tr>
<td>🌆 <code>:city_sunset:</code></td>
<td>🏯 <code>:japanese_castle:</code></td>
<td>🏰 <code>:european_castle:</code></td>
</tr>
<tr>
<td>⛺ <code>:tent:</code></td>
<td>🏭 <code>:factory:</code></td>
<td>🗼 <code>:tokyo_tower:</code></td>
</tr>
<tr>
<td>🗾 <code>:japan:</code></td>
<td>🗻 <code>:mount_fuji:</code></td>
<td>🌄 <code>:sunrise_over_mountains:</code></td>
</tr>
<tr>
<td>🌅 <code>:sunrise:</code></td>
<td>🌠 <code>:stars:</code></td>
<td>🗽 <code>:statue_of_liberty:</code></td>
</tr>
<tr>
<td>🌉 <code>:bridge_at_night:</code></td>
<td>🎠 <code>:carousel_horse:</code></td>
<td>🌈 <code>:rainbow:</code></td>
</tr>
<tr>
<td>🎡 <code>:ferris_wheel:</code></td>
<td>⛲ <code>:fountain:</code></td>
<td>🎢 <code>:roller_coaster:</code></td>
</tr>
<tr>
<td>🚢 <code>:ship:</code></td>
<td>🚤 <code>:speedboat:</code></td>
<td>⛵ <code>:boat:</code></td>
</tr>
<tr>
<td>⛵ <code>:sailboat:</code></td>
<td>🚣 <code>:rowboat:</code></td>
<td>⚓ <code>:anchor:</code></td>
</tr>
<tr>
<td>🚀 <code>:rocket:</code></td>
<td>✈️ <code>:airplane:</code></td>
<td>🚁 <code>:helicopter:</code></td>
</tr>
<tr>
<td>🚂 <code>:steam_locomotive:</code></td>
<td>🚊 <code>:tram:</code></td>
<td>🚞 <code>:mountain_railway:</code></td>
</tr>
<tr>
<td>🚲 <code>:bike:</code></td>
<td>🚡 <code>:aerial_tramway:</code></td>
<td>🚟 <code>:suspension_railway:</code></td>
</tr>
<tr>
<td>🚠 <code>:mountain_cableway:</code></td>
<td>🚜 <code>:tractor:</code></td>
<td>🚙 <code>:blue_car:</code></td>
</tr>
<tr>
<td>🚘 <code>:oncoming_automobile:</code></td>
<td>🚗 <code>:car:</code></td>
<td>🚗 <code>:red_car:</code></td>
</tr>
<tr>
<td>🚕 <code>:taxi:</code></td>
<td>🚖 <code>:oncoming_taxi:</code></td>
<td>🚛 <code>:articulated_lorry:</code></td>
</tr>
<tr>
<td>🚌 <code>:bus:</code></td>
<td>🚍 <code>:oncoming_bus:</code></td>
<td>🚨 <code>:rotating_light:</code></td>
</tr>
<tr>
<td>🚓 <code>:police_car:</code></td>
<td>🚔 <code>:oncoming_police_car:</code></td>
<td>🚒 <code>:fire_engine:</code></td>
</tr>
<tr>
<td>🚑 <code>:ambulance:</code></td>
<td>🚐 <code>:minibus:</code></td>
<td>🚚 <code>:truck:</code></td>
</tr>
<tr>
<td>🚋 <code>:train:</code></td>
<td>🚉 <code>:station:</code></td>
<td>🚆 <code>:train2:</code></td>
</tr>
<tr>
<td>🚅 <code>:bullettrain_front:</code></td>
<td>🚄 <code>:bullettrain_side:</code></td>
<td>🚈 <code>:light_rail:</code></td>
</tr>
<tr>
<td>🚝 <code>:monorail:</code></td>
<td>🚃 <code>:railway_car:</code></td>
<td>🚎 <code>:trolleybus:</code></td>
</tr>
<tr>
<td>🎫 <code>:ticket:</code></td>
<td>⛽ <code>:fuelpump:</code></td>
<td>🚦 <code>:vertical_traffic_light:</code></td>
</tr>
<tr>
<td>🚥 <code>:traffic_light:</code></td>
<td>⚠️ <code>:warning:</code></td>
<td>🚧 <code>:construction:</code></td>
</tr>
<tr>
<td>🔰 <code>:beginner:</code></td>
<td>🏧 <code>:atm:</code></td>
<td>🎰 <code>:slot_machine:</code></td>
</tr>
<tr>
<td>🚏 <code>:busstop:</code></td>
<td>💈 <code>:barber:</code></td>
<td>♨️ <code>:hotsprings:</code></td>
</tr>
<tr>
<td>🏁 <code>:checkered_flag:</code></td>
<td>🎌 <code>:crossed_flags:</code></td>
<td>🏮 <code>:izakaya_lantern:</code></td>
</tr>
<tr>
<td>🗿 <code>:moyai:</code></td>
<td>🎪 <code>:circus_tent:</code></td>
<td>🎭 <code>:performing_arts:</code></td>
</tr>
<tr>
<td>📍 <code>:round_pushpin:</code></td>
<td>🚩 <code>:triangular_flag_on_post:</code></td>
<td>🇯🇵 <code>:jp:</code></td>
</tr>
<tr>
<td>🇰🇷 <code>:kr:</code></td>
<td>🇨🇳 <code>:cn:</code></td>
<td>🇺🇸 <code>:us:</code></td>
</tr>
<tr>
<td>🇫🇷 <code>:fr:</code></td>
<td>🇪🇸 <code>:es:</code></td>
<td>🇮🇹 <code>:it:</code></td>
</tr>
<tr>
<td>🇷🇺 <code>:ru:</code></td>
<td>🇬🇧 <code>:gb:</code></td>
<td>🇬🇧 <code>:uk:</code></td>
</tr>
<tr>
<td>🇩🇪 <code>:de:</code></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Symbols">Symbols</h2>
<table>
<thead>
<tr>
<th>1️⃣ <code>:one:</code></th>
<th>2️⃣ <code>:two:</code></th>
<th>3️⃣ <code>:three:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>4️⃣ <code>:four:</code></td>
<td>5️⃣ <code>:five:</code></td>
<td>6️⃣ <code>:six:</code></td>
</tr>
<tr>
<td>7️⃣ <code>:seven:</code></td>
<td>8️⃣ <code>:eight:</code></td>
<td>9️⃣ <code>:nine:</code></td>
</tr>
<tr>
<td>🔟 <code>:keycap_ten:</code></td>
<td>🔢 <code>:1234:</code></td>
<td>0️⃣ <code>:zero:</code></td>
</tr>
<tr>
<td>#️⃣ <code>:hash:</code></td>
<td>🔣 <code>:symbols:</code></td>
<td>◀️ <code>:arrow_backward:</code></td>
</tr>
<tr>
<td>⬇️ <code>:arrow_down:</code></td>
<td>▶️ <code>:arrow_forward:</code></td>
<td>⬅️ <code>:arrow_left:</code></td>
</tr>
<tr>
<td>🔠 <code>:capital_abcd:</code></td>
<td>🔡 <code>:abcd:</code></td>
<td>🔤 <code>:abc:</code></td>
</tr>
<tr>
<td>↙️ <code>:arrow_lower_left:</code></td>
<td>↘️ <code>:arrow_lower_right:</code></td>
<td>➡️ <code>:arrow_right:</code></td>
</tr>
<tr>
<td>⬆️ <code>:arrow_up:</code></td>
<td>↖️ <code>:arrow_upper_left:</code></td>
<td>↗️ <code>:arrow_upper_right:</code></td>
</tr>
<tr>
<td>⏬ <code>:arrow_double_down:</code></td>
<td>⏫ <code>:arrow_double_up:</code></td>
<td>🔽 <code>:arrow_down_small:</code></td>
</tr>
<tr>
<td>⤵️ <code>:arrow_heading_down:</code></td>
<td>⤴️ <code>:arrow_heading_up:</code></td>
<td>↩️ <code>:leftwards_arrow_with_hook:</code></td>
</tr>
<tr>
<td>↪️ <code>:arrow_right_hook:</code></td>
<td>↔️ <code>:left_right_arrow:</code></td>
<td>↕️ <code>:arrow_up_down:</code></td>
</tr>
<tr>
<td>🔼 <code>:arrow_up_small:</code></td>
<td>🔃 <code>:arrows_clockwise:</code></td>
<td>🔄 <code>:arrows_counterclockwise:</code></td>
</tr>
<tr>
<td>⏪ <code>:rewind:</code></td>
<td>⏩ <code>:fast_forward:</code></td>
<td>ℹ️ <code>:information_source:</code></td>
</tr>
<tr>
<td>🆗 <code>:ok:</code></td>
<td>🔀 <code>:twisted_rightwards_arrows:</code></td>
<td>🔁 <code>:repeat:</code></td>
</tr>
<tr>
<td>🔂 <code>:repeat_one:</code></td>
<td>🆕 <code>:new:</code></td>
<td>🔝 <code>:top:</code></td>
</tr>
<tr>
<td>🆙 <code>:up:</code></td>
<td>🆒 <code>:cool:</code></td>
<td>🆓 <code>:free:</code></td>
</tr>
<tr>
<td>🆖 <code>:ng:</code></td>
<td>🎦 <code>:cinema:</code></td>
<td>🈁 <code>:koko:</code></td>
</tr>
<tr>
<td>📶 <code>:signal_strength:</code></td>
<td>:u5272: <code>:u5272:</code></td>
<td>:u5408: <code>:u5408:</code></td>
</tr>
<tr>
<td>:u55b6: <code>:u55b6:</code></td>
<td>:u6307: <code>:u6307:</code></td>
<td>:u6708: <code>:u6708:</code></td>
</tr>
<tr>
<td>:u6709: <code>:u6709:</code></td>
<td>🈵 <code>:u6e80:</code></td>
<td>:u7121: <code>:u7121:</code></td>
</tr>
<tr>
<td>:u7533: <code>:u7533:</code></td>
<td>:u7a7a: <code>:u7a7a:</code></td>
<td>:u7981: <code>:u7981:</code></td>
</tr>
<tr>
<td>🈂️ <code>:sa:</code></td>
<td>🚻 <code>:restroom:</code></td>
<td>🚹 <code>:mens:</code></td>
</tr>
<tr>
<td>🚺 <code>:womens:</code></td>
<td>🚼 <code>:baby_symbol:</code></td>
<td>🚭 <code>:no_smoking:</code></td>
</tr>
<tr>
<td>🅿️ <code>:parking:</code></td>
<td>♿ <code>:wheelchair:</code></td>
<td>🚇 <code>:metro:</code></td>
</tr>
<tr>
<td>🛄 <code>:baggage_claim:</code></td>
<td>🉑 <code>:accept:</code></td>
<td>🚾 <code>:wc:</code></td>
</tr>
<tr>
<td>🚰 <code>:potable_water:</code></td>
<td>🚮 <code>:put_litter_in_its_place:</code></td>
<td>㊙️ <code>:secret:</code></td>
</tr>
<tr>
<td>㊗️ <code>:congratulations:</code></td>
<td>Ⓜ️ <code>:m:</code></td>
<td>🛂 <code>:passport_control:</code></td>
</tr>
<tr>
<td>🛅 <code>:left_luggage:</code></td>
<td>🛃 <code>:customs:</code></td>
<td>🉐 <code>:ideograph_advantage:</code></td>
</tr>
<tr>
<td>🆑 <code>:cl:</code></td>
<td>🆘 <code>:sos:</code></td>
<td>🆔 <code>:id:</code></td>
</tr>
<tr>
<td>🚫 <code>:no_entry_sign:</code></td>
<td>🔞 <code>:underage:</code></td>
<td>📵 <code>:no_mobile_phones:</code></td>
</tr>
<tr>
<td>🚯 <code>:do_not_litter:</code></td>
<td>🚱 <code>:non-potable_water:</code></td>
<td>🚳 <code>:no_bicycles:</code></td>
</tr>
<tr>
<td>🚷 <code>:no_pedestrians:</code></td>
<td>🚸 <code>:children_crossing:</code></td>
<td>⛔ <code>:no_entry:</code></td>
</tr>
<tr>
<td>✳️ <code>:eight_spoked_asterisk:</code></td>
<td>✴️ <code>:eight_pointed_black_star:</code></td>
<td>💟 <code>:heart_decoration:</code></td>
</tr>
<tr>
<td>🆚 <code>:vs:</code></td>
<td>📳 <code>:vibration_mode:</code></td>
<td>📴 <code>:mobile_phone_off:</code></td>
</tr>
<tr>
<td>💹 <code>:chart:</code></td>
<td>💱 <code>:currency_exchange:</code></td>
<td>♈ <code>:aries:</code></td>
</tr>
<tr>
<td>♉ <code>:taurus:</code></td>
<td>♊ <code>:gemini:</code></td>
<td>♋ <code>:cancer:</code></td>
</tr>
<tr>
<td>♌ <code>:leo:</code></td>
<td>♍ <code>:virgo:</code></td>
<td>♎ <code>:libra:</code></td>
</tr>
<tr>
<td>♏ <code>:scorpius:</code></td>
<td>♐ <code>:sagittarius:</code></td>
<td>♑ <code>:capricorn:</code></td>
</tr>
<tr>
<td>♒ <code>:aquarius:</code></td>
<td>♓ <code>:pisces:</code></td>
<td>⛎ <code>:ophiuchus:</code></td>
</tr>
<tr>
<td>🔯 <code>:six_pointed_star:</code></td>
<td>❎ <code>:negative_squared_cross_mark:</code></td>
<td>🅰️ <code>:a:</code></td>
</tr>
<tr>
<td>🅱️ <code>:b:</code></td>
<td>🆎 <code>:ab:</code></td>
<td>🅾️ <code>:o2:</code></td>
</tr>
<tr>
<td>💠 <code>:diamond_shape_with_a_dot_inside:</code></td>
<td>♻️ <code>:recycle:</code></td>
<td>🔚 <code>:end:</code></td>
</tr>
<tr>
<td>🔛 <code>:on:</code></td>
<td>🔜 <code>:soon:</code></td>
<td>🕐 <code>:clock1:</code></td>
</tr>
<tr>
<td>🕜 <code>:clock130:</code></td>
<td>🕙 <code>:clock10:</code></td>
<td>🕥 <code>:clock1030:</code></td>
</tr>
<tr>
<td>🕚 <code>:clock11:</code></td>
<td>🕦 <code>:clock1130:</code></td>
<td>🕛 <code>:clock12:</code></td>
</tr>
<tr>
<td>🕧 <code>:clock1230:</code></td>
<td>🕑 <code>:clock2:</code></td>
<td>🕝 <code>:clock230:</code></td>
</tr>
<tr>
<td>🕒 <code>:clock3:</code></td>
<td>🕞 <code>:clock330:</code></td>
<td>🕓 <code>:clock4:</code></td>
</tr>
<tr>
<td>🕟 <code>:clock430:</code></td>
<td>🕔 <code>:clock5:</code></td>
<td>🕠 <code>:clock530:</code></td>
</tr>
<tr>
<td>🕕 <code>:clock6:</code></td>
<td>🕡 <code>:clock630:</code></td>
<td>🕖 <code>:clock7:</code></td>
</tr>
<tr>
<td>🕢 <code>:clock730:</code></td>
<td>🕗 <code>:clock8:</code></td>
<td>🕣 <code>:clock830:</code></td>
</tr>
<tr>
<td>🕘 <code>:clock9:</code></td>
<td>🕤 <code>:clock930:</code></td>
<td>💲 <code>:heavy_dollar_sign:</code></td>
</tr>
<tr>
<td>©️ <code>:copyright:</code></td>
<td>®️ <code>:registered:</code></td>
<td>™️ <code>:tm:</code></td>
</tr>
<tr>
<td>❌ <code>:x:</code></td>
<td>❗ <code>:heavy_exclamation_mark:</code></td>
<td>‼️ <code>:bangbang:</code></td>
</tr>
<tr>
<td>⁉️ <code>:interrobang:</code></td>
<td>⭕ <code>:o:</code></td>
<td>✖️ <code>:heavy_multiplication_x:</code></td>
</tr>
<tr>
<td>➕ <code>:heavy_plus_sign:</code></td>
<td>➖ <code>:heavy_minus_sign:</code></td>
<td>➗ <code>:heavy_division_sign:</code></td>
</tr>
<tr>
<td>💮 <code>:white_flower:</code></td>
<td>💯 <code>:100:</code></td>
<td>✔️ <code>:heavy_check_mark:</code></td>
</tr>
<tr>
<td>☑️ <code>:ballot_box_with_check:</code></td>
<td>🔘 <code>:radio_button:</code></td>
<td>🔗 <code>:link:</code></td>
</tr>
<tr>
<td>➰ <code>:curly_loop:</code></td>
<td>〰️ <code>:wavy_dash:</code></td>
<td>〽️ <code>:part_alternation_mark:</code></td>
</tr>
<tr>
<td>🔱 <code>:trident:</code></td>
<td>:black_square: <code>:black_square:</code></td>
<td>:white_square: <code>:white_square:</code></td>
</tr>
<tr>
<td>✅ <code>:white_check_mark:</code></td>
<td>🔲 <code>:black_square_button:</code></td>
<td>🔳 <code>:white_square_button:</code></td>
</tr>
<tr>
<td>⚫ <code>:black_circle:</code></td>
<td>⚪ <code>:white_circle:</code></td>
<td>🔴 <code>:red_circle:</code></td>
</tr>
<tr>
<td>🔵 <code>:large_blue_circle:</code></td>
<td>🔷 <code>:large_blue_diamond:</code></td>
<td>🔶 <code>:large_orange_diamond:</code></td>
</tr>
<tr>
<td>🔹 <code>:small_blue_diamond:</code></td>
<td>🔸 <code>:small_orange_diamond:</code></td>
<td>🔺 <code>:small_red_triangle:</code></td>
</tr>
<tr>
<td>🔻 <code>:small_red_triangle_down:</code></td>
<td>:shipit: <code>:shipit:</code></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot自动配置原理</title>
    <url>/2025/09/15/spring%20boot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="spring-boot自动配置原理">spring boot自动配置原理</h2>
<ol>
<li>
<p><strong>导入场景</strong>：导入依赖和bean对象</p>
</li>
<li>
<p><strong>默认的扫描包规则</strong></p>
<p><code>@SpringBootApplication(scanBeanPackages=&quot;online.zorange&quot;)</code></p>
<p>默认扫描启动类所在的包，以及子包</p>
</li>
<li>
<p><strong>绑定配置</strong></p>
<p>配置文件的配置项和java类的对象进行一一绑定</p>
</li>
<li>
<p><strong>按需加载自动配置</strong></p>
<ol>
<li>
<p>spring.boot.autoconfiguration 在spting-boot-start包中，它包含各种技术的配置类，来生产对应技术bean对象。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/image-20240816150132987.png" alt="image-20240816150132987"></p>
</li>
<li>
<p>导入哪个场景就开启哪个自动配置,如果没有引入对应技术的场景启动器，则不会引入。</p>
</li>
<li>
<p>SpringBootApplication在启动时会，拿到所有技术的XXXautoconfiguration.class【spi技术】【META-INF/spring/org.springframework.boot.autoconfiqure.AutoConfiguration.imports里面的技术】。只有在引入对应的启动器，才会加载，并不会直接全部加载。</p>
</li>
<li>
<p>@SpringBootApplication—&gt;</p>
<ol>
<li>
<pre><code class="language-java">@SpringBootConfiguration
@EnableAutoConfiguration  //自动配置的开关
@ComponentScan
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">      2. 每一个自动配置类都有一个条件注解ConditioOnXXX,只有返回true才生效</span><br><span class="line"></span><br><span class="line">      3. 每一个自动配置类都有@ConfigurationXXXProperties，来加载配置文件中，对应技术的配置项。</span><br><span class="line"></span><br><span class="line">### spring boot自动配置的理解</span><br><span class="line"></span><br><span class="line">#### @SpringBootApplication注解</span><br><span class="line"></span><br><span class="line">包含三个注解：</span><br><span class="line"></span><br><span class="line">1. `@SpringBootConfiguration`</span><br><span class="line"></span><br><span class="line">2. `@EnableAutoConfiguration`</span><br><span class="line"></span><br><span class="line">3. `@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">   @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)`</span><br><span class="line"></span><br><span class="line">#### @SpringBootConfiguration</span><br><span class="line"></span><br><span class="line">这个注解就是代表这是一个springboot的配置类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### @EnableAutoConfiguration</span><br><span class="line"></span><br><span class="line">注解里面的两个注解</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>@AutoConfigurationPackage<br>
@Import({AutoConfigurationImportSelector.class})</p>
<pre><code>
 1. **@AutoConfigurationPackage**

    默认扫描启动类所在的包，以及子包

    

 2. **@Import(&#123;AutoConfigurationImportSelector.class&#125;)**

 3. 开启==自动配置的核心==，批量导入配置类

 4. 默认加载142个配置类  -&gt;  来源于  `spring-boot-autoConfiguration` 包下的MATE-`INFO/spring/org.springframework.boot.autoconfigure.AutoConfiguration**.imports`文件里面

 5. 在项目启动时，则利用`@Import(&#123;AutoConfigurationImportSelector.class&#125;)`将`autoconfigration`包下的`XXXAutoConfiguration`的142个配置类导入

 6. 虽然导了142个配置类：

    但是这写配置类并不会全部生效，`AutoConfigurationImportSelector`根据条件注解`@ConditionlOnXXX`,只有条件成立时才导入

##### XXXAutoConfiguration

1. 用于配置第三方技术的`bean`。@Bean

2. 如果需要用到配置文件。则会有`@EnableConfigurationProperties(**ServerProperties**.class)`注解，用于把配置文件中指定前缀的的值封装到xxxProperties的类的属性中。

   以jbdc为例，`@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)`所有以spring.datasource为前缀的都封装到了属性类中。

3. 只需要修改核心配置文件，就能更改组件中的核心参数的值



##### 核心流程总结

1、导入`starter`，就会导入`autoconfigure`包。

2、`autoconfigure` 包里面 有一个文件 `META-INF/spring/**org.springframework.boot.autoconfigure.AutoConfiguration**.imports`,里面指定的所有启动要加载的自动配置类

3、@EnableAutoConfiguration 会自动的把上面文件里面写的所有**自动配置类都导入进来。xxxAutoConfiguration 是有条件注解进行按需加载**

4、`xxxAutoConfiguration`给容器中导入一堆组件，组件都是从 `xxxProperties`中提取属性值

5、`xxxProperties`又是和**配置文件**进行了绑定

**效果：**导入`starter`、修改配置文件，就能修改底层行为。



#### @ComponentScan

1. `TypeExcludeFilter`
   - 通常由程序员自定义，用于排除特定类型的组件。
2. `AutoConfigurationExcludeFilter`
   - 由 Spring Boot 提供，用于排除那些已经被自动配置机制处理过的组件。
   - 如果已经被自动配置机制处理了，那么配置类就不会生效了。</code></pre>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>spring 监听器</title>
    <url>/2025/09/15/spring%20%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    <content><![CDATA[<h2 id="实现方式">实现方式:</h2>
<p>1️⃣ Spring 框架自带的ApplicationListener</p>
<p>2️⃣ 使用Spring Boot 框架封装的SpringApplicationRunListener</p>
<h2 id="具体使用流程">具体使用流程:</h2>
<h3 id="1-ApplicationListener">1. ApplicationListener</h3>
<p>用于监听 Spring 应用上下文事件的机制。通过实现 <code>ApplicationListener</code> 接口，你可以在应用启动、停止等生命周期事件发生时执行特定的逻辑</p>
<p>常见事件: ContextRefreshedEvent 和 ContextClosedEvent  \ ApplicationStartedEvent</p>
<table>
<thead>
<tr>
<th>事件类型</th>
<th>触发时机</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>ApplicationStartedEvent</code></strong></td>
<td>应用启动时（<code>SpringApplication.run()</code>）</td>
<td>记录启动日志、监控启动过程</td>
</tr>
<tr>
<td><strong><code>ApplicationEnvironmentPreparedEvent</code></strong></td>
<td><code>Environment</code> 初始化后，<code>ApplicationContext</code> 启动前</td>
<td>修改环境变量、添加配置源</td>
</tr>
<tr>
<td><strong><code>ApplicationContextInitializedEvent</code></strong></td>
<td><code>ApplicationContext</code> 初始化后</td>
<td>进行应用上下文初始化操作</td>
</tr>
<tr>
<td><strong><code>ApplicationPreparedEvent</code></strong></td>
<td><code>ApplicationContext</code> 完全加载并准备好，但未启动时</td>
<td>初始化资源、执行启动检查</td>
</tr>
<tr>
<td><strong><code>ApplicationReadyEvent</code></strong></td>
<td>应用完全启动并准备好处理请求时</td>
<td>执行应用启动后任务</td>
</tr>
<tr>
<td><strong><code>ApplicationFailedEvent</code></strong></td>
<td>应用启动失败时</td>
<td>记录失败日志、通知监控系统</td>
</tr>
</tbody>
</table>
<h3 id="2-SpringApplicationRunListener">2. SpringApplicationRunListener</h3>
<p>① : 编写一个类型实现ApringApplicationRunListener</p>
<p>② : 重写该接口的7个方法, 每一个方法都有不同的回调时机, 因为布隆过滤器需要使用Redisson, 因此在业务我选择在Started中实现布隆过滤器的初始化</p>
<p>​	7个方法的回调时机:</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>回调时机</th>
<th>用例</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>starting()</code></strong></td>
<td>应用启动开始时</td>
<td>进行初始化、设置启动参数</td>
</tr>
<tr>
<td><strong><code>environmentPrepared()</code></strong></td>
<td>Spring 环境准备好时</td>
<td>修改环境变量、配置源</td>
</tr>
<tr>
<td><strong><code>contextPrepared()</code></strong></td>
<td>Spring 容器准备好时</td>
<td>修改应用上下文、配置 Bean</td>
</tr>
<tr>
<td><strong><code>contextLoaded()</code></strong></td>
<td>Spring 容器完全加载完成时</td>
<td>进一步初始化、配置应用</td>
</tr>
<tr>
<td><strong><code>started()</code></strong></td>
<td>应用已启动但尚未完全准备好接受请求时</td>
<td>启动后任务、外部服务注册</td>
</tr>
<tr>
<td><strong><code>running()</code></strong></td>
<td>应用已完全准备好，已能处理请求时</td>
<td>启动后操作、健康检查等</td>
</tr>
<tr>
<td><strong><code>failed()</code></strong></td>
<td>应用启动失败时</td>
<td>错误日志、通知、恢复操作</td>
</tr>
</tbody>
</table>
<p>这些回调方法使得开发者能够在应用启动过程中精细地控制不同阶段的行为，比如修改配置、注册外</p>
<ul>
<li>
<p><code>starting()</code>：Spring Boot 应用启动前</p>
<p>修改启动参数或环境配置。</p>
<p>打印启动日志。</p>
</li>
<li>
<p><code>environmentPrepared</code>: Spring 应用环境准备好后</p>
<p>修改系统属性或环境变量。</p>
<p>在环境中添加自定义的 <code>PropertySource</code>。</p>
</li>
<li>
<p><code>contextPrepared</code>: Spring 应用上下文准备好后</p>
</li>
<li>
<p><code>contextLoaded</code>: Spring 应用上下文完全加载后,</p>
<p>执行 Bean 初始化后的一些操作。</p>
<p>完成一些额外的初始化工作。</p>
</li>
<li>
<p><code>started</code> : Spring 应用启动后，<code>ApplicationStartedEvent</code> 触发时</p>
</li>
<li>
<p><code>running</code>: Spring 应用完全准备好后，<code>ApplicationReadyEvent</code> 触发时</p>
</li>
<li>
<p><code>failed</code>: Spring 应用启动失败时</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>spring相关注解</title>
    <url>/2025/09/15/spring%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<ol>
<li><strong>IoC</strong> (控制反转) 和 依赖注入</li>
</ol>
<h2 id="Spring-核心注解">Spring 核心注解:</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标记类为 Spring 容器管理的 Bean，其默认的 Bean 名称由类名派生而来。</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这不是一个标准的 Spring 注解。</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 持久层注解</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">// 标记类为一个控制器 Bean。通常用于 Web 层的组件。</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JDK提供的依赖注入注解，默认根据name</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记依赖注入，是 Spring 框架中最常用的依赖注入方式。</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 若一个接口有多个实现类，可以通过指定name来注入</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;name&quot;)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定要扫描的包以发现带有 @Component 等注解的类。</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;online.zorange.define_components&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定属性文件的位置，该文件中包含了配置信息。</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记类为配置类，可以包含一个或多个 @Bean 方法。</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入其他配置文件</span></span><br><span class="line"><span class="meta">@import(&quot;ConfigB.&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">myCondition实现Condition接口，实现match方法，</span></span><br><span class="line"><span class="comment">如果返回为true，则注入bean，如果为false，则不注入</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@conditional(&#123;myCondition.class,....&#125;)</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">// 定义一个 Bean 对象，返回类型即为 Bean 类型。</span></span><br><span class="line"><span class="string">@Bean</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 从配置文件中获取指定属性的值，并将其注入到字段或方法参数中。</span></span><br><span class="line"><span class="string">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br></pre></td></tr></table></figure>
<h2 id="2-AOP-面向切面编程">2. <strong>AOP</strong> (面向切面编程)</h2>
<p>Spring AOP 注解:</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标记类为一个切面，其中包含多个通知（Advice）。</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个切入点表达式，用于匹配目标方法。</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(public int online.zorange.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在方法执行前触发的通知。</span></span><br><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在方法执行后触发的通知。</span></span><br><span class="line"><span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在方法正常返回后触发的通知，可以获取到返回结果。</span></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;pointCut()&quot;, returning = &quot;result&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在方法抛出异常后触发的通知，可以获取到异常对象。</span></span><br><span class="line"><span class="meta">@AfterThrowing(pointcut = &quot;pointCut()&quot;, throwing = &quot;e&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 环绕通知，在方法调用前后都会触发。</span></span><br><span class="line"><span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br></pre></td></tr></table></figure>
<h2 id="3-JUnit-测试">3. <strong>JUnit 测试</strong></h2>
<p>Spring 测试注解:</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置 Spring 测试上下文，指定 Spring 配置文件的位置。</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:JDBCTemplate.xml&quot;)</span></span><br></pre></td></tr></table></figure>
<h2 id="4-事务管理">4. <strong>事务管理</strong></h2>
<p>Spring 事务管理注解:</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于标记方法需要开启事务管理。</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br></pre></td></tr></table></figure>
<h2 id="5-Spring-MVC">5. <strong>Spring-MVC</strong></h2>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 为每个方法默认加上@ResponseBody注解</span></span><br><span class="line"> <span class="meta">@RestController</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 将后端对象转为json对象</span></span><br><span class="line"> <span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="comment">// 将前端json转为后端对象</span></span><br><span class="line"> <span class="meta">@RequestBody</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 设置资源路径</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/hello&quot;,method=RequestMethod[].class)</span></span><br><span class="line"> <span class="comment">// 获取请求头中的数据</span></span><br><span class="line"> <span class="meta">@RequestHeader(value=&quot;&quot;,requier=&quot;&quot;)</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 获取请求头中的cookie</span></span><br><span class="line"> <span class="meta">@CookieValue(value=&quot;&quot;)</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 接收Param参数,</span></span><br><span class="line"> <span class="meta">@RequestParam(value=&quot;name&quot;,required=&quot;true&quot;,defaultValue=&quot;orange&quot;)</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 接收路径中的参数，将路径占位符绑定到目标方法的参数上</span></span><br><span class="line"> <span class="comment">//value、require</span></span><br><span class="line"> <span class="meta">@PathVariable(&quot;id&quot;)</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 接收请求体中的参数 json</span></span><br><span class="line"> <span class="meta">@RequestBody(&quot;name&quot;)</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 默认指定方法的资源路径注解 RESTFul f</span></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/&quot;)</span>  <span class="meta">@PostMapping(&quot;/&quot;)</span>  <span class="meta">@Put</span>- <span class="meta">@Delete</span>- <span class="meta">@Update</span>- </span><br><span class="line">     </span><br><span class="line"> <span class="comment">// 解决跨域w</span></span><br><span class="line"> <span class="meta">@CrossOrigin</span></span><br><span class="line">    </span><br><span class="line">     </span><br><span class="line"> <span class="comment">// 参数校验</span></span><br><span class="line"> <span class="meta">@Validated</span>   <span class="comment">//BindingResult result 接收校验结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取cookie</span></span><br><span class="line"><span class="meta">@CookieValue</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>异常处理</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 控制器通知</span></span><br><span class="line"> <span class="meta">@RestControllerAdvice</span></span><br><span class="line"> <span class="comment">// 处理的异常类型</span></span><br><span class="line"> <span class="meta">@ExceptionHandler(ServiceException.class)</span></span><br><span class="line"><span class="comment">//抛出异常（类似Throws ）且在出口不用处理</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br></pre></td></tr></table></figure>
<h2 id="spring-cloud-注解">spring cloud 注解</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@LoadBalanced</span>   <span class="comment">//让Resttmplate具有负载均衡的能力</span></span><br><span class="line"><span class="comment">// 将负载均衡算法应用到指定的服务提供方中</span></span><br><span class="line"><span class="meta">@LoadBalancerClients(value = @LoadBalancerClient(name = &quot;spzx-cloud-user&quot;, configuration = CustomLoadBalancerConfiguration.class))</span></span><br><span class="line"><span class="meta">@RefreshScope</span>  <span class="comment">// 刷新@Value映射的值</span></span><br><span class="line"><span class="meta">@SentienlResorce</span>  <span class="comment">//定义资源名称</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;spzx-cloud-user&quot;,path = &quot;/user&quot;,fallback = UserFeignFallback.class)</span> <span class="comment">//注册Feign接口和降级类</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span>  <span class="comment">//微服务监控图像界面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;one&quot;)</span>   <span class="comment">//设置Rabbitmq监听队列</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">            value = @Queue(value = &quot;direct_queue_02&quot; , durable = &quot;true&quot;) ,</span></span><br><span class="line"><span class="meta">            exchange = @Exchange(value = &quot;direct_exchange&quot; , durable = &quot;true&quot; , type = ExchangeTypes.DIRECT) ,</span></span><br><span class="line"><span class="meta">            key = &#123; &quot;error&quot; , &quot;info&quot;&#125;</span></span><br><span class="line"><span class="meta">    ))</span>    <span class="comment">// 在消费方，定义队列，交换机以及绑定关系</span></span><br><span class="line">		</span><br><span class="line">	<span class="comment">// OpenFeign远程调用默认为json数据，使用这个注解将json解析为普通数据</span></span><br><span class="line">	<span class="meta">@SpringQueryMap</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>ssm</title>
    <url>/2025/09/15/ssm/</url>
    <content><![CDATA[<h2 id="SSM整合">SSM整合</h2>
<p>spring + spring mvc + mybatis</p>
<p>spring ：整合型/设计型</p>
<p>spring mvc : 控制层</p>
<p>mybatis：持久层</p>
<ol>
<li>涉及 的ioc容器：spring mvc+ spring 的容器</li>
<li>关系：父子关系</li>
<li>子容器可以访问父容器的bean，但是父容器不能访问子容器的bean</li>
<li>在ServletContextLinsliner中获取Spring ioc容器</li>
</ol>
<table>
<thead>
<tr>
<th>配置名</th>
<th>对应内容</th>
<th>对应容器</th>
</tr>
</thead>
<tbody>
<tr>
<td>spring-mvc.xml</td>
<td>controller,springmvc相关</td>
<td>web容器</td>
</tr>
<tr>
<td>spring-service.xml</td>
<td>service,aop,tx相关</td>
<td>root容器</td>
</tr>
<tr>
<td>spring-mapper.xml</td>
<td>mapper,datasource,mybatis相关</td>
<td>root容器</td>
</tr>
</tbody>
</table>
<p>配置spring的ioc配置。让DipatcherServelet在初始化时，加载spring ioc的容器作为父容器，ContextLoaderListener会在服务器启动时运行。</p>
<h3 id="三个spring配置文件">三个spring配置文件:</h3>
<ol>
<li>
<p><code>spring-service.xml </code>      spring-ioc  父容器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;online.zorange&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.web.bind.annotation.RestController&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.name&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>spring-mvc.xml </code>           spring-mvc的ioc容器，管理controller</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;online.zorange.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>web.xml </code>   配置DispacherServelet</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring MVC的DispatcherServlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定servlet的名称为&quot;spring-mvc&quot; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring-mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定servlet的类为Spring的DispatcherServlet --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置DispatcherServlet的初始化参数，指定Spring MVC配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定该servlet在web应用启动时即加载和创建，优先级为1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射servlet名称&quot;spring-mvc&quot;到所有请求的URL模式&quot;/&quot; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring-mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置应用上下文的初始化参数，指定Spring服务层配置文件的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-service.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册Spring的监听器，用于在应用启动时加载Spring应用上下文 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>spring-mapper.xml </code>     spring整合MyBatis的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置配置文件位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置映射文件位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*Mapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;online.zorange.entity&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    设置Mapper扫描的包名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;online.zorange.mapper&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>mybati-config.xml  </code>      mybatis的核心配置文件，可以通过整合配置文件来配置，两个一起配置也可以。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入jdbc.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将xxx_xxx这样的列名自动映射到xxXxx这样驼峰式命名的属性名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启resultMap自动映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;FULL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        设置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;online.zorange.entity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>ssh</title>
    <url>/2025/09/15/ssh/</url>
    <content><![CDATA[<h1>Linux 安装 Git + 生成 SSH 公钥 + 配置公钥 + 自定义 SSH 名称连接服务器教程</h1>
<h2 id="1-安装-Git">1. 安装 Git</h2>
<p>大部分 Linux 发行版默认自带 Git，如果没有，执行下面命令安装：</p>
<h3 id="Debian-Ubuntu-系统：">Debian/Ubuntu 系统：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git -y</span><br></pre></td></tr></table></figure>
<h3 id="CentOS-RHEL-系统：">CentOS/RHEL 系统：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install git -y</span><br></pre></td></tr></table></figure>
<h3 id="Fedora-系统：">Fedora 系统：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dnf install git -y</span><br></pre></td></tr></table></figure>
<p>安装完成后，验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="2-生成-SSH-公钥和私钥">2. 生成 SSH 公钥和私钥</h2>
<p>执行以下命令，生成 SSH 密钥对：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>-t rsa</code> 表示使用 RSA 算法</li>
<li><code>-b 4096</code> 表示密钥长度 4096 位（更安全）</li>
<li><code>-C</code> 添加注释，一般填写邮箱</li>
</ul>
<p>过程示例：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/youruser/.ssh/id_rsa):  # 直接回车即可使用默认路径，或者自定义路径</span><br><span class="line">Enter passphrase (empty for no passphrase):  # 建议设置密码，增加安全性，也可以直接回车跳过</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /home/youruser/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/youruser/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="3-将公钥内容添加到服务器">3. 将公钥内容添加到服务器</h2>
<h3 id="3-1-查看公钥内容">3.1 查看公钥内容</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>复制输出的内容（以 <code>ssh-rsa</code> 开头，末尾带注释）。</p>
<hr>
<h3 id="3-2-登录目标服务器（比如通过密码登录）">3.2 登录目标服务器（比如通过密码登录）</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh user@server_ip</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3-3-添加公钥到服务器">3.3 添加公钥到服务器</h3>
<p>执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.ssh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;复制的公钥内容&quot;</span> &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh</span><br><span class="line"><span class="built_in">chmod</span> 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>这样就授权了本地机器的公钥登录服务器。</p>
<hr>
<h2 id="4-配置-SSH-客户端的自定义连接名称（别名）">4. 配置 SSH 客户端的自定义连接名称（别名）</h2>
<p>编辑本地机器的 SSH 配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure>
<p>添加如下内容：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Host myserver</span><br><span class="line">    HostName server_ip_or_domain</span><br><span class="line">    User your_server_username</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    Port 22  # 如果服务器 SSH 端口不是22，请改成对应端口</span><br></pre></td></tr></table></figure>
<p>保存退出。</p>
<hr>
<h2 id="5-使用自定义名称连接服务器">5. 使用自定义名称连接服务器</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh myserver</span><br></pre></td></tr></table></figure>
<p>这时 SSH 会自动使用配置的用户名、IP、密钥和端口连接。</p>
<hr>
<h2 id="6-测试-SSH-连接是否成功">6. 测试 SSH 连接是否成功</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>如果你是为了使用 Git 连接 GitHub，也可以测试：</p>
<ul>
<li>如果提示 <code>You've successfully authenticated</code>，说明 SSH 配置成功。</li>
</ul>
<hr>
<h1>总结</h1>
<table>
<thead>
<tr>
<th>步骤</th>
<th>命令示例或说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>安装 Git</td>
<td><code>sudo apt install git -y</code></td>
</tr>
<tr>
<td>生成密钥</td>
<td><code>ssh-keygen -t rsa -b 4096 -C &quot;email&quot;</code></td>
</tr>
<tr>
<td>查看公钥</td>
<td><code>cat ~/.ssh/id_rsa.pub</code></td>
</tr>
<tr>
<td>登录服务器</td>
<td><code>ssh user@server_ip</code></td>
</tr>
<tr>
<td>添加公钥</td>
<td><code>echo &quot;公钥内容&quot; &gt;&gt; ~/.ssh/authorized_keys</code></td>
</tr>
<tr>
<td>配置别名</td>
<td>编辑 <code>~/.ssh/config</code> 文件</td>
</tr>
<tr>
<td>用别名连接</td>
<td><code>ssh myserver</code></td>
</tr>
</tbody>
</table>
<hr>
<h1>自动化脚本</h1>
<ul>
<li>检查并安装 Git（适配 Debian/Ubuntu）</li>
<li>生成 SSH 密钥（默认路径，带注释邮箱）</li>
<li>显示公钥内容，方便复制</li>
<li>提示你手动登录服务器，把公钥加到服务器 <code>~/.ssh/authorized_keys</code></li>
<li>帮你配置本地 <code>~/.ssh/config</code> 里的 SSH 连接别名</li>
</ul>
<hr>
<h1>自动化脚本（假设你用的是 Debian/Ubuntu）</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置参数：修改成你自己的邮箱，服务器IP，用户名，SSH端口和别名</span></span><br><span class="line">EMAIL=<span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line">SERVER_IP=<span class="string">&quot;your.server.ip&quot;</span></span><br><span class="line">SERVER_USER=<span class="string">&quot;youruser&quot;</span></span><br><span class="line">SSH_PORT=22</span><br><span class="line">SSH_ALIAS=<span class="string">&quot;myserver&quot;</span></span><br><span class="line">KEY_PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.ssh/id_rsa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 安装 git</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检查 Git 是否安装...&quot;</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">command</span> -v git &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Git 未安装，开始安装 Git...&quot;</span></span><br><span class="line">    sudo apt update</span><br><span class="line">    sudo apt install git -y</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Git 已安装，版本：<span class="subst">$(git --version)</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 生成 SSH 密钥</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$KEY_PATH</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;检测到已有 SSH 密钥：<span class="variable">$KEY_PATH</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;生成新的 SSH 密钥...&quot;</span></span><br><span class="line">    ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;<span class="variable">$EMAIL</span>&quot;</span> -f <span class="string">&quot;<span class="variable">$KEY_PATH</span>&quot;</span> -N <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;SSH 密钥生成成功。&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 显示公钥，提醒复制</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请复制下面的公钥内容：&quot;</span></span><br><span class="line"><span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$&#123;KEY_PATH&#125;</span>.pub&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;请使用你的密码登录服务器，把上面公钥内容追加到 ~/.ssh/authorized_keys 文件里。&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;示例：&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ssh <span class="variable">$SERVER_USER</span>@<span class="variable">$SERVER_IP</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mkdir -p ~/.ssh &amp;&amp; echo &#x27;你的公钥内容&#x27; &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys&quot;</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 配置 SSH 别名</span></span><br><span class="line">CONFIG_FILE=<span class="string">&quot;<span class="variable">$HOME</span>/.ssh/config&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;开始配置 SSH 别名：<span class="variable">$SSH_ALIAS</span> 到 <span class="variable">$CONFIG_FILE</span> ...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断 config 文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$CONFIG_FILE</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">touch</span> <span class="string">&quot;<span class="variable">$CONFIG_FILE</span>&quot;</span></span><br><span class="line">    <span class="built_in">chmod</span> 600 <span class="string">&quot;<span class="variable">$CONFIG_FILE</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查别名是否已存在</span></span><br><span class="line"><span class="keyword">if</span> grep -q <span class="string">&quot;Host <span class="variable">$SSH_ALIAS</span>&quot;</span> <span class="string">&quot;<span class="variable">$CONFIG_FILE</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;SSH 别名 <span class="variable">$SSH_ALIAS</span> 已存在，跳过写入。&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cat</span> &gt;&gt; <span class="string">&quot;<span class="variable">$CONFIG_FILE</span>&quot;</span> &lt;&lt;<span class="string">EOL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Host $SSH_ALIAS</span></span><br><span class="line"><span class="string">    HostName $SERVER_IP</span></span><br><span class="line"><span class="string">    User $SERVER_USER</span></span><br><span class="line"><span class="string">    Port $SSH_PORT</span></span><br><span class="line"><span class="string">    IdentityFile $KEY_PATH</span></span><br><span class="line"><span class="string">EOL</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;SSH 别名配置完成。&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你可以用下面命令测试连接：&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ssh <span class="variable">$SSH_ALIAS</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h1>使用步骤</h1>
<ol>
<li>
<p>将上面脚本保存为 <code>setup_ssh_git.sh</code></p>
</li>
<li>
<p>修改脚本顶部的参数：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EMAIL=<span class="string">&quot;你的邮箱&quot;</span></span><br><span class="line">SERVER_IP=<span class="string">&quot;服务器IP&quot;</span></span><br><span class="line">SERVER_USER=<span class="string">&quot;服务器用户名&quot;</span></span><br><span class="line">SSH_PORT=22 <span class="comment"># 如果不是22，改成你的端口</span></span><br><span class="line">SSH_ALIAS=<span class="string">&quot;你想起的别名&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>给予执行权限并运行：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x setup_ssh_git.sh</span><br><span class="line">./setup_ssh_git.sh</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>
<p>根据脚本提示，复制公钥内容，登录服务器，追加到 <code>~/.ssh/authorized_keys</code></p>
</li>
<li>
<p>用命令 <code>ssh myserver</code>（或者你配置的别名）连接服务器</p>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>swap</title>
    <url>/2025/09/15/swap/</url>
    <content><![CDATA[<h1>swap</h1>
<hr>
<h1>📚 Linux 创建 swap 详细指南</h1>
<blockquote>
<p>⚙ 适用系统：</p>
<ul>
<li>CentOS / RHEL / Rocky / AlmaLinux</li>
<li>Ubuntu / Debian</li>
</ul>
</blockquote>
<hr>
<h2 id="1️⃣-查看当前-swap-情况">1️⃣ 查看当前 swap 情况</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 swap 总体使用情况</span></span><br><span class="line">free -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 swap 设备列表</span></span><br><span class="line">swapon -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看详细</span></span><br><span class="line"><span class="built_in">cat</span> /proc/swaps</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="2️⃣-创建-swap-文件">2️⃣ 创建 swap 文件</h2>
<p>这里以 <strong>创建 4G swap 文件</strong> 为例。</p>
<h3 id="➡️-2-1-创建-swap-文件">➡️ 2.1 创建 swap 文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 /swapfile 创建大小为 4G 的 swap 文件</span></span><br><span class="line">sudo fallocate -l 4G /swapfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 fallocate 不可用，可使用 dd (更兼容)</span></span><br><span class="line"><span class="comment"># sudo dd if=/dev/zero of=/swapfile bs=1M count=4096</span></span><br></pre></td></tr></table></figure>
<h3 id="➡️-2-2-修改权限">➡️ 2.2 修改权限</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 600 /swapfile</span><br></pre></td></tr></table></figure>
<h3 id="➡️-2-3-设置为-swap-格式">➡️ 2.3 设置为 swap 格式</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkswap /swapfile</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="3️⃣-启用-swap">3️⃣ 启用 swap</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo swapon /swapfile</span><br></pre></td></tr></table></figure>
<p>验证是否生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swapon -s</span><br><span class="line">free -h</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="4️⃣-开机自动挂载">4️⃣ 开机自动挂载</h2>
<p>编辑 <code>/etc/fstab</code>，添加一行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/fstab</span><br></pre></td></tr></table></figure>
<p>在文件末尾添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/swapfile swap swap defaults 0 0</span><br></pre></td></tr></table></figure>
<p>然后测试是否能正常挂载（避免下次重启失败）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount -a</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="5️⃣-调整-swap-使用频率（swappiness）">5️⃣ 调整 swap 使用频率（swappiness）</h2>
<p>swappiness 表示系统使用 swap 的倾向：</p>
<ul>
<li><strong>0</strong> 表示尽可能避免使用 swap（几乎用完物理内存才用）。</li>
<li><strong>100</strong> 表示尽量使用 swap。</li>
</ul>
<p>通常设置为 <strong>10-20</strong> 性能较好。</p>
<h3 id="➡️-5-1-临时修改">➡️ 5.1 临时修改</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl vm.swappiness=10</span><br></pre></td></tr></table></figure>
<p>立即生效，但重启失效。</p>
<h3 id="➡️-5-2-永久修改">➡️ 5.2 永久修改</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<p>添加一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.swappiness=10</span><br></pre></td></tr></table></figure>
<p>然后执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="6️⃣-扩展-swap-大小">6️⃣ 扩展 swap 大小</h2>
<p>如果原 swap 不够，可以新增 swap 文件，或删除原文件重新创建。</p>
<h3 id="➡️-6-1-删除旧-swap（若需要）">➡️ 6.1 删除旧 swap（若需要）</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo swapoff /swapfile</span><br><span class="line">sudo <span class="built_in">rm</span> -f /swapfile</span><br></pre></td></tr></table></figure>
<p>然后重新按上面步骤再创建更大的 swap 文件。</p>
<hr>
<h2 id="7️⃣-额外优化：设置-cache-pressure">7️⃣ 额外优化：设置 cache pressure</h2>
<p><code>vm.vfs_cache_pressure</code> 决定了内核多积极释放 inode/dentry 缓存。默认是 100。</p>
<p>可以适当调低到 50：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl vm.vfs_cache_pressure=50</span><br></pre></td></tr></table></figure>
<p>永久：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<p>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.vfs_cache_pressure=50</span><br></pre></td></tr></table></figure>
<p>然后：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure>
<hr>
<h1>✅ 完整快速脚本示例</h1>
<p>如果想一键执行，可用下面脚本（以 4G，swappiness=10 为例）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fallocate -l 4G /swapfile</span><br><span class="line">sudo <span class="built_in">chmod</span> 600 /swapfile</span><br><span class="line">sudo mkswap /swapfile</span><br><span class="line">sudo swapon /swapfile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/swapfile swap swap defaults 0 0&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/fstab</span><br><span class="line">sudo sysctl vm.swappiness=10</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;vm.swappiness=10&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure>
<hr>
<h1>🎯 小结：常用命令表</h1>
<table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>查看 swap</td>
<td><code>free -h</code> / <code>swapon -s</code></td>
</tr>
<tr>
<td>创建 swap 文件</td>
<td><code>fallocate -l 4G /swapfile</code></td>
</tr>
<tr>
<td>权限、格式化、启用</td>
<td><code>chmod 600 /swapfile &amp;&amp; mkswap /swapfile &amp;&amp; swapon /swapfile</code></td>
</tr>
<tr>
<td>设置开机挂载</td>
<td><code>/etc/fstab</code> 中添加 <code>/swapfile swap swap defaults 0 0</code></td>
</tr>
<tr>
<td>修改 swappiness</td>
<td><code>sysctl vm.swappiness=10</code></td>
</tr>
<tr>
<td>永久 swappiness</td>
<td><code>/etc/sysctl.conf</code> 中添加 <code>vm.swappiness=10</code></td>
</tr>
<tr>
<td>移除 swap</td>
<td><code>swapoff /swapfile &amp;&amp; rm /swapfile</code></td>
</tr>
</tbody>
</table>
<hr>
<h1>swap脚本</h1>
<hr>
<h2 id="🚀-脚本增强功能">🚀 脚本增强功能</h2>
<p>✅ <strong>自动检测内存大小，决定 swap 大小</strong><br>
✅ <strong>自动检测根分区剩余空间，避免 swap 太大导致磁盘占满</strong><br>
✅ <strong>如需要，会拆分为多个 swap 文件以分摊 I/O</strong><br>
✅ <strong>所有输出写入 <code>/var/log/swap_setup.log</code></strong><br>
✅ <strong>依然自动设置 swappiness 和 cache_pressure，并开机自动挂载</strong></p>
<hr>
<h2 id="📜-完整脚本-auto-swap-sh">📜 完整脚本 <code>auto_swap.sh</code></h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># ===============================================</span></span><br><span class="line"><span class="comment"># 自动根据内存和磁盘空间配置 swap</span></span><br><span class="line"><span class="comment"># 支持多 swap 文件分摊 IO，并写日志到 /var/log/swap_setup.log</span></span><br><span class="line"><span class="comment"># ===============================================</span></span><br><span class="line"></span><br><span class="line">log_file=<span class="string">&quot;/var/log/swap_setup.log&quot;</span></span><br><span class="line"><span class="built_in">exec</span> &gt; &gt;(<span class="built_in">tee</span> -a <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span>) 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;====== <span class="subst">$(date &#x27;+%F %T&#x27;)</span> Starting swap setup ======&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 获取总内存(MB)</span></span><br><span class="line">mem_total=$(grep MemTotal /proc/meminfo | awk <span class="string">&#x27;&#123;print int($2/1024)&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Detected memory: <span class="variable">$&#123;mem_total&#125;</span> MB&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 根据内存大小决定 swap 大小</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$mem_total</span>&quot;</span> -lt 2048 ]; <span class="keyword">then</span></span><br><span class="line">    swap_target=2048</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$mem_total</span>&quot;</span> -lt 8192 ]; <span class="keyword">then</span></span><br><span class="line">    swap_target=<span class="variable">$mem_total</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    swap_target=4096</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Initial calculated swap target: <span class="variable">$&#123;swap_target&#125;</span> MB&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 检查根挂载点剩余空间</span></span><br><span class="line">root_avail=$(<span class="built_in">df</span> --output=avail / | <span class="built_in">tail</span> -1 | awk <span class="string">&#x27;&#123;print int($1/1024)&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Available disk space on / : <span class="variable">$&#123;root_avail&#125;</span> MB&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 swap 大于剩余空间的80%，调整</span></span><br><span class="line">max_swap=$((root_avail * <span class="number">80</span> / <span class="number">100</span>))</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$swap_target</span>&quot;</span> -gt <span class="string">&quot;<span class="variable">$max_swap</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    swap_target=<span class="variable">$max_swap</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Adjusted swap to <span class="variable">$&#123;swap_target&#125;</span> MB to fit disk capacity (80%).&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 如果还有老 swapfile，先移除</span></span><br><span class="line"><span class="keyword">if</span> swapon --summary | grep -q <span class="string">&#x27;/swapfile&#x27;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Existing /swapfile found, turning off swap.&quot;</span></span><br><span class="line">    sudo swapoff /swapfile</span><br><span class="line">    sudo <span class="built_in">rm</span> -f /swapfile</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 删除多 swap 文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..4&#125;; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/swapfile<span class="variable">$i</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        sudo swapoff <span class="string">&quot;/swapfile<span class="variable">$i</span>&quot;</span></span><br><span class="line">        sudo <span class="built_in">rm</span> -f <span class="string">&quot;/swapfile<span class="variable">$i</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 多 swap 文件分摊 IO</span></span><br><span class="line"><span class="comment"># 比如 如果 swap_target &gt; 2GB，则分 2 个 swap 文件</span></span><br><span class="line">files=1</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$swap_target</span>&quot;</span> -gt 2048 ]; <span class="keyword">then</span></span><br><span class="line">    files=2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">per_file=$((swap_target / files))</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Will create <span class="variable">$files</span> swap files, each ~<span class="variable">$&#123;per_file&#125;</span> MB&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 <span class="variable">$files</span>); <span class="keyword">do</span></span><br><span class="line">    swapfile=<span class="string">&quot;/swapfile<span class="variable">$i</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Creating <span class="variable">$swapfile</span> of size <span class="variable">$&#123;per_file&#125;</span> MB&quot;</span></span><br><span class="line">    sudo fallocate -l <span class="variable">$&#123;per_file&#125;</span>M <span class="string">&quot;<span class="variable">$swapfile</span>&quot;</span> || sudo <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=<span class="string">&quot;<span class="variable">$swapfile</span>&quot;</span> bs=1M count=<span class="variable">$per_file</span></span><br><span class="line">    sudo <span class="built_in">chmod</span> 600 <span class="string">&quot;<span class="variable">$swapfile</span>&quot;</span></span><br><span class="line">    sudo mkswap <span class="string">&quot;<span class="variable">$swapfile</span>&quot;</span></span><br><span class="line">    sudo swapon <span class="string">&quot;<span class="variable">$swapfile</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ! grep -q <span class="string">&quot;<span class="variable">$swapfile</span>&quot;</span> /etc/fstab; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$swapfile</span> swap swap defaults 0 0&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/fstab</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果只有 1 个文件，命名为 /swapfile</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$files</span>&quot;</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mv</span> <span class="string">&quot;/swapfile1&quot;</span> <span class="string">&quot;/swapfile&quot;</span></span><br><span class="line">    sed -i <span class="string">&#x27;s|/swapfile1|/swapfile|g&#x27;</span> /etc/fstab</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 调整 swappiness 和 cache pressure</span></span><br><span class="line">sudo sysctl vm.swappiness=10</span><br><span class="line">sudo sysctl vm.vfs_cache_pressure=50</span><br><span class="line">grep -q <span class="string">&#x27;vm.swappiness&#x27;</span> /etc/sysctl.conf || <span class="built_in">echo</span> <span class="string">&#x27;vm.swappiness=10&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line">grep -q <span class="string">&#x27;vm.vfs_cache_pressure&#x27;</span> /etc/sysctl.conf || <span class="built_in">echo</span> <span class="string">&#x27;vm.vfs_cache_pressure=50&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line">sudo sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 最终结果</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;====== Swap setup complete ======&quot;</span></span><br><span class="line">free -h</span><br><span class="line">swapon --show</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;====== <span class="subst">$(date &#x27;+%F %T&#x27;)</span> Swap setup done ======&quot;</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="🚀-使用方式">🚀 使用方式</h2>
<h3 id="1️⃣-保存脚本">1️⃣ 保存脚本</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano auto_swap.sh</span><br></pre></td></tr></table></figure>
<p>粘贴上面的脚本，保存退出。</p>
<hr>
<h3 id="2️⃣-授权执行">2️⃣ 授权执行</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x auto_swap.sh</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3️⃣-运行脚本">3️⃣ 运行脚本</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./auto_swap.sh</span><br></pre></td></tr></table></figure>
<p>执行过程和所有日志都会写入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log/swap_setup.log</span><br></pre></td></tr></table></figure>
<p>你可以随时查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/log/swap_setup.log</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="✅-它的优点">✅ 它的优点</h2>
<ul>
<li><strong>安全</strong>：永远不会占用超过根分区剩余的 80%，避免导致系统无法写入。</li>
<li><strong>智能</strong>：自动决定 swap 大小。</li>
<li><strong>分散 I/O</strong>：大于 2GB 就拆成多个 swap 文件。</li>
<li><strong>自动挂载</strong>：写入 <code>/etc/fstab</code>。</li>
<li><strong>优化参数</strong>：设置 <code>swappiness=10</code>，<code>cache_pressure=50</code>。</li>
<li><strong>可追溯</strong>：所有过程和结果都写到 <code>/var/log/swap_setup.log</code>。</li>
</ul>
<hr>
<p>太棒了！你这个需求非常“专业级”，我们就来搞个 <strong>顶配级自动 swap 管理方案</strong><br>
👇 我会详细拆解成三个部分，并给出完整可执行脚本示例。</p>
<hr>
<h1>🚀 功能一：基于磁盘 I/O 性能自动决定 swap 文件数</h1>
<p>一般 swap 文件越多，可以分摊到不同磁盘/不同 inode，提高并行 IO 性能（虽不如 RAID）。<br>
我们可以：</p>
<ul>
<li>用 <code>dd</code> 或 <code>fio</code> 简单跑个写入测试。</li>
<li>根据 MB/s 速度决定 swap 文件数量。</li>
</ul>
<p>举个简单规则示例：</p>
<ul>
<li>IOPS &lt; 50 MB/s，创建 1 个 swap 文件（避免过多碎片）。</li>
<li>IOPS 50~150 MB/s，创建 2 个 swap 文件。</li>
<li>IOPS &gt; 150 MB/s，创建 3 个 swap 文件。</li>
</ul>
<hr>
<h2 id="🚀-功能二：结合-zram-压缩-swap（基于内存）">🚀 功能二：结合 zram 压缩 swap（基于内存）</h2>
<p>zram 类似在内存里开一个压缩块设备，性能比真实磁盘 swap 高很多（通常 4~10x）。<br>
适合：</p>
<ul>
<li>CPU 比较空闲，内存吃紧时。</li>
<li>做内存“过度承载”，同时减少物理 swap 触发。</li>
</ul>
<hr>
<h2 id="🚀-功能三：cron-定期检查-swap-磁盘">🚀 功能三：cron 定期检查 swap + 磁盘</h2>
<p>自动每天或每小时检测 swap 使用率、I/O load、磁盘可用空间，自动写入日志，并可发邮件或推送。</p>
<hr>
<h1>✅ 现在整合为超完整的方案</h1>
<hr>
<h2 id="📜-完整增强脚本-smart-swap-setup-sh">📜 完整增强脚本 <code>smart_swap_setup.sh</code></h2>
<h3 id="🔥-自动：">🔥 自动：</h3>
<ul>
<li>检测内存</li>
<li>跑 <code>dd</code> 测 I/O</li>
<li>根据速度分配 swap 文件数</li>
<li>启用 zram 压缩 swap</li>
<li>配置 swappiness</li>
<li>写 <code>/etc/fstab</code></li>
<li>输出到 <code>/var/log/swap_manager.log</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># ================================================</span></span><br><span class="line"><span class="comment"># 智能 swap 管理脚本 (内存+磁盘I/O自动化, 多文件, zram 自动检测)</span></span><br><span class="line"><span class="comment"># 日志输出到 /var/log/swap_manager.log</span></span><br><span class="line"><span class="comment"># ================================================</span></span><br><span class="line"></span><br><span class="line">log_file=<span class="string">&quot;/var/log/swap_manager.log&quot;</span></span><br><span class="line"><span class="built_in">exec</span> &gt; &gt;(<span class="built_in">tee</span> -a <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span>) 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;====== <span class="subst">$(date &#x27;+%F %T&#x27;)</span> Starting smart swap setup ======&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 检测内存</span></span><br><span class="line">mem_total=$(grep MemTotal /proc/meminfo | awk <span class="string">&#x27;&#123;print int($2/1024)&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Detected memory: <span class="variable">$&#123;mem_total&#125;</span> MB&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 强制英文运行 dd 测试，避免中文环境匹配失败</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Running IO test with dd...&quot;</span></span><br><span class="line">speed=$(LANG=C <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=test_io.tmp bs=1M count=256 conv=fdatasync 2&gt;&amp;1 | \</span><br><span class="line">    grep -Eo <span class="string">&#x27;[0-9\.]+ (MB/s|MB/秒)&#x27;</span> | awk <span class="string">&#x27;&#123;print int($1)&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">rm</span> -f test_io.tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$speed</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;IO speed detection failed, defaulting to 1 swap file.&quot;</span></span><br><span class="line">    swap_files=1</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$speed</span>&quot;</span> -lt 50 ]; <span class="keyword">then</span></span><br><span class="line">    swap_files=1</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$speed</span>&quot;</span> -lt 150 ]; <span class="keyword">then</span></span><br><span class="line">    swap_files=2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    swap_files=3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Measured disk speed: <span class="variable">$&#123;speed:-N/A&#125;</span> MB/s&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Will create <span class="variable">$&#123;swap_files&#125;</span> swap file(s).&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 根据内存决定 swap 总大小</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$mem_total</span>&quot;</span> -lt 2048 ]; <span class="keyword">then</span></span><br><span class="line">    swap_target=2048</span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$mem_total</span>&quot;</span> -lt 8192 ]; <span class="keyword">then</span></span><br><span class="line">    swap_target=<span class="variable">$mem_total</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    swap_target=4096</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Total swap target: <span class="variable">$&#123;swap_target&#125;</span> MB&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 清理旧 swap</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Cleaning old swap configurations...&quot;</span></span><br><span class="line">sudo swapoff -a</span><br><span class="line">sudo sed -i <span class="string">&#x27;/swapfile/d&#x27;</span> /etc/fstab</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..5&#125;; <span class="keyword">do</span></span><br><span class="line">    [ -f <span class="string">&quot;/swapfile<span class="variable">$i</span>&quot;</span> ] &amp;&amp; sudo <span class="built_in">rm</span> -f <span class="string">&quot;/swapfile<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 分配 swap 文件</span></span><br><span class="line">per_swap=$((swap_target / swap_files))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 <span class="variable">$swap_files</span>); <span class="keyword">do</span></span><br><span class="line">    file=<span class="string">&quot;/swapfile<span class="variable">$i</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Creating <span class="variable">$file</span> of size <span class="variable">$&#123;per_swap&#125;</span> MB&quot;</span></span><br><span class="line">    sudo fallocate -l <span class="variable">$&#123;per_swap&#125;</span>M <span class="string">&quot;<span class="variable">$file</span>&quot;</span> || sudo <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=<span class="string">&quot;<span class="variable">$file</span>&quot;</span> bs=1M count=<span class="variable">$per_swap</span></span><br><span class="line">    sudo <span class="built_in">chmod</span> 600 <span class="string">&quot;<span class="variable">$file</span>&quot;</span></span><br><span class="line">    sudo mkswap <span class="string">&quot;<span class="variable">$file</span>&quot;</span></span><br><span class="line">    sudo swapon <span class="string">&quot;<span class="variable">$file</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span> swap swap defaults 0 0&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/fstab</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 启用 zram 并检测设备数量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Installing zram (if needed)...&quot;</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">command</span> -v zramctl &gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">    sudo apt install -y zram-tools || sudo yum install -y zram</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Loading zram kernel module...&quot;</span></span><br><span class="line">sudo modprobe zram</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算当前系统支持的 zram 数量</span></span><br><span class="line">available_zrams=$(<span class="built_in">ls</span> /sys/block/ | grep zram | <span class="built_in">wc</span> -l)</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$available_zrams</span>&quot;</span> -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;No zram device detected, skipping zram setup.&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Detected <span class="variable">$available_zrams</span> zram device(s)&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 0 $((available_zrams-<span class="number">1</span>))); <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;mem_total&#125;</span>M&quot;</span> | sudo <span class="built_in">tee</span> /sys/block/zram<span class="variable">$&#123;i&#125;</span>/disksize</span><br><span class="line">        sudo mkswap /dev/zram<span class="variable">$&#123;i&#125;</span></span><br><span class="line">        sudo swapon /dev/zram<span class="variable">$&#123;i&#125;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 系统内核优化参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Setting vm.swappiness=10 and vm.vfs_cache_pressure=50&quot;</span></span><br><span class="line">sudo sysctl -w vm.swappiness=10</span><br><span class="line">sudo sysctl -w vm.vfs_cache_pressure=50</span><br><span class="line">grep -q <span class="string">&#x27;vm.swappiness&#x27;</span> /etc/sysctl.conf || <span class="built_in">echo</span> <span class="string">&#x27;vm.swappiness=10&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line">grep -q <span class="string">&#x27;vm.vfs_cache_pressure&#x27;</span> /etc/sysctl.conf || <span class="built_in">echo</span> <span class="string">&#x27;vm.vfs_cache_pressure=50&#x27;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 最终结果展示</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;====== Smart swap setup complete ======&quot;</span></span><br><span class="line">free -h</span><br><span class="line">swapon --show</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="⚙️-使用方式">⚙️ 使用方式</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano smart_swap_setup.sh</span><br><span class="line"><span class="comment"># 粘贴脚本</span></span><br><span class="line"><span class="built_in">chmod</span> +x smart_swap_setup.sh</span><br><span class="line">sudo ./smart_swap_setup.sh</span><br></pre></td></tr></table></figure>
<p>执行后：</p>
<ul>
<li>自动跑 dd 测试</li>
<li>决定 swap 文件数</li>
<li>开启 zram</li>
<li>写 <code>/etc/fstab</code></li>
<li>调整参数</li>
<li>输出到 <code>/var/log/swap_manager.log</code></li>
</ul>
<hr>
<h2 id="🚀-定期-cron-监控-swap-磁盘">🚀 定期 cron 监控 swap + 磁盘</h2>
<p>例如每 1 小时检查，并记录使用情况。</p>
<h3 id="swap-check-sh"><code>swap_check.sh</code></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">log_file=<span class="string">&quot;/var/log/swap_health.log&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;====== <span class="subst">$(date &#x27;+%F %T&#x27;)</span> ======&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Disk usage:&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line"><span class="built_in">df</span> -h &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Swap usage:&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line">free -h &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;IO stat:&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line">iostat -xz 1 3 &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;------------------------------------&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装 <code>sysstat</code> 获取 <code>iostat</code>：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install sysstat</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">sudo yum install sysstat</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="加入-cron">加入 cron</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<p>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 * * * * /bin/bash /path/to/swap_check.sh</span><br></pre></td></tr></table></figure>
<hr>
<h1>🔥 结论：</h1>
<p>✅ <strong>基于磁盘 IO 智能分配 swap 文件数</strong><br>
✅ <strong>结合 zram 高速压缩 swap</strong><br>
✅ <strong>定期 swap &amp; disk 健康检测</strong></p>
<hr>
<h1>swap预警脚本</h1>
<hr>
<h1>🚀 <code>swap_health.sh</code> 支持邮件 &amp; 微信报警</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># ================================================</span></span><br><span class="line"><span class="comment"># swap_health.sh</span></span><br><span class="line"><span class="comment"># 定时检测系统 swap、内存、磁盘使用情况</span></span><br><span class="line"><span class="comment"># 记录日志到 /var/log/swap_health.log</span></span><br><span class="line"><span class="comment"># swap 使用率超过阈值时，自动发送邮件和微信报警</span></span><br><span class="line"><span class="comment"># ================================================</span></span><br><span class="line"></span><br><span class="line">log_file=<span class="string">&quot;/var/log/swap_health.log&quot;</span></span><br><span class="line">threshold_swap_used_percent=70</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 配置你的邮箱和微信推送相关信息 ---</span></span><br><span class="line">EMAIL=<span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 微信推送 URL（企业微信/Server酱等均可）</span></span><br><span class="line"><span class="comment"># 这里示例用 Server酱 https://sct.ftqq.com/ 的推送地址</span></span><br><span class="line">WECHAT_PUSH_URL=<span class="string">&quot;https://sctapi.ftqq.com/你的SCKEY.send&quot;</span></span><br><span class="line"></span><br><span class="line">now=$(<span class="built_in">date</span> <span class="string">&#x27;+%F %T&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;===== <span class="variable">$now</span> =====&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 检查内存 &amp; swap 使用情况</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[MEMORY]&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line">free -h &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line"></span><br><span class="line">swap_total=$(free | awk <span class="string">&#x27;/Swap:/ &#123;print $2&#125;&#x27;</span>)</span><br><span class="line">swap_used=$(free | awk <span class="string">&#x27;/Swap:/ &#123;print $3&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$swap_total</span>&quot;</span> -gt 0 ]; <span class="keyword">then</span></span><br><span class="line">    swap_used_percent=$(( <span class="number">100</span> * swap_used / swap_total ))</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    swap_used_percent=0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[SWAP] Total: <span class="variable">$swap_total</span> KB, Used: <span class="variable">$swap_used</span> KB, Used%: <span class="variable">$swap_used_percent</span>%&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 检查磁盘</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[DISK]&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line"><span class="built_in">df</span> -h &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------</span></span><br><span class="line"><span class="comment"># 判断是否发送报警</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$swap_used_percent</span>&quot;</span> -gt <span class="string">&quot;<span class="variable">$threshold_swap_used_percent</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    alert_msg=<span class="string">&quot;⚠️ Swap 使用率警告！当前使用率为 <span class="variable">$&#123;swap_used_percent&#125;</span>% (阈值 <span class="variable">$&#123;threshold_swap_used_percent&#125;</span>%)&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[ALERT] <span class="variable">$alert_msg</span>&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送邮件报警（需要系统支持 mail 命令）</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$alert_msg</span>&quot;</span> | mail -s <span class="string">&quot;Swap 使用率警告&quot;</span> <span class="string">&quot;<span class="variable">$EMAIL</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送微信推送报警</span></span><br><span class="line">    curl -s --get --data-urlencode <span class="string">&quot;title=Swap 使用率警告&quot;</span> --data-urlencode <span class="string">&quot;desp=<span class="variable">$alert_msg</span>&quot;</span> <span class="string">&quot;<span class="variable">$WECHAT_PUSH_URL</span>&quot;</span> &gt; /dev/null</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$log_file</span>&quot;</span></span><br></pre></td></tr></table></figure>
<hr>
<h1>🔧 使用说明</h1>
<ol>
<li>修改脚本中：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EMAIL=<span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line">WECHAT_PUSH_URL=<span class="string">&quot;https://sctapi.ftqq.com/你的SCKEY.send&quot;</span></span><br></pre></td></tr></table></figure>
<p>替换成你的邮箱地址和微信推送 URL。</p>
<ol start="2">
<li>
<p>确保系统已安装并配置好 <code>mail</code> 命令（如 <code>mailutils</code> 或 <code>mailx</code>）。</p>
</li>
<li>
<p>保存脚本（如 <code>/usr/local/bin/swap_health.sh</code>），赋权限：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/swap_health.sh</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>手动运行测试：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/swap_health.sh</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>查看日志：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /var/log/swap_health.log</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>添加定时任务（如每10分钟）：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<p>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*/10 * * * * /usr/local/bin/swap_health.sh</span><br></pre></td></tr></table></figure>
<hr>
<h1>📢 关于微信推送</h1>
<ul>
<li>上面示例使用 <a href="https://sct.ftqq.com/">Server酱</a> 服务，简单易用</li>
<li>注册后获取 <code>SCKEY</code>，拼成推送 URL</li>
<li>也可以用企业微信机器人或者其他微信推送工具，调整 <code>curl</code> 部分即可</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>三角洲改枪码</title>
    <url>/2025/09/15/%E4%B8%89%E8%A7%92%E6%B4%B2%E6%94%B9%E6%9E%AA%E7%A0%81/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">M14射手步枪-全面战场-6H6B6KS0383RCT51GRAKE</span><br><span class="line">AK-12突击步枪-全面战场-6H6B6NS0383RCT51GRAKE</span><br><span class="line">M7战斗步枪-全面战场-6H6B3RG0383RCT51GRAKE</span><br><span class="line">AUG突击步枪-全面战场-6H6B6TG0383RCT51GRAKE</span><br><span class="line">PKM通用机枪-全面战场-6H6B6VC0383RCT51GRAKE</span><br><span class="line">M250通用机枪-全面战场-6H6B79G0383RCT51GRAKE</span><br><span class="line">M249轻机枪-全面战场-6H6B8040383RCT51GRAKE</span><br><span class="line">725双管霰弹枪-全面战场-6H6B68O0383RCT51GRAKE</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KC17突击步枪-全面战场-6H6B59K0383RCT51GRAKE</span><br><span class="line">CAR-15突击步枪-全面战场-6H6B5RO0383RCT51GRAKE</span><br><span class="line">K416突击步枪-全面战场-6H6B5VS0383RCT51GRAKE</span><br><span class="line">UZI冲锋枪-全面战场-6H6B6180383RCT51GRAKE</span><br><span class="line">QCQ171冲锋枪-全面战场-6H6B6380383RCT51GRAKE</span><br><span class="line">P90冲锋枪-全面战场-6H6B65C0383RCT51GRAKE</span><br><span class="line">MP7冲锋枪-全面战场-6H6B6700383RCT51GRAKE</span><br><span class="line">725双管霰弹枪-全面战场-6H6B68O0383RCT51GRAKE</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AS Val突击步枪-全面战场-6GR61OC0383RCT51GRAKE</span><br><span class="line">SG552突击步枪-全面战场-6H6B3A40383RCT51GRAKE</span><br><span class="line">AK-12突击步枪-全面战场-6H6B3C00383RCT51GRAKE</span><br><span class="line">AKM突击步枪-全面战场-6H6B3NG0383RCT51GRAKE</span><br><span class="line">M4A1突击步枪-全面战场-6H6B3P00383RCT51GRAKE</span><br><span class="line">M7战斗步枪-全面战场-6H6B3RG0383RCT51GRAKE</span><br><span class="line">K416突击步枪-全面战场-6H6B3TK0383RCT51GRAKE</span><br><span class="line">K437突击步枪-全面战场-6H6B42G0383RCT51GRAKE</span><br><span class="line">腾龙突击步枪-全面战场-6GRIFF00383RCT51GRAKE</span><br><span class="line">S12K霰弹枪-全面战场-6H6B46G0383RCT51GRAKE</span><br><span class="line">725双管霰弹枪-全面战场-6H6B4940383RCT51GRAKE</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KC17突击步枪-全面战场-6H6B59K0383RCT51GRAKE</span><br><span class="line">CAR-15突击步枪-全面战场-6H6B5RO0383RCT51GRAKE</span><br><span class="line">K416突击步枪-全面战场-6H6B5VS0383RCT51GRAKE</span><br><span class="line">UZI冲锋枪-全面战场-6H6B6180383RCT51GRAKE</span><br><span class="line">QCQ171冲锋枪-全面战场-6H6B6380383RCT51GRAKE</span><br><span class="line">P90冲锋枪-全面战场-6H6B65C0383RCT51GRAKE</span><br><span class="line">MP7冲锋枪-全面战场-6H6B6700383RCT51GRAKE</span><br><span class="line">725双管霰弹枪-全面战场-6H6B68O0383RCT51GRAKE</span><br></pre></td></tr></table></figure>
<h1>烽火</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">M14射手步枪﹣烽火地</span><br><span class="line">带﹣6GBMGF007ODLT6ETQT3GS</span><br><span class="line">M700狙击步枪﹣烽火地</span><br><span class="line">带﹣6FG5OGC051CKRTT084FIR </span><br><span class="line">M7战斗步枪﹣烽火地带﹣6FPVFLC07ODLT6ETQT3GS </span><br><span class="line">AWM狙击步枪﹣烽火地带﹣6F32GRK09HAS1HSET4H5P </span><br><span class="line">Vector冲锋枪﹣烽火地带﹣6F4P1BG07ODLT6ETQT3GS </span><br><span class="line">SR-3M紧凑突击步枪﹣烽火地带﹣6F6Q83007ODLT6ETQT3GS </span><br><span class="line">M250通用机枪﹣烽火地带﹣6FHDKVO03UJ179LGPMGNB </span><br><span class="line">SMG-45冲锋枪﹣烽火地带﹣6FQ93AC02J1BTCMSP82T7</span><br><span class="line">MP7冲锋枪﹣烽火地带﹣6FVLU2G07ODLT6ETQT3GS </span><br><span class="line">K437突击步枪﹣烽火地带﹣6G08FQSOALA6TB7GJCL3H </span><br><span class="line">AS Val突击步枪﹣烽火地带﹣6G4777S08MB5NDOJ56KH8</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>vscode setting</title>
    <url>/2022/09/28/vscode%20setting/</url>
    <content><![CDATA[<h1>vscode setting</h1>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code-runner.saveFileBeforeRun&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;code-runner.runInTerminal&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;editor.mouseWheelZoom&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;explorer.confirmDelete&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;json.schemas&quot;</span>: [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;problems.decorations.enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;explorer.compactFolders&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;editor.fastScrollSensitivity&quot;</span>: 6,</span><br><span class="line">    <span class="string">&quot;editor.fontSize&quot;</span>: 20,</span><br><span class="line">    <span class="string">&quot;tabnine.experimentalAutoImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;workbench.iconTheme&quot;</span>: <span class="string">&quot;material-icon-theme&quot;</span>,</span><br><span class="line">    <span class="string">&quot;explorer.confirmDragAndDrop&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;java.jdt.ls.java.home&quot;</span>: <span class="string">&quot;D:\\jdk-17_windows-x64_bin\\jdk-17.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;java.import.gradle.java.home&quot;</span>: <span class="string">&quot;D:\\jdk-17_windows-x64_bin\\jdk-17.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[java]&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;diffEditor.codeLens&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;editor.acceptSuggestionOnCommitCharacter&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;editor.bracketPairColorization.enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;editor.bracketPairColorization.independentColorPoolPerBracketType&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;editor.mouseWheelZoom&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;editor.suggest.shareSuggestSelections&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;files.exclude&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;**/*.class&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;**/*.exe&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;editor.fontLigatures&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;files.encoding&quot;</span>: <span class="string">&quot;utf8bom&quot;</span>,</span><br><span class="line">    <span class="string">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;settingsSync.ignoredSettings&quot;</span>: [</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;editor.fontWeight&quot;</span>: <span class="string">&quot;normal&quot;</span>,</span><br><span class="line">    <span class="string">&quot;editor.quickSuggestions&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;other&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">        <span class="string">&quot;comments&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">        <span class="string">&quot;strings&quot;</span>: <span class="string">&quot;on&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;java.jdt.ls.vmargs&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;settingsSync.ignoredExtensions&quot;</span>: [</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;terminal.integrated.enableMultiLinePasteWarning&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;backgroundCover.opacity&quot;</span>: 0.3,</span><br><span class="line">    <span class="string">&quot;backgroundCover.autoStatus&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;sync.gist&quot;</span>: <span class="string">&quot;12b849b762c4f2a961cd2e407ac0f957&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundCover.imagePath&quot;</span>: <span class="string">&quot;d:\\steam\\steamapps\\workshop\\content\\431960\\2791831225\\preview.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;java.configuration.maven.globalSettings&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tomcat.restart_when_http(s)_port_change&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;[html]&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;vscode.html-language-features&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;translation.provider&quot;</span>: <span class="string">&quot;google&quot;</span>,</span><br><span class="line">    <span class="string">&quot;workbench.colorTheme&quot;</span>: <span class="string">&quot;GitHub Dark&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vscode-office.openOutline&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;workbench.editorAssociations&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;*.md&quot;</span>: <span class="string">&quot;default&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>setting</tag>
      </tags>
  </entry>
  <entry>
    <title>事务的四大特性</title>
    <url>/2025/09/15/%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>概述<br>
数据库中的事务有四大特性（ACID），分别是原子性、一致性、隔离性和持久性。针对隔离性，还有四个隔离级别，分别是串行化、可重复读、读已提交和读未提交。这四个隔离级别是针对并发事务中存在的三个问题，分别是脏读、不可重复读和幻读。</p>
<h2 id="事务的四大特性">事务的四大特性</h2>
<ol>
<li>
<p>原子性（Atomicity）<br>
事务包含的所有数据库操作要么全部成功，要不全部失败回滚。</p>
</li>
<li>
<p>一致性（Consistency）<br>
一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。一致性规定事务提交前后只存在两个状态，提交前的状态和提交后的状态，绝对不会出现中间的状态。最典型的例子就是银行转账，A和B之间互相转账，账面加起来总和5000元，无论A和B之间怎么转，转几次，成功与否，事务结束后A和B账面总和还是5000元。</p>
</li>
<li>
<p>隔离性（Isolation）<br>
隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>
</li>
<li>
<p>持久性（Durability）<br>
持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p>
</li>
</ol>
<h2 id="事务并发时存在的问题">事务并发时存在的问题</h2>
<ol>
<li>
<p>脏读（Dirty Read）<br>
脏数据所指的就是未提交的数据，而脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。比如，一个事务正在对一条记录做修改，在这个事务完成并提交之前，这条数据是处于待定状态的（可能提交也可能回滚），这时，第二个事务来读取这条没有提交的数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被称为脏读。</p>
</li>
<li>
<p>不可重复读（Non-repeatable Read）<br>
一个事务先后读取同一条记录，而事务在两次读取之间该数据被其它事务所修改，则两次读取的数据不同，我们称之为不可重复读。例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p>
</li>
</ol>
<p>不可重复读和脏读的区别：脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是在同一事务内读取了前一事务提交的数据，即前一次读到的数据是另一个事务提交前，后一次读到的数据是提交后的。</p>
<ol start="3">
<li>幻读（Phantom Read）<br>
一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为幻读。幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还存在没有修改的数据行，就好象发生了幻觉一样。</li>
</ol>
<p>幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p>
<p>在实际开发和使用中，其实幻读问题是可以接受也符合用户的心理预期，比如在淘宝双十一抢东西，点击“购买”，成功进入**“下单页面”，结果到“付款页面”**却提示已经被抢完，这是可以接受的。</p>
<h2 id="四个隔离级别">四个隔离级别</h2>
<ol>
<li>
<p>读未提交（Read uncommitted）<br>
所有事务都可以看到其他未提交事务的执行结果。本隔离级别是最低的隔离级别，虽然拥有超高的并发处理能力及很低的系统开销，但很少用于实际应用。因为采用这种隔离级别只能防止更新丢失问题（这个问题现代关系型数据库已经不会发生），不能解决脏读，不可重复读及幻读问题。</p>
</li>
<li>
<p>读已提交（Read committed）<br>
这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别可以防止脏读问题，但会出现不可重复读及幻读问题。</p>
</li>
<li>
<p>可重复读（Repeatable read）<br>
这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。这种隔离级别可以防止除幻读外的其他问题。</p>
</li>
<li>
<p>串行化（Serializable ）<br>
这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读、第二类更新丢失问题。在这个级别，可以解决上面提到的所有并发问题，但可能导致大量的超时现象和锁竞争，通常数据库不会用这个隔离级别，我们需要其他的机制来解决这些问题:乐观锁和悲观锁。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2025/09/15/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="代理模式">代理模式</h2>
<ol>
<li>功能增强：在原有的功能上，增加了额外的功能，</li>
<li>控制访问：代理类不让你访问目标对象，只能通过代理对象来控制目标对象。</li>
</ol>
<blockquote>
<p>使用代理对象包装目标对象，每次访问目标对象时，都通过代理对象来访问。</p>
<p>代理对象就可以控制目标对象实现功能的过程，并且在其中添加额外的功能.</p>
</blockquote>
<p>两个一致：</p>
<ol>
<li>
<p>代理对象和目标对象 功能一致 ：代理对象和目标对象实现相同的接口</p>
</li>
<li>
<p>结果一致 : 代理对象实现功能的过程，就是目标对象实现功能的过程。</p>
</li>
</ol>
<h3 id="静态代理">静态代理</h3>
<blockquote>
<p>代理类是自己手动实现的，</p>
<p>目标类是确定好的。</p>
</blockquote>
<ol>
<li>核心功能前</li>
<li>核心功能后</li>
<li>catch中</li>
<li>finally中</li>
</ol>
<h3 id="动态代理">动态代理</h3>
<h4 id="1-JDK动态代理-Interface-Proxy">1. JDK动态代理 (Interface Proxy)</h4>
<p>JDK动态代理主要依赖于<code>java.lang.reflect.Proxy</code>类和<code>java.lang.reflect.InvocationHandler</code>接口。JDK动态代理适用于那些实现了接口的类。</p>
<ul>
<li>
<p><strong>实现原理</strong>：</p>
<ul>
<li>利用反射机制在运行时动态地创建一个实现了给定接口列表的新类。</li>
<li>这个新类将代理原始的对象，并且所有的方法调用都将被转发到一个实现了<code>InvocationHandler</code>接口的实例上。</li>
<li><code>InvocationHandler</code>的<code>invoke</code>方法会在每次代理对象的方法被调用时触发。</li>
</ul>
</li>
<li>
<p><strong>示例代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyInterface target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInterfaceHandler</span><span class="params">(MyInterface target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before method call&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">MyInterface</span> <span class="variable">myInterface</span> <span class="operator">=</span> (MyInterface) Proxy.newProxyInstance(</span><br><span class="line">    MyInterface.class.getClassLoader(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[]&#123;MyInterface.class&#125;,</span><br><span class="line">    handler</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>优点</strong>：</p>
<ul>
<li>无需编写代理类的源代码。</li>
<li>代理类在运行时生成，减少了编码工作量。</li>
</ul>
</li>
<li>
<p><strong>缺点</strong>：</p>
<ul>
<li>只能代理实现了接口的类。</li>
<li>如果没有实现接口，则无法使用JDK动态代理。</li>
</ul>
</li>
</ul>
<h4 id="2-CGLIB动态代理-Subclass-Proxy">2. CGLIB动态代理 (Subclass Proxy)</h4>
<p>CGLIB（Code Generation Library）是一个强大的高性能的代码生成库，它使用ASM（字节码操作库）来动态生成代理类。</p>
<ul>
<li>
<p><strong>实现原理</strong>：</p>
<ul>
<li>通过字节码技术为一个类创建一个子类实例。</li>
<li>这个子类重写了父类的所有非<code>final</code>方法，并且在方法前后添加额外的逻辑。</li>
<li>使用<code>Enhancer</code>类来创建动态代理类。</li>
</ul>
</li>
<li>
<p><strong>示例代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Doing something...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">enhancer.setSuperclass(MyClass.class);</span><br><span class="line">enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before method call&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proxy.invokeSuper(obj, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;After method call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">MyClass</span> <span class="variable">myClass</span> <span class="operator">=</span> (MyClass) enhancer.create();</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>优点</strong>：</p>
<ul>
<li>不需要目标类实现接口。</li>
<li>可以代理任意类，只要该类不是<code>final</code>的，且其方法不是<code>final</code>的。</li>
</ul>
</li>
<li>
<p><strong>缺点</strong>：</p>
<ul>
<li>生成的代理类比JDK动态代理要稍微慢一点。</li>
<li>不能代理<code>final</code>类和<code>final</code>方法。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>代码生成器</title>
    <url>/2023/11/01/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Mybatis-plus-代码生成器">Mybatis-plus 代码生成器</h2>
<div class="note info no-icon modern"><p><strong>使用之前备份代码！！！</strong></p>
</div>
<h3 id="📖依赖">📖依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis代码生成器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--velocity模板依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>utils/CodeGenerator.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.springboot.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码生成器</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> * Modified by zorange on 2020/4/26.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zorange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/26 22:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        generate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span> &#123;</span><br><span class="line">        FastAutoGenerator.create(<span class="string">&quot;jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;421232&quot;</span>)</span><br><span class="line">                .globalConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.author(<span class="string">&quot;zorange&quot;</span>)</span><br><span class="line">                            .fileOverride()</span><br><span class="line">                            .outputDir(<span class="string">&quot;C:\\Users\\15629\\Desktop\\前后端分离开发\\springboot\\src\\main\\java&quot;</span>)</span><br><span class="line">                            .enableSwagger();</span><br><span class="line">                &#125;)</span><br><span class="line">                .packageConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.parent(<span class="string">&quot;online.zorange.springboot&quot;</span>) <span class="comment">// 设置父包名</span></span><br><span class="line">                            .moduleName(<span class="literal">null</span>)<span class="comment">//模块名</span></span><br><span class="line">                            .pathInfo(Collections.singletonMap(OutputFile.mapperXml, <span class="string">&quot;C:\\Users\\15629\\Desktop\\前后端分离开发\\springboot\\src\\main\\resources\\mapper\\&quot;</span>)); <span class="comment">// 设置mapper.xml生成路径</span></span><br><span class="line">                &#125;)</span><br><span class="line">                .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                    builder.entityBuilder().enableLombok();  <span class="comment">// 为实体类添加lombok注解</span></span><br><span class="line">                    builder.controllerBuilder().enableRestStyle(); <span class="comment">// 为控制器添加@RestController注解</span></span><br><span class="line">                    builder.mapperBuilder().enableMapperAnnotation().build(); <span class="comment">// 为mapper添加@Mapper注解</span></span><br><span class="line">                    builder.addInclude(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                            .addTablePrefix(<span class="string">&quot;t_&quot;</span>);</span><br><span class="line">                &#125;)</span><br><span class="line"><span class="comment">//                .templateEngine(new FreemarkerTemplateEngine()) // 指定模板引擎，默认是VelocityTemplateEngine ，需要引入相关引擎依赖</span></span><br><span class="line">                .execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="规则：">规则：</h3>
<ol>
<li>controller.java.vm</li>
</ol>
<figure class="highlight v"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;<span class="keyword">package</span><span class="variable">.Controller</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com<span class="variable">.baomidou</span><span class="variable">.mybatisplus</span><span class="variable">.extension</span><span class="variable">.plugins</span><span class="variable">.pagination</span><span class="variable">.Page</span>;</span><br><span class="line"><span class="keyword">import</span> org<span class="variable">.springframework</span><span class="variable">.web</span><span class="variable">.bind</span><span class="variable">.annotation</span>.*;</span><br><span class="line"><span class="keyword">import</span> javax<span class="variable">.annotation</span><span class="variable">.Resource</span>;</span><br><span class="line"><span class="keyword">import</span> java<span class="variable">.util</span><span class="variable">.List</span>;</span><br><span class="line"><span class="keyword">import</span> com<span class="variable">.baomidou</span><span class="variable">.mybatisplus</span><span class="variable">.core</span><span class="variable">.conditions</span><span class="variable">.query</span><span class="variable">.QueryWrapper</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $&#123;<span class="keyword">package</span><span class="variable">.Entity</span>&#125;.$&#123;entity&#125;;</span><br><span class="line"><span class="keyword">import</span> $&#123;<span class="keyword">package</span><span class="variable">.Service</span>&#125;.$&#123;<span class="keyword">table</span><span class="variable">.serviceName</span>&#125;;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span>($&#123;restControllerStyle&#125;)</span><br><span class="line"><span class="keyword">import</span> org<span class="variable">.springframework</span><span class="variable">.web</span><span class="variable">.bind</span><span class="variable">.annotation</span><span class="variable">.RestController</span>;</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="keyword">import</span> org<span class="variable">.springframework</span><span class="variable">.stereotype</span><span class="variable">.Controller</span>;</span><br><span class="line">#<span class="keyword">end</span></span><br><span class="line">#<span class="keyword">if</span>($&#123;superControllerClassPackage&#125;)</span><br><span class="line"><span class="keyword">import</span> $&#123;superControllerClassPackage&#125;;</span><br><span class="line">#<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * $!&#123;table.comment&#125; 前端控制器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author $&#123;author&#125;</span></span><br><span class="line"><span class="comment"> * @since $&#123;date&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">#<span class="keyword">if</span>($&#123;restControllerStyle&#125;)</span><br><span class="line">@RestController</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">@Controller</span><br><span class="line">#<span class="keyword">end</span></span><br><span class="line">@RequestMapping(<span class="string">&quot;#if($&#123;package.ModuleName&#125;)/$&#123;package.ModuleName&#125;#end/#if($&#123;controllerMappingHyphenStyle&#125;)$&#123;controllerMappingHyphen&#125;#else$&#123;table.entityPath&#125;#end&quot;</span>)</span><br><span class="line">#<span class="keyword">if</span>($&#123;kotlin&#125;)</span><br><span class="line"><span class="keyword">class</span> $&#123;<span class="keyword">table</span><span class="variable">.controllerName</span>&#125;#<span class="keyword">if</span>($&#123;superControllerClass&#125;) : $&#123;superControllerClass&#125;()#<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">#<span class="keyword">if</span>($&#123;superControllerClass&#125;)</span><br><span class="line">public <span class="keyword">class</span> $&#123;<span class="keyword">table</span><span class="variable">.controllerName</span>&#125; <span class="keyword">extends</span> $&#123;superControllerClass&#125; &#123;</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">public <span class="keyword">class</span> $&#123;<span class="keyword">table</span><span class="variable">.controllerName</span>&#125; &#123;</span><br><span class="line">#<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private $&#123;<span class="keyword">table</span><span class="variable">.serviceName</span>&#125; $&#123;<span class="keyword">table</span><span class="variable">.entityPath</span>&#125;Service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 新增和修改</span></span><br><span class="line"><span class="comment">    * @param $&#123;table.entityPath&#125; 实体对象</span></span><br><span class="line"><span class="comment">    * @return Result</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @PostMapping</span><br><span class="line">    public boolean save(@RequestBody $&#123;entity&#125; $&#123;<span class="keyword">table</span><span class="variable">.entityPath</span>&#125;) &#123;</span><br><span class="line">        <span class="keyword">return</span> $&#123;<span class="keyword">table</span><span class="variable">.entityPath</span>&#125;Service<span class="variable">.saveOrUpdate</span>($&#123;<span class="keyword">table</span><span class="variable">.entityPath</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id删除</span></span><br><span class="line"><span class="comment">    * @param id 主键id</span></span><br><span class="line"><span class="comment">    * @return boolean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @DeleteMapping(<span class="string">&quot;/&#123;id&#125;&quot;</span>)</span><br><span class="line">    public boolean deleteById(@PathVariable Integer id) &#123;</span><br><span class="line">        <span class="keyword">return</span> $&#123;<span class="keyword">table</span><span class="variable">.entityPath</span>&#125;Service<span class="variable">.removeById</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询所有</span></span><br><span class="line"><span class="comment">    * @return List&lt;$&#123;entity&#125;&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @GetMapping</span><br><span class="line">    public List&lt;$&#123;entity&#125;&gt; findAll() &#123;</span><br><span class="line">        <span class="keyword">return</span> $&#123;<span class="keyword">table</span><span class="variable">.entityPath</span>&#125;Service<span class="variable">.list</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id查询</span></span><br><span class="line"><span class="comment">    * @param id 主键id</span></span><br><span class="line"><span class="comment">    * @return $&#123;entity&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @GetMapping(<span class="string">&quot;/&#123;id&#125;&quot;</span>)</span><br><span class="line">    public $&#123;entity&#125; findById(@PathVariable Integer id) &#123;</span><br><span class="line">        <span class="keyword">return</span> $&#123;<span class="keyword">table</span><span class="variable">.entityPath</span>&#125;Service<span class="variable">.getById</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 分页查询</span></span><br><span class="line"><span class="comment">    * @param pageNum 当前页</span></span><br><span class="line"><span class="comment">    * @param pageSize 每页显示的条数</span></span><br><span class="line"><span class="comment">    * @return Page&lt;$&#123;entity&#125;&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @GetMapping(<span class="string">&quot;/page&quot;</span>)</span><br><span class="line">    public Page&lt;$&#123;entity&#125;&gt; findPage(@RequestParam Integer pageNum, @RequestParam Integer pageSize) &#123;</span><br><span class="line">        QueryWrapper&lt;$&#123;entity&#125;&gt; wrapper=<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> $&#123;<span class="keyword">table</span><span class="variable">.entityPath</span>&#125;Service<span class="variable">.page</span>(<span class="keyword">new</span> Page&lt;&gt;(pageNum, pageSize), wrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 批量删除</span></span><br><span class="line"><span class="comment">    * @param ids 主键id集合</span></span><br><span class="line"><span class="comment">    * @return boolean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    @DeleteMapping(<span class="string">&quot;del/batch&quot;</span>)</span><br><span class="line">    public boolean deleteBatchById(@RequestBody List&lt;Integer&gt; ids) &#123;</span><br><span class="line">        <span class="keyword">return</span> $&#123;<span class="keyword">table</span><span class="variable">.entityPath</span>&#125;Service<span class="variable">.removeBatchByIds</span>(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">end</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>分布式链路追踪技术Zipkin+Micrometer Tracing</title>
    <url>/2025/09/15/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E6%8A%80%E6%9C%AFZipkin+Micrometer%20Tracing/</url>
    <content><![CDATA[<h1>分布式链路追踪技术Zipkin+Micrometer Tracing</h1>
<h2 id="zipkin介绍">zipkin介绍</h2>
<p><strong>Zipkin 分布式跟踪系统</strong>就能非常好地解决该问题，<strong>主要解决以下3点问题：</strong></p>
<p>1.动态展示服务的链路；</p>
<p>2.分析服务链路的瓶颈并对其进行调优；</p>
<p>3.快速进行服务链路的故障发现。</p>
<h2 id="zipkin架构">zipkin架构</h2>
<p><strong>ZipKin 可以分为两部分：</strong></p>
<ul>
<li><strong>ZipKin Server</strong> ：用来作为数据的采集存储、数据分析与展示；</li>
<li><strong>ZipKin Client</strong> ：基于不同的语言及框架封装的一些列客户端工具，这些工具完成了追踪数据的生成与上报功能。</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/5c1546e81af2c067128d5091dc127743.png" alt=""></p>
<p>Instrumented client和server是分别使用了ZipKin Client的服务，Zipkin Client会根据配置将追踪数据发送到Zipkin  Server中进行数据存储、分析和展示。</p>
<h4 id="zipkin服务端">zipkin服务端</h4>
<p>Zipkin (服务端)包含四个组件，分别是 collector、storage、search、web UI。</p>
<p><strong>1) collector 信息收集器</strong>: collector 接受或者收集各个应用传输的数据。</p>
<p><strong>2) storage 存储组件</strong>: zipkin 默认直接将数据存在内存中，此外支持使用 Cassandra、ElasticSearch 和 Mysql 。</p>
<p><strong>3) API（Query）</strong> 负责查询Storage中存储的数据，提供简单的JSON API获取数据，主要提供给web UI使用。</p>
<p><strong>4) web UI 服务端展示平台</strong>:主要是提供简单的 web 界面，用图表将链路信息清晰地展示给开发人员。</p>
<h3 id="zipkin客户端">zipkin客户端</h3>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/9782c69779f42011b169990f01b2c809.png" alt=""></p>
<p>ZipKin几个概念:</p>
<p>在追踪日志中，有几个基本概念spanId、traceId、parentId</p>
<p>traceId：用来确定一个追踪链的16字符长度的字符串，在某个追踪链中保持不变。</p>
<p>spanId：区域Id，在一个追踪链中spanId可能存在多个，每个spanId用于表明在某个服务中的身份，也是16字符长度的字符串。</p>
<p>parentId：在跨服务调用者的spanId会传递给被调用者，被调用者会将调用者的spanId作为自己的parentId，然后自己再生成spanId。</p>
<h2 id="具体整合步骤：Micrometer-tacing-brave-zipkin">具体整合步骤：Micrometer tacing + brave + zipkin</h2>
<p>第一步：先自动ZipkinServer:</p>
<blockquote>
<p>java -jar zipkin-server-3.3.1-exec.jar</p>
</blockquote>
<p>或者docker方式：</p>
<blockquote>
<p>docker方式： docker run -d -p 9411:9411 openzipkin/zipkin</p>
</blockquote>
<p>如果是本机启动，启动后访问：<a href="http://localhost:9411/">http://localhost:9411/</a> 即可。</p>
<p>第二步：在微服务中整合zipkin客户端依赖信息：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 用于监控和管理 Spring Boot 应用 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 是 Zipkin 的一个组件，用于将分布式追踪数据（trace data）从应用程序发送到 Zipkin 服务器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.reporter2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-reporter-brave<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 是 Micrometer 项目的一部分，用于将 Micrometer 的指标（metrics）和 Brave 的分布式追踪（tracing）功能集成在一起 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-tracing-bridge-brave<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--用于集成 Feign 客户端和 Micrometer 度量库的模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-micrometer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--用于对应用程序中的关键操作进行观测（observation），从而收集详细的性能指标和追踪数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-observation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">&lt;!--整合zipkin时提示信息用到的 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为io.micrometer包下的jar包提供版本管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-tracing-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第三步：在微服务yml文件中配置:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://192.168.200.111:9411/</span>  <span class="comment">#zipkin链接地址</span></span><br><span class="line">    <span class="attr">discovery-client-enabled:</span> <span class="literal">false</span>  <span class="comment">#不用开启服务发现</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">tracing:</span></span><br><span class="line">    <span class="attr">sampling:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span>   <span class="comment">#采样频率</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">tracing:</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">http://192.168.200.111:9411/api/v2/spans</span>  <span class="comment">#zipkin的追踪入口</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="string">$&#123;spring.application.name&#125;,%X&#123;traceId:-&#125;,%X&#123;spanId:-&#125;</span>  <span class="comment">#采集日志格式</span></span><br></pre></td></tr></table></figure>
<p>第四步：访问订单微服务接口：<a href="http://localhost:10200/api/order/findOrderByOrderId/101">http://localhost:10200/api/order/findOrderByOrderId/101</a></p>
<p>​                访问zipkin服务：<a href="http://192.168.200.111:9411/zipkin">http://192.168.200.111:9411/zipkin</a></p>
<p>就能看到微服务调用链路、每个阶段的时间消耗及哪个微服务出现了异常信息。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>分布式锁</title>
    <url>/2025/09/15/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h1>分布式锁</h1>
<h2 id="分布式锁主流的实现方案：">分布式锁主流的实现方案：</h2>
<ol>
<li>基于数据库实现分布式锁</li>
<li>基于缓存（ Redis等）</li>
<li>基于Zookeeper</li>
</ol>
<p>每一种分布式锁解决方案都有各自的优缺点：</p>
<ol>
<li>性能：Redis最高</li>
<li>可靠性：zookeeper最高</li>
</ol>
<p>因为Redis具备高性能、高可用、高并发的特性，这里，我们就基于Redis实现分布式锁。</p>
<p>分布式锁的关键是多进程共享的内存标记(锁)，因此只要我们在Redis中放置一个这样的标记(数据)就可以了。不过在实现过程中，不要忘了我们需要实现下列目标：</p>
<ul>
<li>多进程可见：多进程可见，否则就无法实现分布式效果</li>
<li>避免死锁：死锁的情况有很多，我们要思考各种异常导致死锁的情况，保证锁可以被释放</li>
<li>排它：同一时刻，只能有一个进程获得锁</li>
<li>高可用：避免锁服务宕机或处理好宕机的补救措施(redis集群架构：1.主从复制 2.哨兵 3.cluster集群)</li>
</ul>
<h3 id="分布式锁使用的逻辑如下：">分布式锁使用的逻辑如下：</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">尝试获取锁</span><br><span class="line"><span class="code">	成功：执行业务代码    </span></span><br><span class="line"><span class="code">		执行业务  </span></span><br><span class="line"><span class="code">			try&#123;</span></span><br><span class="line"><span class="code">				获取锁</span></span><br><span class="line"><span class="code">				业务代码-宕机</span></span><br><span class="line"><span class="code">			&#125; catch()&#123;</span></span><br><span class="line"><span class="code">			&#125;finally&#123; </span></span><br><span class="line"><span class="code">				释放锁</span></span><br><span class="line"><span class="code">			&#125;</span></span><br><span class="line"><span class="code"> 	失败：等待,进行自旋；</span></span><br></pre></td></tr></table></figure>
<h2 id="分布式锁三个操作：">分布式锁三个操作：</h2>
<ol>
<li>加锁</li>
<li>解锁</li>
<li>重试</li>
</ol>
<p>为了确保分布式锁可用，我们至少要确保锁的实现同时满足以下几个条件：</p>
<ul>
<li>互斥性。在任意时刻，只有一个客户端能持有锁。</li>
<li>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li>
<li>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</li>
<li>加锁和解锁必须具有原子性。</li>
<li>实现可重入锁（可选）</li>
<li>为了防止锁失效，锁要具备自动续期</li>
<li>防止集群情况下锁失效，可以使用Redlock算法</li>
</ul>
<h2 id="关键理解">关键理解</h2>
<p>使用redis做分布式锁,主要三个变量<br>
lockName:  锁的名称,用于标记一个具体的功能,不同的功能用不同的锁<br>
uuid:标记上锁的对应进程,当一个进程上了锁之后,就只允许当前进程再次上锁(可重入),其他进程等待<br>
expire:过期时间</p>
<p>续期:有时候锁的过期时间之内不能完成业务代码.就需要在过期时间过期1/3时,主动去续期,不能阻塞业务线程,用新线程</p>
<ul>
<li>原子性:lua脚本</li>
<li></li>
</ul>
<h2 id="基于redsi的分布式锁实现-aop">基于redsi的分布式锁实现(aop)</h2>
<p>结构<br>
<img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/613c3e814a72d2912dbf1c2fa87fa0ef.png" alt=""></p>
<p>annotatioon</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/10/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisCaChe &#123;</span><br><span class="line">    String <span class="title function_">prefix</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>aop</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.spzx.common.redis.annotation.RedisCaChe;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/10/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCaCheAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line">    String data=<span class="string">&quot;:data:&quot;</span>;</span><br><span class="line">    String lock=<span class="string">&quot;:lock:&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(redisCaChe)&quot;)</span></span><br><span class="line">    Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint point, RedisCaChe redisCaChe)</span>   &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> redisCaChe.prefix();</span><br><span class="line">        Object[] args = point.getArgs();</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="literal">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            suffix = Arrays.asList(args).stream().map(arg -&gt; arg.toString()).collect(Collectors.joining(<span class="string">&quot;:&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String dataKey=prefix + data + suffix;</span><br><span class="line">        <span class="comment">// 去redis查找</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> redisTemplate.opsForValue().get(dataKey);</span><br><span class="line">        <span class="keyword">if</span>(o!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//redis不存在</span></span><br><span class="line">        String lockName=prefix+lock+suffix;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(lockName, uuid, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                o = redisTemplate.opsForValue().get(dataKey);</span><br><span class="line">                <span class="keyword">if</span>(o!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> o;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> point.proceed();</span><br><span class="line">                redisTemplate.opsForValue().set(dataKey,proceed,<span class="number">10</span>,TimeUnit.MINUTES);</span><br><span class="line">                <span class="keyword">return</span> proceed;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                redisTemplate.delete(lockName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> point.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>声明式事务</title>
    <url>/2025/09/15/%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="声明式事务">声明式事务</h2>
<blockquote>
<p><strong>编程式事务</strong>：需要手动去实现事务的功能呢</p>
</blockquote>
<blockquote>
<p><strong>声明式事务</strong>：只需要声明事务，具体的功能由框架完成。</p>
</blockquote>
<p>事务特性：</p>
<ol>
<li>
<p><strong>原子性</strong>：事务被视为一个不可分割的单位，事务中的操作要么都执行，要么都不执行</p>
</li>
<li>
<p><strong>一致性</strong>：事务将数据库从一个一致性转换到另外一个一致性状态</p>
</li>
<li>
<p><strong>隔离性</strong>：多个并发执行的事务不会干扰，</p>
<ol>
<li><strong>隔离级别</strong>：
<ol>
<li><strong>读未提交 (Read Uncommitted)</strong>：提供了最低的隔离级别，可能导致脏读、不可重复读和幻读。</li>
<li><strong>读已提交 (Read Committed)</strong>：防止脏读，但仍然可能遇到不可重复读和幻读。</li>
<li><strong>可重复读 (Repeatable Read)</strong>：防止脏读和不可重复读，但仍然可能发生幻读。==对正在操作的数据加锁。==</li>
<li><strong>序列化 (Serializable)</strong>：防止所有并发问题，但可能会引起较高的锁定开销。==对表加锁==</li>
</ol>
</li>
<li>脏读：读到了未提交的数据</li>
<li>不可重复读：只能读到已经提交的数据，读两次的数据可能不一样</li>
<li>幻读：对没有加锁的数据进行操作，当其他事务操作了之后，可能两次读到数据不一样。</li>
</ol>
</li>
<li>
<p><strong>持久性</strong>：</p>
<p>一旦事务被提交，它对数据库所做的更改就是永久性的，并且不能因为任何系统故障而丢失。</p>
<p>即使是在系统崩溃之后，一旦事务提交，它的结果也必须是可用的。</p>
</li>
</ol>
<h3 id="基于注解的声明式事务">基于注解的声明式事务</h3>
<ol>
<li>
<p><strong>配置事务管理器</strong></p>
<p>配置连接对象，依赖数据源: 因为事的开启是Connection对象开启的，所以事务管理就依赖数据源管理对象。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;DataSourceTransactionManager&quot;</span> &gt;</span></span><br><span class="line"> //数据源   </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>开启事务注解驱动</strong>(连接点)</p>
<p>@Transactional   标记连接点的注解。一般是加在Service层</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">​	==标记位置==：类或方法。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 声明式事务属性</span><br><span class="line"></span><br><span class="line">1. **事务只读**：readOnly=&quot;false&quot;</span><br><span class="line"></span><br><span class="line">   功能：对于==全部都是查询的操作==，可以设置事务只读，此时会通知数据库当前操作为只读操作，会从==数据库层面==优化当前操作。提高效率. 若操作中存在增删改操作时，会报错 Connection is read only</span><br><span class="line"></span><br><span class="line">   &gt; 数据库默认的隔离级别为可重复读，会对表加锁。</span><br><span class="line"></span><br><span class="line">2. **超时时间**：超时回滚，释放资源</span><br><span class="line"></span><br><span class="line">   timeout=&quot;-1&quot;   </span><br><span class="line"></span><br><span class="line">   -1:一直等 ，默认单位秒。</span><br><span class="line"></span><br><span class="line">   场景：事务超过指定时间未执行完毕。强制回滚，并抛出异常TransactionTimeOutException</span><br><span class="line"></span><br><span class="line">3. **回滚策略**：</span><br><span class="line"></span><br><span class="line">   rollBackFor = 字节码对象</span><br><span class="line"></span><br><span class="line">   rollBackForClassName  = 全类名</span><br><span class="line"></span><br><span class="line">   noRollBackFor</span><br><span class="line"></span><br><span class="line">   noRollBackForClassName</span><br><span class="line"></span><br><span class="line">   默认所有运行时异常回滚。</span><br><span class="line"></span><br><span class="line">   设置触发或不触发回滚的异常类型：</span><br><span class="line"></span><br><span class="line">4. **隔离级别**:</span><br><span class="line"></span><br><span class="line">   isoLation=&quot;DEFAULT&quot;</span><br><span class="line"></span><br><span class="line">   1. DEFAULT:默认隔离级别，数据库决定</span><br><span class="line">   2. READ_UNCOMMITTED  不可重复读</span><br><span class="line">   3. READ_COMMITTED </span><br><span class="line">   4. Repeatable Read  可重复读</span><br><span class="line">   5. SERVILAZIABLE 序列化</span><br><span class="line"></span><br><span class="line">5. **传播行为**：</span><br><span class="line"></span><br><span class="line">   propagation =&quot;REQUIRED &quot;</span><br><span class="line"></span><br><span class="line">   1. REQUIRED   调用者的事务</span><br><span class="line"></span><br><span class="line">   2. REQUIRES\_NEW   被调用者的事务</span><br><span class="line"></span><br><span class="line">      | 名称                 | 含义                                                         |</span><br><span class="line">      | -------------------- | ------------------------------------------------------------ |</span><br><span class="line">      | REQUIRED <span class="symbol">&amp;#xA;</span>默认值 | 当前方法必须工作在事务中 <span class="symbol">&amp;#xA;</span>如果当前线程上有已经开启的事务可用，那么就在这个事务中运行 <span class="symbol">&amp;#xA;</span>如果当前线程上没有已经开启的事务，那么就自己开启新事务，在新事务中运行 <span class="symbol">&amp;#xA;</span>所以当前方法有可能和其他方法共用事务 <span class="symbol">&amp;#xA;</span>在共用事务的情况下：当前方法会因为其他方法回滚而受连累 |</span><br><span class="line">      | REQUIRES\_NEW        | 当前方法必须工作在事务中 <span class="symbol">&amp;#xA;</span>不管当前线程上是否有已经开启的事务，都要开启新事务 <span class="symbol">&amp;#xA;</span>在新事务中运行 <span class="symbol">&amp;#xA;</span>不会和其他方法共用事务，避免被其他方法连累 |</span><br><span class="line"></span><br><span class="line">   被传播的事务，默认使用的是事务是其调用者的事务。</span><br><span class="line"></span><br><span class="line">   A-&gt;B,A和B都有事务，默认B使用的A的事务。==针对B事务设置==，且必须为不同类中的方法。</span><br><span class="line"></span><br><span class="line">### 基于XMl的声明式事务</span><br><span class="line"></span><br><span class="line">1. **配置事务管理器**</span><br><span class="line"></span><br><span class="line">   ```xml</span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;DataSourceTransactionManager&quot;</span> &gt;</span></span><br><span class="line">    //数据源   </span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>设置事务通知</strong> (连接点)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;tx&quot;</span> <span class="attr">tranaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    //事务属性,必须指定。</span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;menthod()&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;aop:advisor&gt; 标签：用于将一个已经定义好的Advice和一个Pointcut绑定在一起。</span></span><br><span class="line"><span class="comment">Advisor是一个简单的切面实现，它只需要一个Advice和一个Pointcut就可以工作。</span></span><br><span class="line"><span class="comment">在配置文件中，你可以通过advice-ref属性引用一个已经定义好的Advice，通过pointcut-expression或pointcut-ref属性来指定Pointcut。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    //</span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;tx&quot;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">pointcut</span>=<span class="string">&quot;excution(* online.zorange.service..*(..) )&quot;</span>&gt;</span>				<span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>将个人博客收录进 Bing</title>
    <url>/2023/05/03/%E5%B0%86%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%B6%E5%BD%95%E8%BF%9B%20Bing/</url>
    <content><![CDATA[<h1>Bing 收录个人博客</h1>
<h2 id="⚙️配置">⚙️配置</h2>
<p>​	1️⃣<a href="https://www.bing.com/webmasters/about">登录必应网站管理</a></p>
<p>​	2️⃣选择从 GSC 导入</p>
<p><img src="http://oss.zorange.online/blog/20230504222950.png" alt=""></p>
<p>​	3️⃣ 将下载到的 xml 文件放入网站资源文件夹的根目录下，比如我的是 Hexo 的 source 文件夹下。</p>
<p>​	4️⃣然后三部曲将网站重新部署，hexo clean 、hexo g、hexo d</p>
<p>​	5️⃣重新部署之后就可以验证了，这样就可以搜索到网站了。</p>
<h2 id="⏫优化">⏫优化</h2>
<h3 id="添加网站地图">添加网站地图</h3>
<ol>
<li>
<p>生成网站地图。我的是 hexo 的，要下载一个工具。</p>
</li>
<li>
<p>打开 hexo 目录执行以下命令，会自动生成 sitemap.xml</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line"></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>提交网站地图</li>
</ol>
<p><img src="http://oss.zorange.online/blog/20230504222912.png" alt=""></p>
<ol start="4">
<li>提交成功之后几分钟就好了</li>
</ol>
<p><img src="http://oss.zorange.online/blog/20230504223031.png" alt=""></p>
<ol start="5">
<li>提交成功后，想要去 bing 搜索自己网站上面的文章，可以去 search.xml 文件里面复制你自己写的一些文章段落，搜到的概率会大一点。</li>
</ol>
]]></content>
      <categories>
        <category>Records</category>
      </categories>
      <tags>
        <tag>Bing</tag>
      </tags>
  </entry>
  <entry>
    <title>布隆过滤器</title>
    <url>/2025/09/15/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<h2 id="BloomFilter【布隆过滤器】">BloomFilter【布隆过滤器】</h2>
<h3 id="简介">简介</h3>
<p><strong>概述</strong>：布隆过滤器（Bloom Filter）是1970年由布隆提出的。<strong>它实际上由一个很长的二进制向量(二进制数组)和一系列随机映射函数(hash函数)</strong>。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/e28a1126858cc8e592a68f6afe201093.png" alt=""></p>
<p><strong>作用</strong>：布隆过滤器可以用于检索一个元素是否在一个集合中。</p>
<p><strong>添加元素</strong>：将商品的id(id1)存储到布隆过滤器</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/0ac554d814eda4b516f389531c445c53.png" alt=""></p>
<p>假设当前的布隆过滤器中提供了三个hash函数，此时就使用三个hash函数对id1进行哈希运算，运算结果分别为：2、5、10那么就会数组中对应的位置数据更改为1。</p>
<p><strong>判断数据是否存在</strong>：使用相同的hash函数对数据进行哈希运算，得到哈希值。然后判断该哈希值所对应的数组位置是否都为1，如果不都是1则说明该数据<strong>肯定不存在</strong>。如果都是1说明该数据<strong>可能</strong>存在，因为哈希运算可能就会存在重复的情况。如下图所示：</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/81dfdf3d6a9cf0d61482239ec90772eb.png" alt=""></p>
<p>假设添加完id1和id2数据以后，布隆过滤器中数据的存储方式如上图所示，那么此时要判断id3对应的数据在布隆过滤器中是否存在，按照上述的判断规则应该是存在，但是id3这个数据在布隆过滤器中压根就不存在，这种情况就属于误判。</p>
<p><strong>误判率</strong>：数组越小误判率就越大，数组越大误判率就越小，但是同时带来了更多的内存消耗。</p>
<p><strong>删除元素</strong>：布隆过滤器不支持数据的删除操作(因为有hash冲突,如果把A的hash值删除可能会影响B的查询)，因为如果支持删除那么此时就会影响判断不存在的结果。</p>
<p><strong>优势</strong>：</p>
<ol>
<li>
<p>因为是二进制0,1，所以占用空间很小</p>
</li>
<li>
<p>修改和查询速度快</p>
</li>
</ol>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/c9402d4a013c9737b5473c30d7316bd2.png" alt=""></p>
<h3 id="布隆过滤器的优缺点">布隆过滤器的优缺点</h3>
<p>优点：占用空间小、查询速度快</p>
<p>缺点：存在误差率、不支持删除操作</p>
<h2 id="redisson的布隆过滤器">redisson的布隆过滤器</h2>
<h3 id="1-初始化布隆过滤器">1. 初始化布隆过滤器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * albumInfo BloomFilter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redissonClient</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RBloomFilter <span class="title function_">albumInfoBloomFilter</span><span class="params">(RedissonClient redissonClient)</span> &#123;</span><br><span class="line">    RBloomFilter&lt;Object&gt; bloomFilter = redissonClient.getBloomFilter(BFConstants.BF_ALBUM_INFO);</span><br><span class="line">    <span class="comment">// 1. 若没有则初始化</span></span><br><span class="line">    <span class="keyword">if</span> (!bloomFilter.isExists()) &#123;</span><br><span class="line">        bloomFilter.tryInit(<span class="number">1000000L</span>, <span class="number">0.001d</span>);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;布隆过滤器初始化成功&quot;</span>, BFConstants.BF_ALBUM_INFO);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bloomFilter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-初始化布隆过滤器的数据">2.初始化布隆过滤器的数据</h3>
<blockquote>
<p>本质上就是让服务在启动的同时添加数据<br>
1 : ApplicationRunner<br>
2: SpringApplicationListener<br>
3: @Bean<br>
4: CommandLineRunner<br>
5: @PostConstruct</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> &#123;</span><br><span class="line">      <span class="comment">//1. albumBloomFilter 初始化数据</span></span><br><span class="line">      CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">          RBloomFilter&lt;Object&gt; bloomFilterAlbum = redissonClient.getBloomFilter(BFConstants.BF_ALBUM_INFO);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//1.获取全部id</span></span><br><span class="line">          List&lt;Long&gt; albumInfoAllId = albumInfoMapper.getAlbumInfoAllId();</span><br><span class="line">          <span class="comment">//2.将ids加入布隆过滤器</span></span><br><span class="line">          <span class="keyword">for</span> (Long albumId : albumInfoAllId) &#123;</span><br><span class="line">              bloomFilterAlbum.add(albumId);</span><br><span class="line">          &#125;</span><br><span class="line">          log.info(<span class="string">&quot;ApplicationRunner实现服务启动初始化布隆过滤器数据成功,一共有&#123;&#125;个数据&quot;</span>, bloomFilterAlbum.count());</span><br><span class="line">      &#125;, myExecutor);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-运行时自动更新布隆过滤器">3. 运行时自动更新布隆过滤器</h3>
<blockquote>
<p>定时任务:</p>
</blockquote>
<ol>
<li>spring boot自带task :@Schedule</li>
<li>线程池的定时和延迟任务的方法
<ul>
<li>1.定时任务scheduleAtFixedRate</li>
<li>2.schedule 延迟任务+自己回调</li>
</ul>
</li>
<li>分布式定时任务</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>异步编排</title>
    <url>/2025/09/15/%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</url>
    <content><![CDATA[<h1>异步编排</h1>
<p>异步：多线程</p>
<p>编排：执行顺序</p>
<p>CompletableFuture是jdk8的新特性,主要是用于异步调用，内部封装了线程池,也支持自定义线程池，可以将请求或者处理过程，进行异步处理。</p>
<p>异步执行一个任务时，我们一般是使用自定义的线程池Executor去创建执行的。如果不需要有返回值， 任务实现Runnable接口；如果需要有返回值，任务实现Callable接口，调用Executor的submit方法，再使用Future获取即可。如果多个线程存在前后依赖的话，我们怎么处理呢？其实可用CompeletableFuture。</p>
<p>CompeletableFuture对前后有依赖顸的异步任务的调用有点类似于前面我们学过的axios的回调函数，所以也称之为异步编排技术。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>CompletableFuture:</span><br><span class="line">  completedFuture():类似于Callable接口的多线程</span><br><span class="line">  </span><br><span class="line">  runAsync(Runnable,ExecutorService):适用于无参无返回值,可以使用自定义的线程池</span><br><span class="line">  runAsync(Runnable):适用于无参无返回值,使用默认的线程池(ForkJoinPool)</span><br><span class="line">  </span><br><span class="line">  supply(Supplier,ExecutorService)：适用于无参有返回值,可以使用自定义的线程池</span><br><span class="line">  supply(Supplier)：适用于无参有返回值,使用默认的线程池(ForkJoinPool)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  thenRunAync(Runnable,ExecutorService):表示使用新的线程[自定义线程池中]继续完成某个任务,无参无返回值</span><br><span class="line">  thenRunAync(Runnable): 表示使用新的线程[默认的线程池中]继续完成某个任务,无参无返回值</span><br><span class="line">  thenRun(Runnable): 表示使用上一个线程继续完成某个任务,无参无返回值</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  thenAcceptAync(Consumer,ExecutorService):表示使用新的线程[自定义线程池中]继续完成某个任务,有参无返回值</span><br><span class="line">  thenAcceptAync(Consumer): 表示使用新的线程[默认的线程池中]继续完成某个任务,有参无返回值</span><br><span class="line">  thenAccept(Consumer): 表示使用上一个线程继续完成某个任务,有参无返回值</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  thenApplyAync(Function,ExecutorService):表示使用新的线程[自定义线程池中]继续完成某个任务,有参有返回值</span><br><span class="line">  thenApplytAync(Function): 表示使用新的线程[默认的线程池中]继续完成某个任务,有参有返回值</span><br><span class="line">  thenApply(Function): 表示使用上一个线程继续完成某个任务,有参有返回值</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  whenCompleteAsync(BiConsumer,threadPoolExecutor):表示使用一个新的线程[自定线程池],任务可以接收到上一个线程的返回结果和异常信息,无返回值</span><br><span class="line">  whenCompleteAsync(BiConsumer):表示使用一个新的线程[默认线程池],任务可以接收到上一个线程的返回结果和异常信息,无返回值</span><br><span class="line">  whenComplete(BiConsumer):</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  exceptionally(Function):表示使用默认线程池中的新的线程处理这个异常信息，还能提供一个默认的返回值。</span><br><span class="line">  </span><br><span class="line">  handleAsync(Function,threadPoolExecutor)::表示使用一个新的线程[自定线程池],任务可以接收到上一个线程的返回结果和异常信息,有返回值</span><br><span class="line">  handleAsync(Function)::表示使用一个新的线程[默认线程池],任务可以接收到上一个线程的返回结果和异常信息,有返回值</span><br><span class="line">  handle(Function)::表示使用一个新的线程[默认线程池],任务可以接收到上一个线程的返回结果和异常信息,有返回值</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  ---------当两个线程都执行完成之后，再去线程池中拿一个新的线程去执行这个任务。</span><br><span class="line">  </span><br><span class="line">  runAfterBothAsync(CompletionStage,Runnable,threadPoolExecutor):使用自定义线程池新的线程，无参无返回值</span><br><span class="line">  runAfterBothAsync(CompletionStage,Runnable)::使用默认线程池新的线程，无参无返回值</span><br><span class="line">  runAfterBoth(CompletionStage,Runnable,threadPoolExecutor):使用原来的线程，无参无返回值</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  thenAcceptBothAsync(CompletionStage,BiConsumer,threadPoolExecutor):有参无返回值</span><br><span class="line">  thenAcceptBothAsync(CompletionStage,BiConsumer):有参无返回值</span><br><span class="line">  thenAcceptBoth(CompletionStage,BiConsumer,threadPoolExecutor):有参无返回值</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  thenCombineAsync(CompletionStage,BiFunction,threadPoolExecutor):有参有返回值</span><br><span class="line">  thenCombineAsync(CompletionStage,BiFunction):有参有返回值</span><br><span class="line">  thenCombine(CompletionStage,BiFunction):有参有返回值</span><br><span class="line">  </span><br><span class="line">  CompletableFuture.allOf(CompletionStage ...):表示任意多个线程都执行完成之后，再执行啥？</span><br><span class="line">  </span><br><span class="line">  -------------------------当两个线程任何一个执行完成之后，再去线程池中拿一个新的线程去执行这个任务。-----------</span><br><span class="line">  </span><br><span class="line">  A线程.runAfterEitherAsync(CompletionStage[B线程],Runnable,threadPoolExecutor):</span><br><span class="line">  A线程.runAfterEitherAsync(CompletionStage[B线程],Runnable):</span><br><span class="line">  A线程.runAfterEither(CompletionStage[B线程],Runnable,threadPoolExecutor):</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  A线程.acceptAfterEitherAsync(CompletionStage[B线程],Runnable,threadPoolExecutor):</span><br><span class="line">  A线程.acceptAfterEitherAsync(CompletionStage[B线程],Runnable):</span><br><span class="line">  A线程.acceptfterEither(CompletionStage[B线程],Runnable,threadPoolExecutor):</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   A线程.applyToEitherAsync(CompletionStage[B线程],Runnable,threadPoolExecutor):</span><br><span class="line">   A线程.applyToEitherAsync(CompletionStage[B线程],Runnable):</span><br><span class="line">   A线程.applyToEitherAsync(CompletionStage[B线程],Runnable,threadPoolExecutor):</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">   CompletableFuture.anyOf(CompletableFuture ...):任意一个线程完成之后，都可以继续...</span><br><span class="line">   </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>微服务监控技术</title>
    <url>/2025/09/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1>微服务监控技术</h1>
<h2 id="SpringBoot-Actuator的具体使用">SpringBoot Actuator的具体使用</h2>
<h3 id="在被监控的微服务导入依赖">在被监控的微服务导入依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringBoot Actuator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置application-yml文件">配置application.yml文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span> <span class="comment">#暴露所有的端点</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/boot</span> <span class="comment">#监控actuator的名称,默认是actuator,这里改为了boot</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span>  <span class="comment">#查看健康状态的详细信息</span></span><br></pre></td></tr></table></figure>
<h3 id="启动微服务后访问">启动微服务后访问</h3>
<p>启动后访问`<a href="http://xn--ip-fr5cz80cuvi">http://微服务ip</a>:端口号/boot/，返回正确数据表示测试通过</p>
<h3 id="端点分类">端点分类</h3>
<table>
<thead>
<tr>
<th>地址</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>/beans</td>
<td>显示所有的<code>Spring bean</code>列表</td>
</tr>
<tr>
<td>/caches</td>
<td>显示所有的缓存相关信息</td>
</tr>
<tr>
<td>/scheduledtasks</td>
<td>显示所有的定时任务相关信息</td>
</tr>
<tr>
<td>/loggers</td>
<td>显示所有的日志相关信息</td>
</tr>
<tr>
<td>/configprops</td>
<td>显示所有的配置信息</td>
</tr>
<tr>
<td>/env</td>
<td>显示所有的环境变量信息</td>
</tr>
<tr>
<td>/mappings</td>
<td>显示所有控制器相关信息</td>
</tr>
<tr>
<td>/info</td>
<td>显示自定义用户信息配置</td>
</tr>
<tr>
<td>/metrics</td>
<td>显示应用指标相关信息</td>
</tr>
<tr>
<td>/health</td>
<td>显示健康检查状态信息，<code>up</code>表示成功 <code>down</code>表示失败</td>
</tr>
<tr>
<td>/threaddump</td>
<td>显示程序线程的信息</td>
</tr>
</tbody>
</table>
<h2 id="整合图形化SpringBoot-Admin-SBA">整合图形化SpringBoot Admin:SBA</h2>
<p>上面我们讲了Spring Boot Actuator , 可以通过http协议获取系统状态信息 , 但是返回的是JSON格式数据, 看起来不太方面, 而且还需要记忆路径, 比较麻烦 , Spring Boot Admin 给我们提供了更加友好的可视化界 面来查看这些信息 ! Spring Boot Admin 是一个开源社区项目，用于管理和监控 SpringBoot 应用程序。</p>
<p>应用程序作为Spring Boot Admin Client 向 Spring Boot Admin Server 注册 , Client 会定时向 Server 发送数据, Server 使用友好界面展 示数据。</p>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/25f9d398b5b37b386699ab81e69f7650.png" alt=""></p>
<h3 id="搭建-Admin-服务器端">搭建 Admin 服务器端</h3>
<ol>
<li>
<p>创建模块 springboot-admin-server,导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>2.在主启动类上加@EnableAdminServer 注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(AdminApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="搭建Admin客户端">搭建Admin客户端</h3>
<p>在各个微服务（Admin客户端）整合AdminServer</p>
<p>第一步：导入Admin客户端依赖信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第二步：向 admin-server 注册的地址为 <a href="http://localhost:8080">http://localhost:8080</a>，最后暴露自己的 actuator 的所有端口信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8080</span></span><br></pre></td></tr></table></figure>
<p>第三步：启动服务器端和客户端进行测试：</p>
<h3 id="动态日志监控及级别调整">动态日志监控及级别调整</h3>
<p>在微服务的src/main/resources目录下创建logback-spring.xml文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志的输出目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;D://logs//spzx-cloud-user//logs&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制台日志格式：彩色日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- boldMagenta:粗红--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cyan:青色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- white:白色 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magenta:洋红 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) %highlight([%-5level]) %green(%logger) %msg%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文件日志格式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%date&#123;yyyy-MM-dd HH:mm:ss&#125; [%-5level] %thread %file:%line %logger %msg%n&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ENCODING&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 临界值过滤器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;ENCODING&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文件日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;//log.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date&#123;yyyy-MM-dd HH:mm:ss&#125; %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;ENCODING&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第二步：在微服务的application.yml文件中配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">logfile:</span></span><br><span class="line">      <span class="attr">external-file:</span> <span class="string">D://logs/spzx-cloud-user/info.log</span></span><br></pre></td></tr></table></figure>
<p>第三步：再次访问Admin服务器端：即可看到实时监控日志、并可以调节日志的级别。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>操作日志方案</title>
    <url>/2025/04/27/%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1>目标</h1>
<blockquote>
<p>记录实体类属性的变化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scjt.jypm.project.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CompareType</span> &#123;</span><br><span class="line">    DEFAULT, <span class="comment">// 默认直接比较</span></span><br><span class="line">    USER_NICKNAME, <span class="comment">// 根据ID查找用户昵称</span></span><br><span class="line">    BOOLEAN_TO_TEXT, <span class="comment">// 0/1 转换为 否/是</span></span><br><span class="line">    DICTIONARY, <span class="comment">// 字典类型比较</span></span><br><span class="line">    DATE <span class="comment">// 时间格式化比较</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scjt.jypm.project.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> LogField &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>; <span class="comment">// 字段名称</span></span><br><span class="line">    CompareType <span class="title function_">type</span><span class="params">()</span> <span class="keyword">default</span> CompareType.DEFAULT; <span class="comment">// 比较类型</span></span><br><span class="line">    String <span class="title function_">dictType</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 字典类型（仅 DICTIONARY 类型使用）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.scjt.jypm.project.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.scjt.jypm.project.annotation.CompareType;</span><br><span class="line"><span class="keyword">import</span> com.scjt.jypm.project.annotation.LogField;</span><br><span class="line"><span class="keyword">import</span> com.scjt.jypm.system.mapper.SysDictTypeMapper;</span><br><span class="line"><span class="keyword">import</span> com.scjt.jypm.system.mapper.SysUserMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogHelper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysUserMapper sysUserMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SysDictTypeMapper sysDictTypeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogHelper</span><span class="params">(SysUserMapper sysUserMapper, SysDictTypeMapper sysDictTypeMapper)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sysUserMapper = sysUserMapper;</span><br><span class="line">        <span class="built_in">this</span>.sysDictTypeMapper = sysDictTypeMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">formatValue</span><span class="params">(Object value, CompareType type, String dictType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;空&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> USER_NICKNAME:</span><br><span class="line">                <span class="keyword">return</span> getUserNickname(String.valueOf(value));</span><br><span class="line">            <span class="keyword">case</span> BOOLEAN_TO_TEXT:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>.equals(value) ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> DICTIONARY:</span><br><span class="line">                <span class="keyword">return</span> getDictName(dictType, String.valueOf(value));</span><br><span class="line">            <span class="keyword">case</span> DATE:</span><br><span class="line">                <span class="keyword">return</span> value.toString(); <span class="comment">// 直接调用 toString</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> value.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getUserNickname</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(userId)</span><br><span class="line">                .flatMap(id -&gt; Optional.ofNullable(sysUserMapper.getNickNameById(id)))</span><br><span class="line">                .orElse(<span class="string">&quot;未知用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getDictName</span><span class="params">(String dictType, String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(value)</span><br><span class="line">                .flatMap(l -&gt; Optional.ofNullable(sysDictTypeMapper.selectDictTypeByTypeAndValue(dictType,value).getDictLabel()))</span><br><span class="line">                .orElse(<span class="string">&quot;空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;String&gt; <span class="title function_">compareObjects</span><span class="params">(T oldData, T newData)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        List&lt;String&gt; changeLog = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Class&lt;?&gt; clazz = oldData.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field field : clazz.getDeclaredFields()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(LogField.class)) &#123;</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">LogField</span> <span class="variable">logField</span> <span class="operator">=</span> field.getAnnotation(LogField.class);</span><br><span class="line">                <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> logField.name();</span><br><span class="line">                <span class="type">CompareType</span> <span class="variable">type</span> <span class="operator">=</span> logField.type();</span><br><span class="line">                <span class="type">String</span> <span class="variable">dictType</span> <span class="operator">=</span> logField.dictType();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">oldValue</span> <span class="operator">=</span> field.get(oldData);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">newValue</span> <span class="operator">=</span> field.get(newData);</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">formattedOldValue</span> <span class="operator">=</span> formatValue(oldValue, type, dictType);</span><br><span class="line">                <span class="type">String</span> <span class="variable">formattedNewValue</span> <span class="operator">=</span> formatValue(newValue, type, dictType);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!Objects.equals(formattedOldValue, formattedNewValue)) &#123;</span><br><span class="line">                    changeLog.add(String.format(<span class="string">&quot;[%s] 从 %s 修改为 %s&quot;</span>, fieldName,</span><br><span class="line">                            defaultIfEmpty(formattedOldValue), defaultIfEmpty(formattedNewValue)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> changeLog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">defaultIfEmpty</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (value == <span class="literal">null</span> || value.isEmpty()) ? <span class="string">&quot;空&quot;</span> : value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>数据库</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `prj_operation_log` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `prj_number` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;项目编号&#x27;</span>,</span><br><span class="line">  `operation_type` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作类型&#x27;</span>,</span><br><span class="line">  `operator` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作人&#x27;</span>,</span><br><span class="line">  `operation_info` json <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;操作信息&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建日期&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新日期&#x27;</span>,</span><br><span class="line">  `log_type` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;日志类型（字典 project_log_type）&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">64</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_unicode_ci COMMENT<span class="operator">=</span><span class="string">&#x27;项目库详情操作日志表&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>日志收集</title>
    <url>/2025/09/15/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h2 id="日志处理的组件">日志处理的组件</h2>
<ul>
<li>收集</li>
<li>存储</li>
<li>检索</li>
</ul>
<h3 id="日志收集的组件">日志收集的组件</h3>
<ul>
<li>
<p>LogStash</p>
</li>
<li>
<p>FileBeat</p>
</li>
<li>
<p>Alloy</p>
</li>
<li>
<p>ProTail</p>
</li>
</ul>
<h3 id="日志存储组件">日志存储组件</h3>
<ul>
<li>
<p>Loki</p>
</li>
<li>
<p>ElaticSearch</p>
</li>
<li>
<p>Promentheus (时序数据库)</p>
</li>
</ul>
<h3 id="日志的检索组件">日志的检索组件</h3>
<ul>
<li>kibana</li>
<li>Grafana</li>
</ul>
<h2 id="日志处理的两种解决方案">日志处理的两种解决方案</h2>
<ul>
<li>重量级日志: ELK
<ul>
<li>ElaticSerach (存储)</li>
<li>LogStash (收集)</li>
<li>Kibana (检索, 可视化)</li>
</ul>
</li>
<li>轻量级: GLA
<ul>
<li>Grafana (检索)</li>
<li>Loki (存储)
<ul>
<li>breakend</li>
<li>Loki write</li>
<li>Loki read</li>
<li>Nginx (gateWay)</li>
</ul>
</li>
<li>Alloy (收集)
<ul>
<li>配置服务标签, 根据标签信息给日志进行分类</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="区别">区别:</h3>
<ul>
<li>
<p>ELK:</p>
<ul>
<li>
<p>Es使用java开发, 启动时占用内存大</p>
</li>
<li>
<p>存储: Es在存储时, 将日志的所有消息存储起来, 在查找时是一条条查找,检索速度慢</p>
</li>
</ul>
</li>
<li>
<p>GLA:</p>
<ul>
<li>Loki使用go语言开发, 占用内存小</li>
<li>引入携程优化, 速度更快</li>
<li>Loki在存储时, 通过给日志打上不同的标签, 通过标签来查找日志, 也就是将标签设置未索引, 在查找日志信息时, 可以根据标签查找日志, 可以过滤掉一些没用的日志, 查找速度会更快</li>
</ul>
</li>
</ul>
<h2 id="GLA底层工作原理">GLA底层工作原理</h2>
<h3 id="Loki中的组件">Loki中的组件</h3>
<ul>
<li>Nginx: 网关, Loki中的组件通过nginx进行通信</li>
<li>backend:
<ul>
<li>作用是堆收集的日志做处理</li>
<li>它主要由两个组件组成</li>
<li>loki write:
<ol>
<li>日志收集组件, 将日志信息发送给loki write,  loki write根据配置中的标签规则, 为该日志打上标签</li>
<li>将打好的日志发送给nginx, 由nginx发送日志信息,存储在三分对象或文件存储中,比如minio</li>
</ol>
</li>
<li>loki read: 日志读取组件
<ol>
<li>在Grafana发送检索语句LogQL个Loki read时,loki read 根据检索语句,做出处理</li>
<li>如何将处理好的检索请求发生给nginx, 由nginx 请求三方存储组件. 获取到对应的日志信息</li>
</ol>
</li>
</ul>
</li>
</ul>
<p><img src="http://120.26.79.238/minioapi/orange-blog/articleImages/1/f03a825845b16aa8e951731ea7f75da5.png" alt=""></p>
<h2 id="GLA使用流程">GLA使用流程</h2>
<p>[loki官网:](<a href="https://grafana.com/docs/loki/latest/">Grafana Loki | Grafana Loki documentation</a>) <a href="https://grafana.com/docs/loki/latest/">Grafana Loki | Grafana Loki documentation</a></p>
<p>Docker 部署</p>
<ol>
<li>
<p>创建文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> evaluate-loki</span><br><span class="line"><span class="built_in">cd</span> evaluate-loki</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>下载Loki和Alloy的默认配置文件, 下载docker compose 配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/grafana/loki/main/examples/getting-started/loki-config.yaml -O loki-config.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/grafana/loki/main/examples/getting-started/alloy-local-config.yaml -O alloy-local-config.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/grafana/loki/main/examples/getting-started/docker-compose.yaml -O docker-compose.yaml</span><br></pre></td></tr></table></figure>
<p>Loki的配置文件: 主要配置Loki中的组件的信息: nginx \ write \ read  \  grafana \ minio的信息</p>
<p>Alloy的配置文件:  主要编写拉取Log的服务 和 Log的标签规则. 在存储和检索时, 根据标签存储和检索</p>
<ul>
<li>
<p><code>loki-config.yaml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">memberlist:</span></span><br><span class="line">  <span class="attr">join_members:</span> [<span class="string">&quot;read&quot;</span>, <span class="string">&quot;write&quot;</span>, <span class="string">&quot;backend&quot;</span>]</span><br><span class="line">  <span class="attr">dead_node_reclaim_time:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">gossip_to_dead_nodes_time:</span> <span class="string">15s</span></span><br><span class="line">  <span class="attr">left_ingesters_timeout:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">bind_addr:</span> [<span class="string">&#x27;0.0.0.0&#x27;</span>]</span><br><span class="line">  <span class="attr">bind_port:</span> <span class="number">7946</span></span><br><span class="line">  <span class="attr">gossip_interval:</span> <span class="string">2s</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2023-01-01</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">tsdb</span></span><br><span class="line">      <span class="attr">object_store:</span> <span class="string">s3</span></span><br><span class="line">      <span class="attr">schema:</span> <span class="string">v13</span></span><br><span class="line">      <span class="attr">index:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">        <span class="attr">period:</span> <span class="string">24h</span></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">path_prefix:</span> <span class="string">/loki</span></span><br><span class="line">  <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">compactor_address:</span> <span class="string">http://backend:3100</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">s3:</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">minio:9000</span></span><br><span class="line">      <span class="attr">insecure:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">bucketnames:</span> <span class="string">loki-data</span></span><br><span class="line">      <span class="attr">access_key_id:</span> <span class="string">loki</span></span><br><span class="line">      <span class="attr">secret_access_key:</span> <span class="string">supersecret</span></span><br><span class="line">      <span class="attr">s3forcepathstyle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ring:</span></span><br><span class="line">    <span class="attr">kvstore:</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">memberlist</span></span><br><span class="line"><span class="attr">ruler:</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">s3:</span></span><br><span class="line">      <span class="attr">bucketnames:</span> <span class="string">loki-ruler</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compactor:</span></span><br><span class="line">  <span class="attr">working_directory:</span> <span class="string">/tmp/compactor</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>alloy-local-config.yaml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">discovery.docker</span> <span class="string">&quot;flog_scrape&quot;</span> &#123;</span><br><span class="line">	<span class="string">host</span>             <span class="string">=</span> <span class="string">&quot;unix:///var/run/docker.sock&quot;</span></span><br><span class="line">	<span class="string">refresh_interval</span> <span class="string">=</span> <span class="string">&quot;5s&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">discovery.relabel</span> <span class="string">&quot;flog_scrape&quot;</span> &#123;</span><br><span class="line">	<span class="string">targets</span> <span class="string">=</span> []</span><br><span class="line"></span><br><span class="line">	<span class="string">rule</span> &#123;</span><br><span class="line">		<span class="string">source_labels</span> <span class="string">=</span> [<span class="string">&quot;__meta_docker_container_name&quot;</span>]</span><br><span class="line">		<span class="string">regex</span>         <span class="string">=</span> <span class="string">&quot;/(.*)&quot;</span></span><br><span class="line">		<span class="string">target_label</span>  <span class="string">=</span> <span class="string">&quot;container&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">loki.source.docker</span> <span class="string">&quot;flog_scrape&quot;</span> &#123;</span><br><span class="line">	<span class="string">host</span>             <span class="string">=</span> <span class="string">&quot;unix:///var/run/docker.sock&quot;</span></span><br><span class="line">	<span class="string">targets</span>          <span class="string">=</span> <span class="string">discovery.docker.flog_scrape.targets</span></span><br><span class="line">	<span class="string">forward_to</span>       <span class="string">=</span> [<span class="string">loki.write.default.receiver</span>]</span><br><span class="line">	<span class="string">relabel_rules</span>    <span class="string">=</span> <span class="string">discovery.relabel.flog_scrape.rules</span></span><br><span class="line">	<span class="string">refresh_interval</span> <span class="string">=</span> <span class="string">&quot;5s&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">loki.write</span> <span class="string">&quot;default&quot;</span> &#123;</span><br><span class="line">	<span class="string">endpoint</span> &#123;</span><br><span class="line">		<span class="string">url</span>       <span class="string">=</span> <span class="string">&quot;http://gateway:3100/loki/api/v1/push&quot;</span></span><br><span class="line">		<span class="string">tenant_id</span> <span class="string">=</span> <span class="string">&quot;tenant1&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="string">external_labels</span> <span class="string">=</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>docker-compose.yaml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">read:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:latest</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&quot;-config.file=/etc/loki/config.yaml -target=read&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3101</span><span class="string">:3100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7946</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9095</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./loki-config.yaml:/etc/loki/config.yaml</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [ <span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1&quot;</span> ]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="string">&amp;loki-dns</span></span><br><span class="line">      <span class="attr">loki:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">write:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:latest</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&quot;-config.file=/etc/loki/config.yaml -target=write&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3102</span><span class="string">:3100</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7946</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9095</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./loki-config.yaml:/etc/loki/config.yaml</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [ <span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1&quot;</span> ]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="string">*loki-dns</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">alloy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/alloy:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./alloy-local-config.yaml:/etc/alloy/config.alloy:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">    <span class="attr">command:</span>  <span class="string">run</span> <span class="string">--server.http.listen-addr=0.0.0.0:12345</span> <span class="string">--storage.path=/var/lib/alloy/data</span> <span class="string">/etc/alloy/config.alloy</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">12345</span><span class="string">:12345</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gateway</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-euc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p /data/loki-data &amp;&amp; \</span></span><br><span class="line"><span class="string">        mkdir -p /data/loki-ruler &amp;&amp; \</span></span><br><span class="line"><span class="string">        minio server /data</span></span><br><span class="line"><span class="string"></span>    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ROOT_USER=loki</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ROOT_PASSWORD=supersecret</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_PROMETHEUS_AUTH_TYPE=public</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_UPDATE=off</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.data/minio:/data</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [ <span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost:9000/minio/health/live&quot;</span> ]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">15s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">20s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_PATHS_PROVISIONING=/etc/grafana/provisioning</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_AUTH_ANONYMOUS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_AUTH_ANONYMOUS_ORG_ROLE=Admin</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gateway</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-euc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p /etc/grafana/provisioning/datasources</span></span><br><span class="line"><span class="string">        cat &lt;&lt;EOF &gt; /etc/grafana/provisioning/datasources/ds.yaml</span></span><br><span class="line"><span class="string">        apiVersion: 1</span></span><br><span class="line"><span class="string">        datasources:</span></span><br><span class="line"><span class="string">          - name: Loki</span></span><br><span class="line"><span class="string">            type: loki</span></span><br><span class="line"><span class="string">            access: proxy</span></span><br><span class="line"><span class="string">            url: http://gateway:3100</span></span><br><span class="line"><span class="string">            jsonData:</span></span><br><span class="line"><span class="string">              httpHeaderName1: &quot;X-Scope-OrgID&quot;</span></span><br><span class="line"><span class="string">            secureJsonData:</span></span><br><span class="line"><span class="string">              httpHeaderValue1: &quot;tenant1&quot;</span></span><br><span class="line"><span class="string">        EOF</span></span><br><span class="line"><span class="string">        /run.sh</span></span><br><span class="line"><span class="string"></span>    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [ <span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1&quot;</span> ]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:latest</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./loki-config.yaml:/etc/loki/config.yaml</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3100&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;7946&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&quot;-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">gateway</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">read</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">entrypoint:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-euc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        cat &lt;&lt;EOF &gt; /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="string">        user  nginx;</span></span><br><span class="line"><span class="string">        worker_processes  5;  ## Default: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">        <span class="string">events</span> &#123;</span><br><span class="line">          <span class="string">worker_connections</span>   <span class="number">1000</span><span class="string">;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="string">http</span> &#123;</span><br><span class="line">          <span class="string">resolver</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.11</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">          <span class="string">server</span> &#123;</span><br><span class="line">            <span class="string">listen</span>             <span class="number">3100</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/</span> &#123;</span><br><span class="line">              <span class="string">return</span> <span class="number">200</span> <span class="string">&#x27;OK&#x27;</span><span class="string">;</span></span><br><span class="line">              <span class="string">auth_basic</span> <span class="string">off;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/api/prom/push</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://write:3100\$$request_uri;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/api/prom/tail</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://read:3100\$$request_uri;</span></span><br><span class="line">              <span class="string">proxy_set_header</span> <span class="string">Upgrade</span> <span class="string">\$$http_upgrade;</span></span><br><span class="line">              <span class="string">proxy_set_header</span> <span class="string">Connection</span> <span class="string">&quot;upgrade&quot;</span><span class="string">;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">~</span> <span class="string">/api/prom/.*</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://read:3100\$$request_uri;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/loki/api/v1/push</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://write:3100\$$request_uri;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">=</span> <span class="string">/loki/api/v1/tail</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://read:3100\$$request_uri;</span></span><br><span class="line">              <span class="string">proxy_set_header</span> <span class="string">Upgrade</span> <span class="string">\$$http_upgrade;</span></span><br><span class="line">              <span class="string">proxy_set_header</span> <span class="string">Connection</span> <span class="string">&quot;upgrade&quot;</span><span class="string">;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="string">location</span> <span class="string">~</span> <span class="string">/loki/api/.*</span> &#123;</span><br><span class="line">              <span class="string">proxy_pass</span>       <span class="string">http://read:3100\$$request_uri;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">EOF</span></span><br><span class="line">        <span class="string">/docker-entrypoint.sh</span> <span class="string">nginx</span> <span class="string">-g</span> <span class="string">&quot;daemon off;&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3100:3100&quot;</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;service&quot;</span>, <span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;status&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="attr">flog:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mingrammer/flog</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-f</span> <span class="string">json</span> <span class="string">-d</span> <span class="string">200ms</span> <span class="string">-l</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>启动docker compose</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>进入Grafana的主页面: <a href="http://localhost:3000/">http://localhost:3000</a></p>
</li>
</ol>
<h2 id="日志的LogQL语句分类">日志的LogQL语句分类</h2>
<ul>
<li>json数据</li>
<li>结构化数据</li>
<li>非结构化数据</li>
</ul>
<p>具体处理: <a href="https://grafana.com/docs/loki/latest/query/analyzer/">Simple LogQL simulator | Grafana Loki documentation</a></p>
<blockquote>
<p>在部署容器时,先指定日志格式为json格式,便于LogQL的编写</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>日志框架</title>
    <url>/2025/09/15/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="日志框架">日志框架</h2>
<p>门面：类似于标准层、接口层</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>JCL（Jakarta Commons Logging）</td>
<td>陈旧</td>
</tr>
<tr>
<td>SLF4J（Simple Logging Facade for Java）</td>
<td>适合（<strong>同一作者</strong>）</td>
</tr>
<tr>
<td>jboss-logging</td>
<td>特殊专业领域使用</td>
</tr>
</tbody>
</table>
<p>实现</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>log4j</td>
<td>最初版（<strong>同一作者</strong>）</td>
</tr>
<tr>
<td>JUL（java.util.logging）</td>
<td>JDK自带</td>
</tr>
<tr>
<td>log4j2</td>
<td>Apache收购log4j后全面重构，内部实现和log4j完全不同</td>
</tr>
<tr>
<td>logback</td>
<td>优雅、强大（<strong>同一作者</strong>）</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="使用：">使用：</h3>
<p>SLF4J（接口）-&gt;logBak(实现)</p>
<ol>
<li>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>Logger</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogTest</span>&#123;</span><br><span class="line">    </span><br><span class="line">    Logger logger= LogerFactory.getLogger(LogTest.class);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        logger.trance(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        logger.debug(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        logger.warn(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        logger.error(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;        </span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置文件<strong>logback.xml</strong>  在根路径下，固定名称</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志存放路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.path&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs/spzx-order&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;log.pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;20&#125; - [%method,%line] - %msg%n&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 系统日志输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;file_info&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志文件名格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志最大的历史 60天 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 过滤的级别 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;file_error&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 循环政策：基于时间创建日志文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志文件名格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志最大的历史 60天 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 过滤的级别 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 匹配时的操作：接收（记录） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 系统模块日志级别控制  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.spzx&quot;</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring日志级别控制  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework&quot;</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--系统操作日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;file_info&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;file_error&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>@Slf4j注解，自动注入log对象</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>权限菜单</title>
    <url>/2023/11/16/%E6%9D%83%E9%99%90%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<h2 id="表">表</h2>
<h3 id="角色表（role）">角色表（role）</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> role (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  description <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="菜单表（menu">菜单表（menu)</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `menu` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `path` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `icon` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父级id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">9</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="角色菜单关系（role-menu）">角色菜单关系（role_menu）</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role_menu` (</span><br><span class="line">  `role_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色id&#x27;</span>,</span><br><span class="line">  `menu_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`role_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci COMMENT<span class="operator">=</span><span class="string">&#x27;角色和菜单关系表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<hr>
<div class="note info no-icon modern"><ol>
<li><strong>配置设置</strong>：存储应用程序的配置信息，如系统设置、选项值等。</li>
<li><strong>数据映射</strong>：用于映射数据，例如将状态代码映射到状态描述。</li>
<li><strong>参照列表</strong>：用于存储固定的数据集合，如国家代码、语言代码、货币代码等。</li>
<li><strong>枚举类型</strong>：存储程序中使用的枚举值和它们的描述。</li>
</ol>
</div>
<h3 id="字典（dict">字典（dict)</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `dict` (</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">  `<span class="keyword">value</span>` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;类型&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="操作">操作</h2>
<h3 id="菜单管理">菜单管理</h3>
<p><img src="http://oss.zorange.online/blog/image-20231106182647363.png" alt=""></p>
<h3 id="角色管理">角色管理</h3>
<p><img src="http://oss.zorange.online/blog/image-20231106182804891.png" alt=""></p>
<p><img src="http://oss.zorange.online/blog/image-20231106182813462.png" alt=""></p>
<ul>
<li>动态菜单</li>
</ul>
<div class="note info no-icon modern"><p>不同用户在登录时，根据用户角色获取到对应的菜单，然后传给菜单组件 aside，动态渲染菜单</p>
</div>
<ul>
<li>动态路由</li>
</ul>
<p>在 router.js 写一个方法，动态添加路由,然后登录的时候调用这个方法，并且在刷新时重新设置路由</p>
<p><code>router.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取路由</span></span><br><span class="line"><span class="comment">// 刷新页面会丢失动态添加的路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">setRouters</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> storeMenus = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (storeMenus) &#123;</span><br><span class="line">    <span class="keyword">const</span> manageRouter = &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;manage&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Manage.vue&quot;</span>),</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: [],</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> menus = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(storeMenus).<span class="property">menus</span>;</span><br><span class="line">    menus.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">path</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> itemMneu = &#123;</span><br><span class="line">          <span class="attr">path</span>: item.<span class="property">path</span>.<span class="title function_">replace</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">          <span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/&quot;</span> + item.<span class="property">pagePath</span> + <span class="string">&quot;.vue&quot;</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        manageRouter.<span class="property">children</span>.<span class="title function_">push</span>(itemMneu);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">children</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        item.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> itemMneu = &#123;</span><br><span class="line">            <span class="attr">path</span>: item.<span class="property">path</span>.<span class="title function_">replace</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">            <span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/&quot;</span> + item.<span class="property">pagePath</span> + <span class="string">&quot;.vue&quot;</span>),</span><br><span class="line">          &#125;;</span><br><span class="line">          manageRouter.<span class="property">children</span>.<span class="title function_">push</span>(itemMneu);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 获取当前路由对象</span></span><br><span class="line">    <span class="keyword">const</span> currentRouter = router.<span class="title function_">getRoutes</span>().<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">name</span>);</span><br><span class="line">    <span class="comment">// 判断当前路由对象是否包含manage路由</span></span><br><span class="line">    <span class="keyword">if</span> (!currentRouter.<span class="title function_">includes</span>(<span class="string">&quot;manage&quot;</span>)) &#123;</span><br><span class="line">      router.<span class="title function_">addRoute</span>(manageRouter);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//重新添加路由</span></span><br><span class="line"><span class="title function_">setRouters</span>();</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>类型转换器（Converter）</title>
    <url>/2025/09/15/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8%EF%BC%88Converter%EF%BC%89/</url>
    <content><![CDATA[<h1>类型转换器（Converter）</h1>
<blockquote>
<p>在前端传进后端的是一个字符串类型时，但是后端获取的是一个枚举类，此时后端获取不到对应枚举类对象</p>
<p>此时就需要使用Coverter 来将String转换为枚举类对象</p>
</blockquote>
<h2 id="自定义转换器方法">自定义转换器方法</h2>
<ul>
<li>
<p>枚举类<code>ItemType</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ItemType</span> &#123;</span><br><span class="line"></span><br><span class="line">    APARTMENT(<span class="number">1</span>, <span class="string">&quot;公寓&quot;</span>),</span><br><span class="line">    ROOM(<span class="number">2</span>, <span class="string">&quot;房间&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Jsonvalue</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    ItemType(Integer code, String name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>
<p>定义转换器方法<code>StringToItemTypeConverter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToItemTypeConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, ItemType&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ItemType <span class="title function_">convert</span><span class="params">(String code)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ItemType value : ItemType.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value.getCode().equals(Integer.valueOf(code))) &#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;code非法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将转换器方法注册到webMvcConfiguration中，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringToItemTypeConverter stringToItemTypeConverter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">        registry.addConverter(<span class="built_in">this</span>.stringToItemTypeConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="自定义转换器工厂">自定义转换器工厂</h2>
<blockquote>
<p>当多个枚举类要进行转换时，可以使用工厂统一转换</p>
</blockquote>
<ol>
<li>
<p>要求：继承同一个枚举类<code>BaseEnum</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseEnum</span> &#123;</span><br><span class="line">    Integer <span class="title function_">getCode</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>定义枚举类工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToBaseEnumConverterFactory</span> <span class="keyword">implements</span> <span class="title class_">ConverterFactory</span>&lt;String, BaseEnum&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">BaseEnum</span>&gt; Converter&lt;String, T&gt; <span class="title function_">getConverter</span><span class="params">(Class&lt;T&gt; targetType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Converter</span>&lt;String, T&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> T <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">				<span class="comment">//Class.getEnumConstants() 方法是 Java 反射 API 中的一个方法，用于获取表示枚举类型的 Class 对象中所有枚举常量的数组</span></span><br><span class="line">                <span class="keyword">for</span> (T enumConstant : targetType.getEnumConstants()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (enumConstant.getCode().equals(Integer.valueOf(source))) &#123;</span><br><span class="line">                        <span class="keyword">return</span> enumConstant;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;非法的枚举值:&quot;</span> + source);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>注册枚举类工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringToBaseEnumConverterFactory stringToBaseEnumConverterFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">        registry.addConverterFactory(<span class="built_in">this</span>.stringToBaseEnumConverterFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="HTTPMessageConverter枚举类型转换">HTTPMessageConverter枚举类型转换</h2>
<p><code>HttpMessageConverter</code>依赖于Json序列化框架（默认使用Jackson）。其对枚举类型的默认处理规则也是枚举对象实例（ItemType.APARTMENT）和实例名称（“APARTMENT”）相互映射。不过其提供了一个注解<code>@JsonValue</code>，同样只需在<code>ItemType</code>枚举类的<code>code</code>属性上增加一个注解<code>@JsonValue</code>，Jackson便可完成从<code>ItemType</code>对象到<code>code</code>属性之间的互相映射。具体配置如下，详细信息可参考Jackson<a href="https://fasterxml.github.io/jackson-annotations/javadoc/2.8/com/fasterxml/jackson/annotation/JsonValue.html">官方文档</a>。</p>
<blockquote>
<p>当将枚举类发送给前端时，使用@Jsonvalue可以，指定返回枚举对象中的字段</p>
</blockquote>
<h1>TypeHandler（类型处理器）</h1>
<blockquote>
<p>从持久层到数据库，当数据库存储的是一个String 或其他 字面量，持久层穿入的是枚举类，此时也需要进行类型处理，使用的是TypeHandler，MybatisPlus提供的</p>
</blockquote>
<p>MybatisPlus提供了一个@EnumValue注解，将枚举类转换为字面量。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>自定义线程池</title>
    <url>/2025/09/15/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h1>自定义线程池</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.orange.blog.web.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomThreadConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_THREAD_QUEUE_SIZE</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_THREAD_KEEP_ALIVE_TIME</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_THREAD_LIFE_TIME</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">     <span class="keyword">final</span> <span class="type">String</span> <span class="variable">THREAD_POOL_NAME</span> <span class="operator">=</span> <span class="string">&quot;orange-blog-&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * setCorePoolSize(coreSize)：设置核心线程数（CPU核心数）</span></span><br><span class="line"><span class="comment">     * setMaxPoolSize(coreSize * 2)：最大线程数为核心线程数的2倍</span></span><br><span class="line"><span class="comment">     * setQueueCapacity(DEFAULT_THREAD_QUEUE_SIZE)：任务队列容量100</span></span><br><span class="line"><span class="comment">     * setKeepAliveSeconds(DEFAULT_THREAD_KEEP_ALIVE_TIME)：非核心线程空闲1000秒后回收</span></span><br><span class="line"><span class="comment">     * setThreadNamePrefix(THREAD_POOL_NAME)：线程名前缀&quot;orange-blog-&quot;</span></span><br><span class="line"><span class="comment">     * setWaitForTasksToCompleteOnShutdown(true)：应用关闭时等待任务完成</span></span><br><span class="line"><span class="comment">     * setAwaitTerminationSeconds(DEFAULT_THREAD_LIFE_TIME)：最多等待1000秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">OrangeBLogThreadPoolExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">coreSize</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(coreSize);</span><br><span class="line">        executor.setMaxPoolSize(coreSize * <span class="number">2</span>);</span><br><span class="line">        executor.setQueueCapacity(DEFAULT_THREAD_QUEUE_SIZE);</span><br><span class="line">        executor.setKeepAliveSeconds(DEFAULT_THREAD_KEEP_ALIVE_TIME);</span><br><span class="line">        executor.setThreadNamePrefix(THREAD_POOL_NAME);</span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="literal">true</span>);</span><br><span class="line">        executor.setAwaitTerminationSeconds(DEFAULT_THREAD_LIFE_TIME);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        log.info(<span class="string">&quot;OrangeBLogThreadPoolExecutor init success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>面试问题</title>
    <url>/2025/09/15/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1、项目中有没有使用过MySQL优化">1、项目中有没有使用过MySQL优化</h2>
<p>使用过:</p>
<p><strong>缓存层面</strong>:   <code>使用缓存</code> \  <code>提高缓存的命中率</code></p>
<ol>
<li>
<p>在查找专辑详情页时, 因为专辑详情页信息非常多, 是用户经常访问的请求, 所以我在处理这种请求时 ,使用了 redis作为缓存来降低对mysql 的访问.</p>
<p>并且为了处理数据库和缓存不一致的问题, 我采用了延迟双删的方式来,确保了数据库和缓存的最终一致性</p>
</li>
</ol>
<p><strong>业务维度层面</strong>: <code>减少不必要的sql</code> \  <code>批量处理</code></p>
<ol>
<li>在进行多个声音的查找时, 为了避免多次查找数据库, 我将在查找声音的详细信息时, 一次性将所有的全部id进行远程调用, 一次性查找全部的声音信息,避免了一些不必要的查找</li>
</ol>
<p><strong>索引优化:</strong></p>
<ul>
<li>
<p><strong>建立索引</strong> : <code>条件 \ order \ group 使用索引</code>  \ <code>区分度高的使用使用</code> \ <code>经常查询的字段</code> \ <code>使用连表查询,避免子查询</code></p>
<ol>
<li>因为在项目中,在对专辑详细进行查找时 ,进行使用 专辑的付费类型来查找专辑信息, 我对price_type这个字段设置了索引</li>
<li>在查看专辑的全部声音的接口中, 需要对声音信息进行排序, 而声音表中有个字段就是用来排序的, order这个字段,  我对这个字段也设置了索引</li>
</ol>
</li>
<li>
<p><strong>避免索引失效</strong>:<code>  计算 + 函数</code> \ <code> like以%开头</code> \ <code>is null \ is not null</code>  \ <code>避免索引类型转换</code> \ <code>!= \ &lt;&gt;</code> \  <code>排序: 无过滤</code> \  <code>建立和使用的顺序不一致</code> \ <code>方法反 ASC \ DESC</code></p>
</li>
<li>
<p><strong>查询优化器</strong>: <code>手动指定驱动表</code> \ <code>避免死锁和解决死锁</code></p>
<ol>
<li>在专辑和声音表进行联查时, 由于声音的信息比专辑表的行数据多, 所以, 我在进行连表查询时, 使用了STRAIGHT_JOIN关键字, 将这两个表的连表查询的驱动表设置为专辑表</li>
</ol>
</li>
<li>
<p>**数据层面: ** <code>分库分表</code> \ <code>冷热数据分离</code> \ <code>历史数据归档</code></p>
</li>
<li>
<p><strong>数据库配置层面</strong>:</p>
<ul>
<li>
<p>客户端配置: <code>最大连接池</code> \  <code>最小空闲连接数</code> \ <code>空闲连接超时时间</code> \  <code>连接的最大生命周期</code> \ <code>获取连接的超时时间</code></p>
</li>
<li>
<p>服务端层面: <code>max_connections服务端的最大连接数151</code> \ <code>wait_timeout客户端连接超时时间</code> \ <code>查询连接数 show processlist</code> \ <code>终止连接kill connection </code></p>
<ol start="5">
<li>
<p>优化I/O, 调整<code>innodb_buffer_pool_size</code>的大小 , 是用于缓存数据和索引的区域</p>
</li>
<li>
<p>优化JOIN, 调整<code>join_buffer_size</code>的大小 , 执行join时的数据缓冲区</p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<ol>
<li>因为后续项目可能会对声音和专辑这两个表进行分库分表, 所以, 我在对这两个表进行增删改查找时, 没有使用数据库的自增, 而是使用了mybatis-plus的雪花算法</li>
<li>在进行一些sql语句与条件查找时 , 我一般对不确定为字符串还是int类型的字段, 使用字符串来查找, 因为, 如果在数据库中这个字段为字符串 , 那它作为索引时, 不会失效, 即使它在数据库中为int类型, 发生了类型转换,   也是转换sql语句中的字符串转化为int类型, 并不影响索引的使用</li>
<li>尽量使连表查询, 少使用子查询(特列: 深分页)</li>
</ol>
<h2 id="2、项目中的日志如何处理">==2、项目中的日志如何处理==</h2>
<h2 id="3、如何和前端进行数据交互">==3、如何和前端进行数据交互==</h2>
<h2 id="4、项目中遇到过哪些问题">4、项目中遇到过哪些问题</h2>
<ol>
<li>
<p>使用<code>redis</code>做缓存和分布式锁时</p>
<ul>
<li>死锁</li>
<li>误删</li>
<li>锁过期</li>
<li>数据库 和 缓存数据不一致</li>
</ul>
</li>
<li>
<p><code>ThreadLoca</code>l导致内存泄漏</p>
</li>
<li>
<p><code>分布式事务</code>问题: RabbitMq的</p>
</li>
<li>
<p><code>RabbitMq</code>的三个问题</p>
<ul>
<li>消息的可靠性投递</li>
<li>消息的可靠性消费</li>
<li>消息的幂等性处理</li>
</ul>
</li>
<li>
<p>@Tranctional 本地<code>事务失效</code></p>
<ul>
<li>
<p>异常被捕获</p>
</li>
<li>
<p>方法中调用</p>
<p>解决办法:</p>
<ol>
<li>
<p>在类中循环依赖自己, 然后使用依赖对象调用, 在SpringBoot这样做,就会有循环依赖的问题, 解决办法: <code>allow-circular-references: true</code></p>
</li>
<li>
<p>使用AopContext对象获取当前类的代理对象, 使用代理对象调用该方法</p>
<p>开启<code>@EnableAspectJAutoProxy(exposeProxy = true)</code> 暴露代理对象</p>
<p>使用<code>AopContext.currentProxy()</code>获取当前类的代理对象</p>
</li>
<li>
<p>使用Applicationcontext对象获取代理对象</p>
<p>ApplicationContext.getBean(MyClass.class)</p>
</li>
</ol>
</li>
</ul>
</li>
<li>
<p>多端<code>重复消费</code>问题</p>
<p>解决: 在做幂等性时, 不再使用随机字符串, 而是根据用户和商品的id生产token</p>
<p>原因: 在多端下, 由于是随机生成的幂等性的token, 不具有代表性, 当多端同一个用户购买同一件商品时, 并不能区分出来, 所以就导致了重复消费的问题,</p>
</li>
<li>
<p>相同文件不同名字文件的<code>重复上传</code>问题</p>
<p>解决: 在上传前通过MD5加密. 然后上传时, 使用MD作为minio对象的Object值, 每次上传之前,只有minio的<code>statObject</code>  API判断桶中是否存在相同的对象.</p>
<p>如果存在, 获取该对象返回, 如果不存在,直接上传</p>
</li>
<li>
<p><code>异步</code>时,数据不完整</p>
<p>解决: 使用join  , Futruetask的get(); \ countdownLatch</p>
</li>
<li>
<p><code>异步</code>时, 使用自定义线程池时, 使用了LinkedBlocingQueue,未设置大小,导致OOM异常</p>
</li>
<li>
<p><code>异步</code>时,ThreadLocal中的数据获取不到</p>
</li>
<li>
<p><code>监听器</code>SpringApplicationRunListener 时, 第一次获取不到Bean对象</p>
<p>原因: 在第一次调用时, 是springcloud的nacos组件调用得到, 需要先判断是否存在</p>
</li>
<li>
<p>监听器SpringApplicationRunListenre未生效,</p>
<p>使用SPI机制注入</p>
</li>
<li>
<p>OpenFeign的请求头中数据丢失</p>
<p>原因: Openfeig 在生成新请求模板时, 没有负责原请求的请求头中的数据, 只对@RequestParam 和@RequestHeader 做了处理 ,</p>
<p>解决办法:</p>
<ol>
<li>作为参数传递</li>
<li>使用@RequestHeader</li>
<li>使用RequestInterceptor: 在Open生成请求对象之前, 会调用RequestInterceptor的apply方法并传入新的请求模板, 我们可以通过实现该接口, 在重写的方法中,统一对远程调用的请求模板做处理, 此时, 就可以根据SpringMVC的RequestContextHolder对象获取到前端请求的请求头信息, 然后再将请求头设置进Openfein的请求模板中, 这样, OpenFeign在创建请求对象时, 请求头中就会有我们设置进去的数据了</li>
</ol>
</li>
<li>
<p>Redisson导致大量线程被阻塞  \  大量线程被死锁</p>
<ol>
<li>在上锁时,不使用lock, 使用tryLock,</li>
<li>未正确使用Readisson造成 , 使用try-finally, 在finally块中释放锁, 确保锁能被正常是否和停止锁续期</li>
</ol>
</li>
<li>
<p>Long, BigDecimal返回给前端时,精度丢失问题</p>
<p>解决流程: 在SpingMVC的配置文件中, 将他们的序列化器换为自定义的</p>
</li>
</ol>
<h2 id="5、项目中有没有遇到过内存泄漏和cpu被打满。">5、项目中有没有遇到过内存泄漏和cpu被打满。</h2>
<p>有:</p>
<ol>
<li>内存泄漏: 使用ThreadLocal传递参数未移除</li>
<li>CPU大满: 使用redis做缓存和分布式锁时, 在高并发下自旋造成的  \  高并发下 大量消息多次重试 \</li>
</ol>
<h2 id="6、项目中有没有用到异步多线程以及遇到了什么问题。">6、项目中有没有用到异步多线程以及遇到了什么问题。</h2>
<ol>
<li>
<p><code>异步</code>时,数据不完整</p>
<p>解决: 使用join  , Futruetask的get(); \ countdownLatch</p>
</li>
<li>
<p><code>异步</code>时, 使用自定义线程池时, 使用了LinkedBlocingQueue,未设置大小,导致OOM异常</p>
</li>
<li>
<p><code>异步</code>时,ThreadLocal中的数据获取不到</p>
</li>
</ol>
<h2 id="7、项目中设计过哪些表，对表的设计如何考虑">7、项目中设计过哪些表，对表的设计如何考虑</h2>
<p>在专辑详情模块中, 我主要设计了 album_info  \  track_info  \ 它们各自的统计表</p>
<ol>
<li>对于album_info 和 track_info表设计的考虑,</li>
<li>名字, 采用小写 + 下划线</li>
<li>不使用外键, 保证表的独立性</li>
<li>考虑到未来可能会对这两个表进行分表操作,所以在对这两个表设计id时,并没有采用数据的自增, 而是使用了Mybatis的雪花算法.</li>
<li>对于这两个表的操作会经常进行连表查询,根据专辑的付费类型 进行查询, 对album_info的price_type建立索引</li>
<li>在专辑详情中, 展示声音列表时, 需要排序, 我单独设计了一个order字段, 并对这个字段建立了索引</li>
<li>对于既可以使用int型和string型的字段, 我一般设置为int型, 避免因为类型转换导致的索引失效问题</li>
</ol>
<h2 id="8、项目中用到过SpringCloud的哪些组件">8、项目中用到过SpringCloud的哪些组件</h2>
<p>nacos \ openfeign \ gateway \ Sentinel</p>
<h2 id="9、谈谈你对SpringBoot的自动配置原理">9、谈谈你对SpringBoot的自动配置原理</h2>
<ol>
<li>
<p>核心注解SpringBootApplication</p>
<p>在这个核心注解下有三个注解</p>
<ul>
<li>SpringBootConfiguaration  : 表明这是一个SpringBoot的配置类</li>
<li>EnableAutoConfiguaration : 这是SpringBoot的自动配置的核心注解</li>
<li>ComponentScan注解: 用于排除一些不需要的组件</li>
</ul>
</li>
<li>
<p>SpringBootConfiguaration注解的原理</p>
<p>在SpringBoot项目中, 每个项目都会有直接或间接依赖于spring -boot-starter 包 ,在这个包中又依赖了spring -boot- autoconfiguaration这个包, 在这个包下</p>
<p>springboot已经编写好了142配置类, 它们全类名都存储在resources/META-INF/spring/org.springframeword.boot.autoconfig.AutoConfiguration.imports文件中,</p>
<p>但是这不代表这142个配置类都会被加载.</p>
</li>
<li>
<p>ConditionXXX,SpringBoot会根据配置类上的Condition注解,选择性的加载配置类, 例如ConditionOnClass, 只有在引入对应配置类所依赖的包时, 才会加载该配置类</p>
<p>ConditionOnProperties, 会根据配置文件中是否有对应的配置信息,来选择性的加载配置类</p>
</li>
<li>
<p>SpringBoot还会根据AutoConfigurationImportSelector来顺序性的加载配置文件</p>
</li>
</ol>
<h2 id="10、SpringBoot和SpringCloud的配置文件加载顺序以及优先级">==10、SpringBoot和SpringCloud的配置文件加载顺序以及优先级==</h2>
<p><strong>优先级:</strong></p>
<p>配置中心 &gt;  环境变量&gt; JVM系统属性 &gt; 命令行 &gt; bootstrap.properties &gt; bootstrap.yml &gt; applicatio.properties &gt; application.yml &gt; application-{profile}.properties &gt;</p>
<p>applicatoin-{profile}.yml</p>
<p><strong>加载顺序</strong></p>
<p>bootstrap.properties &gt; bootstarp.yml &gt; 配置中心 &gt; application.properties &gt; application.yml &gt; application-{profile}.properties &gt; application-{profiles}.yml &gt;</p>
<p>命令行&gt; JVM配置 &gt; 环境变量</p>
<p>简化:</p>
<p>加载顺序: bootstrap.properties &gt; bootstrap.yml &gt; 配置中心 &gt; application.peoperties&gt; application.yml &gt; application-{profile}.bootstrap/yml</p>
<p>优先级: 配置中心 &gt; bootstrap.properties &gt; bootstrap.yml &gt; application.properties &gt; application.yml  &gt; application-{profiles}.bootstrap/yml</p>
<h2 id="11、jvm调优了解过哪些">==11、jvm调优了解过哪些==</h2>
<ol>
<li>自定义堆大小
<ul>
<li>-Xmx100m : 设置最大堆大小</li>
<li>-Xms100m :设置初始堆大小</li>
<li>调整年轻代和老年代的大小<code>-XX:NewSize=1m</code>和<code> -XX:MaxNewSize=2m</code></li>
</ul>
</li>
<li>设置虚拟机栈的大小
<ul>
<li>-Xss256k</li>
</ul>
</li>
<li>指定G1垃圾回收器
<ul>
<li>-XX:+UseG1GC</li>
</ul>
</li>
</ol>
<h2 id="12、运行时数据区的组成以及各自空间作用">12、运行时数据区的组成以及各自空间作用</h2>
<ul>
<li>
<ol>
<li>非共享区域</li>
</ol>
<p>这些区域是线程私有的，每个线程都有自己的独立副本。</p>
<p>1.1 <strong>虚拟机栈（JVM Stack）</strong></p>
<p>每个线程在执行时都会创建一个虚拟机栈，栈中包含了每个方法调用的状态信息。每当一个方法被调用时，JVM 会为该方法分配一个栈帧（stack frame）。栈帧用于存储以下内容：</p>
<ul>
<li><strong>局部变量表</strong>：方法中的局部变量，包括基本数据类型（如 <code>int</code>、<code>float</code> 等）和对象引用（例如对象的内存地址）。局部变量表的大小在编译时确定，因此非常高效。</li>
<li><strong>动态链接</strong>：与方法相关的类的符号引用，允许在运行时进行方法调用的解析。</li>
<li><strong>方法出口</strong>：记录方法执行完毕后返回的地址，用于方法执行完毕后跳转到正确的位置继续执行。</li>
<li><strong>操作数栈</strong>：存储方法调用过程中的临时数据，比如计算结果，或者存储操作数。操作数栈的大小在编译时设定，在执行时动态变化。</li>
</ul>
<p>每个线程拥有独立的虚拟机栈，且栈的深度由方法的调用深度决定。如果栈深度超过了 JVM 的栈大小限制，就会抛出 <code>StackOverflowError</code>。</p>
<p>1.2 <strong>本地方法栈（Native Method Stack）</strong></p>
<p>本地方法栈是专门为本地方法（Native Method）服务的区域。它与虚拟机栈类似，不同的是，本地方法栈是用来处理 Java 代码之外（通常是使用 C、C++ 等语言编写）的本地方法调用的。</p>
<p>本地方法栈和虚拟机栈一样，每个线程有一个独立的栈。它保存了 JNI（Java Native Interface）调用所需的本地方法信息。</p>
<p>1.3 <strong>PC 程序计数器（Program Counter Register）</strong></p>
<p>每个线程都拥有一个独立的 PC 寄存器。程序计数器是一个指针，指向当前线程所执行的字节码指令的地址。因为 JVM 是基于栈的执行模型，程序计数器用于指示当前线程执行到哪条指令。</p>
<ul>
<li><strong>字节码指令</strong>：当线程执行的是 Java 方法时，PC 会指向当前方法的字节码地址。</li>
<li><strong>本地方法</strong>：如果当前执行的是本地方法，PC 程序计数器值则为 <code>0</code>，表示本地方法的执行与 Java 代码无关。</li>
</ul>
<p>PC 寄存器并不会影响方法栈的内容，但它帮助 JVM 定位当前线程正在执行的指令。</p>
<ol start="2">
<li>共享区域</li>
</ol>
<p>这些区域是所有线程共享的，即所有线程访问相同的内存区域。</p>
<p>2.1 <strong>堆（Heap）</strong></p>
<p>堆是 JVM 中最大的一块内存区域，几乎所有的对象实例都在堆中分配内存。堆的作用是存储对象的实例数据，并且也是垃圾回收器（GC）关注的重点区域。</p>
<ul>
<li><strong>对象分配</strong>：当我们通过 <code>new</code> 关键字创建对象时，JVM 会在堆中为对象分配内存。堆中的内存是共享的，所有线程都可以访问。</li>
<li><strong>垃圾回收</strong>：垃圾回收主要发生在堆中，通过标记清除、复制回收或 G1 GC 等方式回收不再使用的对象内存。</li>
</ul>
<p>堆空间的大小可以通过 JVM 参数来控制，例如 <code>-Xms</code> 设置初始堆大小，<code>-Xmx</code> 设置最大堆大小。堆的大小影响垃圾回收的频率和性能。</p>
<p>2.2 <strong>方法区（Method Area）</strong>(JDK8以前叫永久代) 都是元空间实现的一张方式</p>
<p>方法区存储的是类的相关信息、常量池、静态变量、即时编译（JIT）编译器的代码等。方法区是共享的，所有线程都可以访问。方法区是 JVM 内存的一个非常重要的区域，它包含以下内容：</p>
<ul>
<li><strong>类的字节码</strong>：方法区存储每个类的结构信息（如类的元数据），包括类的字段、方法、父类等。</li>
<li><strong>运行时常量池</strong>：运行时常量池存储类加载过程中使用的常量，比如字符串字面量、数字常量等。常量池存储的是从类字节码文件中提取出来的常量信息。</li>
<li><strong>静态变量和方法</strong>：静态变量属于类而不属于实例，保存在方法区中。</li>
<li><strong>JIT 编译后的代码</strong>：当 JVM 执行 <code>java</code> 程序时，一些热点代码会被即时编译为机器码，这些编译后的机器码也存储在方法区中。</li>
</ul>
</li>
</ul>
<h2 id="13、垃圾回收算法有哪些以及谈谈CMS垃圾回收器的了解">13、垃圾回收算法有哪些以及谈谈CMS垃圾回收器的了解</h2>
<ul>
<li>
<p>垃圾的标记算法:</p>
<p>引用计数法  \ 根可达性算法</p>
</li>
<li>
<p>垃圾回收算法:</p>
<ol>
<li>标记清除法</li>
<li>复制算法</li>
<li>标记整理清除</li>
<li>分代整理: 就是前面两种算法的混合使用, 年轻代使用:复制算法 . 老年代使用标识整理清除算法</li>
</ol>
</li>
<li>
<p>==CMS垃圾回收器 (并行)==</p>
<p>CMS 垃圾回收器主要由两个阶段组成：标记（Mark）阶段和清理（Sweep）阶段。与传统的串行垃圾回收器不同，CMS 旨在通过并发工作来缩短停顿时间，具体过程如下：</p>
<ol>
<li>
<p><strong>初始标记（Initial Mark）</strong>：</p>
<ul>
<li>这个阶段会标记所有的 “GC Root”（即活动对象）。它需要停止所有应用线程，因此会有较短的停顿。</li>
</ul>
</li>
<li>
<p><strong>并发标记（Concurrent Mark）</strong>：</p>
<ul>
<li>在此阶段，CMS 垃圾回收器会并发地扫描整个堆中的对象，标记出哪些对象是可达的。这个过程是并行的，不需要暂停应用线程。</li>
</ul>
</li>
<li>
<p><strong>并发预清理（Concurrent Preclean）</strong>：</p>
<ul>
<li>在并发标记阶段后，CMS 会进行一个预清理过程，清理一些由于并发标记产生的垃圾对象。</li>
</ul>
</li>
<li>
<p><strong>重新标记（Remark）</strong>：</p>
<ul>
<li>这个阶段需要暂停应用线程，标记在并发标记期间发生了变化的对象。由于这是短暂的，停顿时间会较短。</li>
</ul>
</li>
<li>
<p><strong>并发清理（Concurrent Sweep）</strong>：</p>
<ul>
<li>这是并发清理阶段，会清除那些未被标记的对象。与传统的垃圾回收器不同，CMS 在这个阶段仍然不需要暂停应用线程。</li>
</ul>
</li>
<li>
<p><strong>并发整理（Concurrent Compact）</strong>（可选）：</p>
<ul>
<li>对于一些较大的对象和碎片，CMS 还会进行整理阶段，避免内存碎片化。这个阶段有时会被禁用，以减少停顿时间。</li>
</ul>
</li>
</ol>
<p>优点</p>
<ul>
<li><strong>减少停顿时间</strong>：与其他垃圾回收器相比，CMS 的最大优势是可以减少停顿时间，尤其在应用需要高响应时。</li>
<li><strong>并发标记和清理</strong>：通过并发的标记和清理工作，CMS 可以在大部分时间里继续应用线程的执行，避免长时间的停顿。</li>
</ul>
<p>缺点</p>
<ul>
<li><strong>内存碎片</strong>：由于 CMS 不会进行压缩，可能导致堆内存中的碎片化问题。尤其在长时间运行后，这可能导致 Full GC 被触发。</li>
<li><strong>较高的 CPU 占用</strong>：CMS 在执行并发标记时会消耗较多的 CPU 资源。</li>
<li><strong>停顿时间不可预测</strong>：虽然 CMS 可以减少停顿时间，但某些情况下仍然会出现较长的停顿，尤其是在 Full GC 时。</li>
</ul>
<p><strong>配置</strong></p>
<p>在启动 Java 程序时，可以通过以下参数来启用 CMS 垃圾回收器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC</span><br></pre></td></tr></table></figure>
<p>另外，可以通过一些选项来调整垃圾回收行为，如：</p>
<ul>
<li><code>-XX:CMSInitiatingOccupancyFraction=&lt;percentage&gt;</code>：设置触发 CMS 垃圾回收的堆内存占用阈值，默认值为 68%。</li>
<li><code>-XX:+UseCMSInitiatingOccupancyOnly</code>：只使用上述阈值触发垃圾回收。</li>
<li><code>-XX:+DisableExplicitGC</code>：禁用显式的垃圾回收调用，以避免对 CMS 垃圾回收产生干扰。</li>
</ul>
<p><strong>总结</strong></p>
<p>CMS 垃圾回收器是专为降低垃圾回收停顿时间设计的。它通过并发标记和清理来减少停顿，适用于对延迟敏感的应用程序。然而，CMS 在内存碎片方面的缺点和高 CPU 占用使得它并不适用于所有场景，特别是在长期运行的系统中。在 Java 9 之后，JVM 推出了 G1 垃圾回收器，它被认为是对 CMS 的替代，提供了更好的性能和更稳定的响应时间。</p>
</li>
</ul>
<h2 id="14、创建线程池的方式有哪些execute和submit的区别">14、创建线程池的方式有哪些execute和submit的区别</h2>
<ul>
<li>
<p>创建线程池的方法:</p>
<ol>
<li>
<p>使用工具类Excutros.Executors.newCachedThreadPool();   默认最大线程池的数量为Intege的最大值</p>
</li>
<li>
<p>使用工具类的Executors.newFixedThreadPool(100);  可以手动指定最大线程池</p>
</li>
<li>
<p>newSingleThreadExecutor(), 创建只有一个线程的线程池, 提交的任务会顺序的执行</p>
</li>
<li>
<p>自定义线程池,new ThreadPoolExecutor();</p>
</li>
</ol>
</li>
<li>
<p>execute和submit的区别:</p>
<p><code>Executor</code> 接口提供了两种提交任务的方式：<code>execute()</code> 和 <code>submit()</code>。它们的区别主要体现在任务的类型、返回值和异常处理上。</p>
<ol>
<li>
<p>execute():</p>
<p><strong>参数</strong>： <code>execute()</code> 方法接收一个实现了 <code>Runnable</code> 接口的任务。<code>Runnable</code> 任务是没有返回值的任务，它的 <code>run()</code> 方法没有返回结果。</p>
<p><strong>返回值</strong>： <code>execute()</code> 方法没有返回值，它只能提交任务并执行，不关心任务执行的结果。</p>
</li>
<li>
<p>submit()</p>
<p><strong>参数</strong>： <code>submit()</code> 方法既可以接收实现了 <code>Runnable</code> 接口的任务，也可以接收实现了 <code>Callable</code> 接口的任务。</p>
<ul>
<li><code>Runnable</code> 是不返回结果的任务。</li>
<li><code>Callable</code> 是有返回值的任务，<code>Callable.call()</code> 方法可以返回一个结果。</li>
</ul>
<p><strong>返回值</strong>：</p>
<ul>
<li>如果传递的是 <code>Callable</code> 类型任务，<code>submit()</code> 方法返回的 <code>Future</code> 对象的 <code>get()</code> 方法会返回任务的结果。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="15、如何实现两个线程通信，编写一段代码">15、如何实现两个线程通信，编写一段代码</h2>
<ul>
<li>
<p>模板:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 定义资源类、方法</span><br><span class="line">2. 资源类方法：</span><br><span class="line">	判断（符合条件就运行，不符合就等待）</span><br><span class="line">	执行</span><br><span class="line">	唤醒</span><br><span class="line">3. 通过多线程操作共享资源</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadCommunicationTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SharedResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SharedResource</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动多个消费者线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(resource), <span class="string">&quot;消费者-&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动一个生产者线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(resource), <span class="string">&quot;生产者&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SharedResource</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 共享资源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_RESOURCE</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 最大资源容量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取资源（消费者）</span></span><br><span class="line">    <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">consume</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (resource &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 等待资源...&quot;</span>);</span><br><span class="line">            wait(); <span class="comment">// 等待资源</span></span><br><span class="line">        &#125;</span><br><span class="line">        resource--;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 消费资源，当前资源: &quot;</span> + resource);</span><br><span class="line">        notifyAll(); <span class="comment">// 通知其他线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产资源（生产者）</span></span><br><span class="line">    <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">produce</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (resource &gt;= MAX_RESOURCE) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 资源已满，等待消费...&quot;</span>);</span><br><span class="line">            wait(); <span class="comment">// 等待消费</span></span><br><span class="line">        &#125;</span><br><span class="line">        resource++;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 生产资源，当前资源: &quot;</span> + resource);</span><br><span class="line">        notifyAll(); <span class="comment">// 通知其他线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SharedResource resource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(SharedResource resource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                resource.produce(); <span class="comment">// 生产资源</span></span><br><span class="line">                Thread.sleep(<span class="number">500</span>);  <span class="comment">// 模拟生产过程的延迟</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SharedResource resource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SharedResource resource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                resource.consume(); <span class="comment">// 消费资源</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);  <span class="comment">// 模拟消费过程的延迟</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="16、volatile的作用是什么，如何理解JMM内存模型">16、volatile的作用是什么，如何理解JMM内存模型</h2>
<ul>
<li>
<p>valatile的作用 :</p>
<ol>
<li>
<p>保证可见性</p>
<p>保证在多线程下, 变量的改变能被及时监听到</p>
</li>
<li>
<p>不能保证原子性</p>
</li>
<li>
<p>保证顺序性 : JVM在运行方法时, 会在不允许运行结果的前提下, 改变代码执行的顺序 ,但是在多线程下, 如果改变代码执行顺序,可能会影响其他线程的结果</p>
</li>
</ol>
</li>
<li>
<p>==JVM内存模型==</p>
<p>VM 内存模型</p>
<p>JVM 内存模型主要由 <strong>主内存</strong> 和 <strong>工作内存</strong> 两部分组成。每个线程都有自己独立的工作内存，而共享的主内存则由所有线程共享。</p>
<ol>
<li><strong>主内存（Main Memory）</strong></li>
</ol>
<ul>
<li><strong>定义</strong>：主内存是所有线程共享的内存区域。所有线程都通过主内存来交换数据。</li>
<li><strong>内容</strong>：主内存中存储了所有实例变量、静态变量、以及常量。</li>
<li><strong>作用</strong>：主内存确保所有线程对共享变量的修改能够被其他线程看到，是线程间通信的基础。</li>
</ul>
<ol start="2">
<li><strong>工作内存（Working Memory）</strong></li>
</ol>
<ul>
<li><strong>定义</strong>：每个线程都有自己的工作内存。工作内存保存着线程正在执行的变量的副本，也就是线程私有的内存。</li>
<li><strong>内容</strong>：线程在工作内存中存储了从主内存中读取的数据副本（通常是栈帧）。</li>
<li><strong>作用</strong>：工作内存不直接操作主内存中的数据，而是从主内存复制数据到工作内存中，线程对数据的操作都是在自己的工作内存中进行的，修改数据后会同步到主内存。</li>
</ul>
<ol start="3">
<li><strong>内存交互与共享机制</strong></li>
</ol>
<ul>
<li><strong>原子性</strong>：JVM 内存模型中有一套原子性操作机制，确保基本数据类型操作（如加、减）能够在多个线程间正确同步。</li>
<li><strong>可见性</strong>：为了保证线程之间的可见性，JVM 提供了各种同步机制（如 <code>volatile</code> 关键字），保证线程对共享变量的更新能够立即被其他线程看到。</li>
<li><strong>有序性</strong>：工作内存中的指令执行顺序和内存访问顺序在多线程环境下可能并不相同，JVM 提供了有序性保证，通过 <code>synchronized</code> 等关键字来控制。</li>
</ul>
<ol start="4">
<li><strong>内存屏障与锁机制</strong></li>
</ol>
<ul>
<li><strong>内存屏障（Memory Barrier）</strong>：它是保证线程对共享变量访问顺序的机制。通过在关键位置插入内存屏障，JVM 可以确保线程在执行某些操作时，不会将操作乱序执行。</li>
<li><strong>锁机制</strong>：<code>synchronized</code>、<code>ReentrantLock</code> 等锁机制用于确保线程对共享数据的互斥访问。</li>
</ul>
</li>
</ul>
<h2 id="17、MySQL事务的隔离级别以及不同隔离级别的问题">17、MySQL事务的隔离级别以及不同隔离级别的问题</h2>
<ul>
<li>
<p>隔离级别</p>
<ol>
<li>
<p>读未提交</p>
<p>问题: 脏读</p>
</li>
<li>
<p>读已提交</p>
<p>问题: 不可重复读</p>
</li>
<li>
<p>可重复读</p>
<p>问题: 幻读</p>
</li>
<li>
<p>串行化</p>
</li>
</ol>
</li>
</ul>
<h2 id="18、MySQL索引失效的场景有哪些">18、MySQL索引失效的场景有哪些</h2>
<ul>
<li>
<p>索引失效的场景。（结论）</p>
<ol>
<li>函数 和 计算</li>
<li>is null \ is not null</li>
<li>!= &lt;&gt;</li>
<li>类型转换(可能)</li>
<li>Like以%开头</li>
<li>定义索引和使用索引的顺序不同</li>
<li>排序中无过滤</li>
<li>范围查询右边的索引失效</li>
<li>排序时一个升序(ASE) 一个降序(DESC)</li>
</ol>
</li>
<li>
<p>失效的原因（原理）</p>
</li>
<li>
<p>如何理解索引。（理解）</p>
<ul>
<li>
<p>根据物理结构来区分:聚簇索引 \ 非聚簇索引 (叶子节点是否存储完整数据区分)</p>
<p>索引是一种数据结构, 在mysql中,索引的数据结构为B+数, B+数的底层,</p>
</li>
<li>
<p>四种类型的数据:</p>
<p>0 代表: 存储的是索引值和完整数据</p>
<p>1代表: 目录项</p>
<p>2 代表: 当前页中的最小值</p>
<p>3 代表: 当前页中的最大值</p>
</li>
<li>
<p>以页为单位, 每页大小为16kb</p>
</li>
<li>
<p>分为叶子节点和非叶子节点,</p>
</li>
<li>
<p>在非叶子节点中:</p>
<ul>
<li>存储的是目录项 和 当前目录下的最大值和最小值</li>
<li>每个目录项中又存储着索引值和当前目录项下的最小值</li>
</ul>
</li>
<li>
<p>在叶子节点中</p>
<ul>
<li>当前页中的最大索引值和最小索引值</li>
<li>数据项: 存储着索引值和完整的数据</li>
</ul>
</li>
<li>
<p>页中每个数据以单链表存储</p>
</li>
<li>
<p>在页于页之间则是通过双链表形式存储.</p>
</li>
</ul>
</li>
</ul>
<h2 id="19、-MySQL事务的四大特性如何实现">19、==MySQL事务的四大特性如何实现==</h2>
<p>​	MySQL 事务的四大特性通常被称为 <strong>ACID</strong> 特性，它们包括 <strong>原子性 (Atomicity)</strong>、<strong>一致性 (Consistency)</strong>、<strong>隔离性 (Isolation)</strong> 和 <strong>持久性 (Durability)</strong>。每个特性都通过不同的机制和设计来保证事务在数据库操作中的正确性与可靠性。</p>
<p><strong>原子性</strong>：通过<code>日志</code>和<code>回滚机制</code>确保事务的全部操作要么都成功，要么都失败。( <strong>redo log</strong>)</p>
<p><strong>一致性</strong>：通过数据的<code>完整性约束</code>、<code>验证</code>以及<code>事务隔离级别</code>来确保数据库保持一致的状态。</p>
<p><strong>隔离性</strong>：通过<code>锁机制</code>和<code>事务隔离级别</code>确保事务并发时互不干扰，避免数据的不一致。</p>
<p><strong>持久性</strong>：通过<code>事务日志</code>和<code>刷新机制</code>确保已提交的事务数据不会丢失，即使系统崩溃也能恢复。</p>
<ol>
<li><strong>原子性 (Atomicity)</strong></li>
</ol>
<ul>
<li><strong>定义</strong>：原子性保证事务内的所有操作要么全部成功，要么全部失败。如果事务中的某个操作失败，整个事务会回滚，恢复到事务开始前的状态。事务被视为一个不可分割的单元。</li>
<li>实现方式
<ul>
<li><strong>日志机制</strong>：MySQL 使用 <strong>事务日志</strong>（如 InnoDB 的 <strong>redo log</strong>）来保证原子性。事务操作的每一步都会被记录到日志中。如果事务失败或需要回滚，MySQL 会根据日志恢复到事务开始之前的状态。</li>
<li><strong>回滚机制</strong>：通过回滚（rollback）命令或自动回滚来撤销未提交的事务操作，确保数据库的原子性。</li>
<li><strong>写前日志（Write-Ahead Logging, WAL）</strong>：MySQL 中的 InnoDB 存储引擎采用 WAL 协议，确保所有修改数据的操作在被提交之前会先写入日志，从而保证事务的原子性。</li>
</ul>
</li>
</ul>
<ol start="2">
<li><strong>一致性 (Consistency)</strong></li>
</ol>
<ul>
<li><strong>定义</strong>：一致性保证事务的执行会使数据库从一个一致的状态转换到另一个一致的状态。在事务开始前和结束后，数据库中的数据必须满足所有的约束、触发器等。</li>
<li>实现方式
<ul>
<li><strong>外键约束</strong>、<strong>CHECK 约束</strong>、<strong>唯一性约束</strong>等可以保证数据的一致性。事务的执行不会违反这些约束，即使在事务的处理中，所有的数据变化也必须保证这些约束不被破坏。</li>
<li><strong>数据验证</strong>：MySQL 会在事务的开始和提交前验证数据的完整性。例如，事务中的 INSERT、UPDATE 和 DELETE 操作会确保数据不会违反数据库的完整性约束。</li>
<li><strong>事务隔离级别</strong>：通过设置事务的隔离级别（如 <strong>READ COMMITTED</strong>、<strong>REPEATABLE READ</strong> 等）来避免脏读、不可重复读等问题，从而保证事务的一致性。</li>
</ul>
</li>
</ul>
<ol start="3">
<li><strong>隔离性 (Isolation)</strong></li>
</ol>
<ul>
<li>
<p><strong>定义</strong>：隔离性保证多个事务并发执行时，每个事务的执行不会受到其他事务的干扰。每个事务看起来都是在独立执行的，其他事务无法看到当前事务的中间结果。</p>
</li>
<li>
<p>实现方式</p>
<ul>
<li>
<p>事务隔离级别</p>
<p>：MySQL 提供了多种隔离级别来控制事务之间的可见性，主要包括：</p>
<ul>
<li><strong>READ UNCOMMITTED</strong>：允许一个事务读取另一个事务未提交的数据（脏读）。</li>
<li><strong>READ COMMITTED</strong>：事务只能读取已提交事务的数据（避免脏读，但仍可能存在不可重复读）。</li>
<li><strong>REPEATABLE READ</strong>：保证事务中多次读取同一数据的结果是一样的（避免脏读和不可重复读），InnoDB 使用该隔离级别。</li>
<li><strong>SERIALIZABLE</strong>：最严格的隔离级别，强制事务串行执行，避免脏读、不可重复读和幻读。</li>
</ul>
</li>
<li>
<p>锁机制</p>
<p>：MySQL 使用行锁和表锁来控制事务的隔离性。行锁可以防止其他事务对正在操作的记录进行修改，从而保证事务隔离性。</p>
<ul>
<li><strong>行级锁（InnoDB的行锁）</strong>：可以对数据行加锁，允许并发操作不同数据行。</li>
<li><strong>表级锁（MyISAM的表锁）</strong>：对整个表加锁，适用于对表操作的事务。</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="4">
<li><strong>持久性 (Durability)</strong></li>
</ol>
<ul>
<li><strong>定义</strong>：持久性保证一旦事务提交，其对数据库的修改是永久性的，即使系统崩溃也不会丢失数据。</li>
<li>实现方式
<ul>
<li><strong>提交日志</strong>：MySQL 使用事务日志（如 <strong>redo log</strong>）来保证事务的持久性。即使数据库发生崩溃，已提交的事务也能通过日志恢复。</li>
<li><strong>刷新日志</strong>：MySQL 会确保在事务提交时，所有操作记录都会被刷新到磁盘中的日志文件，确保数据持久化。</li>
<li><strong>双写缓冲（Doublewrite Buffer）</strong>：InnoDB 使用双写缓冲技术，在写入数据页时，先写入缓冲区，再写入磁盘，确保即使在崩溃的情况下也不会丢失数据。</li>
</ul>
</li>
</ul>
<h2 id="20、谈谈你对MvCC的理解">==20、谈谈你对MvCC的理解==</h2>
<p><strong>MVCC</strong>（Multi-Version Concurrency Control，<code>多版本并发控制</code>）是一种数据库并发控制机制，用于提高数据库在<code>多用户</code>环境中的性能，避免事务间的冲突，并确保数据库的<code>一致性</code>和<code>隔离性</code>。MVCC 通过为每个事务提供数据的<code>不同版本</code>来<code>避免加锁</code>，从而实现更高效的<code>并发访问</code>。</p>
<p><strong>MVCC 的基本原理：</strong></p>
<ol>
<li><strong>版本控制</strong><br>
每条数据在数据库中都有多个版本，每个版本包含数据的一个状态。每当数据发生更新时，数据库不会直接修改现有数据，而是创建一个新的数据版本，并给该版本分配一个唯一的时间戳或版本号。</li>
<li><strong>事务视图</strong><br>
每个事务在开始时，都会看到数据库的一个一致的快照视图，而这个视图是由所有已提交的事务的数据版本构成的。不同事务可以看到不同的数据版本，避免了因锁竞争而导致的性能瓶颈。</li>
<li><strong>事务隔离</strong><br>
MVCC 的实现使得数据库在不同事务之间能够独立读取数据，并且每个事务只能看到它开始时的快照数据，不会被其他事务的修改影响。因此，MVCC 能够实现类似于 <strong>可重复读</strong>（Repeatable Read）和 <strong>读已提交</strong>（Read Committed）的事务隔离级别。</li>
<li><strong>删除和回收</strong><br>
数据的旧版本不会立即删除，而是标记为已过时。当一个事务提交时，它会把对数据的修改写入一个新的版本，旧版本将被标记为无效。数据库会定期回收这些无效的数据版本，以释放存储空间。</li>
</ol>
<p><strong>MVCC 的工作机制：</strong></p>
<ul>
<li><strong>读取数据：</strong> 当事务读取数据时，它会看到在该事务开始之前已经提交的所有数据版本，确保读取到的是一个一致的状态（快照）。</li>
<li><strong>更新数据：</strong> 当事务修改数据时，数据库会为该数据创建一个新的版本，新的版本只对当前事务可见。其他事务不会看到该修改，直到该事务提交。</li>
<li><strong>删除数据：</strong> 当事务删除数据时，数据库会将数据标记为删除，但实际的物理删除操作会延迟到数据不再被任何事务访问时才进行。</li>
<li><strong>提交和回滚：</strong> 当事务提交时，它所修改的数据版本变成可见；当事务回滚时，所有它创建的版本都会被丢弃。</li>
</ul>
<p><strong>MVCC 的优势：</strong></p>
<ol>
<li><strong>提高并发性</strong>：因为读操作不需要加锁，多个事务可以并发读取数据，提高系统的吞吐量。</li>
<li><strong>减少死锁</strong>：由于读操作不涉及锁，事务间的冲突较少，从而减少了死锁的发生。</li>
<li><strong>提高性能</strong>：事务对数据的修改不会立即影响到其他事务，因此避免了读写锁的争用，减少了性能瓶颈。</li>
<li><strong>事务隔离性</strong>：MVCC 能保证事务的一致性和隔离性，多个事务之间互不干扰，能够保证“可重复读”或更高的隔离级别。</li>
</ol>
<p><strong>MVCC 的缺点：</strong></p>
<ol>
<li><strong>空间消耗</strong>：每次更新数据都会产生新的数据版本，因此需要额外的存储空间来维护数据的多个版本。</li>
<li><strong>版本回收复杂性</strong>：由于旧版本的数据不能立即删除，数据库需要额外的机制来定期清理这些过期版本。</li>
<li><strong>复杂的并发控制</strong>：尽管 MVCC 允许多个事务并发执行，但在某些情况下（比如事务之间的写冲突）需要更复杂的冲突检测和解决机制。</li>
</ol>
<h2 id="补充：编写一个生成者消息者模型。【两个线程-一个阻塞队列】">补充：编写一个生成者消息者模型。【两个线程+一个阻塞队列】</h2>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> online.zorange.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.SynchronousQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> orange</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024/11/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PSBTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> SynchronousQueue&lt;Integer&gt; shareBlockQueue=<span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CConsumer</span> <span class="variable">cConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CConsumer</span>(shareBlockQueue);</span><br><span class="line">        <span class="type">PProducer</span> <span class="variable">pProducer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PProducer</span>(shareBlockQueue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(cConsumer,<span class="string">&quot;消费者&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(pProducer,<span class="string">&quot;生产者&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PProducer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Integer&gt; blockingQueue;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">PProducer</span><span class="params">(BlockingQueue arrayBlockingQueue)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.blockingQueue=arrayBlockingQueue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               blockingQueue.put(<span class="number">1</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;队列满了&quot;</span>);</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(Thread.currentThread().getName()+<span class="string">&quot;生产1个, 还剩&quot;</span>+blockingQueue.size());</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">500</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">CConsumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Integer&gt; blockingQueue;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CConsumer</span><span class="params">(BlockingQueue arrayBlockingQueue)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.blockingQueue=arrayBlockingQueue;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">             <span class="type">Integer</span> <span class="variable">poll</span> <span class="operator">=</span> blockingQueue.poll();</span><br><span class="line">             System.out.println(Thread.currentThread().getName()+<span class="string">&quot;消费1个, 还剩&quot;</span>+blockingQueue.size());</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                 <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>复习：先原理在推结论</p>
<p>面试：先说结论在解释原理。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
</search>
